==== Patch <0.8.9.1> level 1
Source: 0d5daa73-5169-4a83-8e4c-b6d9a920c5be:/trunk:655
Target: 0d5daa73-5169-4a83-8e4c-b6d9a920c5be:/0.8.9:636
Log:
Patch.
=== i18n/de.po
==================================================================
--- i18n/de.po	(revision 636)
+++ i18n/de.po	(patch 0.8.9.1 level 1)
@@ -2,7 +2,7 @@
 msgstr ""
 "Project-Id-Version: Portato\n"
 "POT-Creation-Date: \n"
-"PO-Revision-Date: 2008-01-14 23:09+0100\n"
+"PO-Revision-Date: 2008-01-18 02:40+0100\n"
 "Last-Translator: René 'Necoro' Neumann <necoro@necoro.net>\n"
 "Language-Team: \n"
 "MIME-Version: 1.0\n"
@@ -25,7 +25,7 @@
 msgstr "Aktua_lisiere Portage-Cache"
 
 #: portato/gui/templates/portato.glade:68
-#: portato/gui/templates/portato.glade:1840
+#: portato/gui/templates/portato.glade:1962
 msgid "gtk-quit"
 msgstr ""
 
@@ -34,275 +34,268 @@
 msgstr "_Emerge"
 
 #: portato/gui/templates/portato.glade:89
-#: portato/gui/templates/portato.glade:945
-msgid "E_merge"
-msgstr "E_merge"
+#: portato/gui/templates/portato.glade:497
+msgid "_Install"
+msgstr "_Installieren"
 
-#: portato/gui/templates/portato.glade:104
-#: portato/gui/templates/portato.glade:979
-msgid "_Unmerge"
-msgstr "_Unmerge"
+#: portato/gui/templates/portato.glade:105
+#: portato/gui/templates/portato.glade:508
+msgid "_Uninstall"
+msgstr "_Deinstallieren"
 
-#: portato/gui/templates/portato.glade:118
-#: portato/gui/templates/portato.glade:998
+#: portato/gui/templates/portato.glade:121
+#: portato/gui/templates/portato.glade:951
 msgid "Update _World"
 msgstr "Update _World"
 
-#: portato/gui/templates/portato.glade:127
+#: portato/gui/templates/portato.glade:130
 msgid "Show Updatable P_ackages"
 msgstr "Zeige Pakete mit _Updates"
 
-#: portato/gui/templates/portato.glade:136
-msgid "Show Only _Installed Packages"
-msgstr "Zeige nur _installierte Pakete"
+#: portato/gui/templates/portato.glade:139
+msgid "Show _Only Installed Packages"
+msgstr "_Zeige nur installierte Pakete"
 
-#: portato/gui/templates/portato.glade:150
+#: portato/gui/templates/portato.glade:153
 msgid "_Sync"
 msgstr "_Sync"
 
-#: portato/gui/templates/portato.glade:166
+#: portato/gui/templates/portato.glade:169
 msgid "Save _Flags"
 msgstr "Speichere _Flags"
 
-#: portato/gui/templates/portato.glade:187
-#: portato/gui/templates/portato.glade:279
-#: portato/gui/templates/portato.glade:1815
+#: portato/gui/templates/portato.glade:190
+#: portato/gui/templates/portato.glade:282
+#: portato/gui/templates/portato.glade:1937
 msgid "Emerge _Paused"
 msgstr "Emerge _angehalten"
 
-#: portato/gui/templates/portato.glade:195
-#: portato/gui/templates/portato.glade:261
-#: portato/gui/templates/portato.glade:1822
+#: portato/gui/templates/portato.glade:198
+#: portato/gui/templates/portato.glade:264
+#: portato/gui/templates/portato.glade:1944
 msgid "_Kill Emerge"
 msgstr "_Kill Emerge"
 
-#: portato/gui/templates/portato.glade:218
-#: portato/gui/gtk/windows.py:1022
+#: portato/gui/templates/portato.glade:221
+#: portato/gui/gtk/windows.py:1064
 msgid "Queue"
 msgstr "Queue"
 
-#: portato/gui/templates/portato.glade:225
+#: portato/gui/templates/portato.glade:228
 msgid "Oneshot"
 msgstr "Oneshot"
 
-#: portato/gui/templates/portato.glade:237
-#: portato/gui/gtk/windows.py:1182
+#: portato/gui/templates/portato.glade:240
+#: portato/gui/gtk/windows.py:1231
 msgid "Console"
 msgstr "Konsole"
 
-#: portato/gui/templates/portato.glade:244
+#: portato/gui/templates/portato.glade:247
 msgid "_Copy"
 msgstr "_Kopieren"
 
-#: portato/gui/templates/portato.glade:290
+#: portato/gui/templates/portato.glade:293
 msgid "Plu_gins"
 msgstr "Plu_gins"
 
-#: portato/gui/templates/portato.glade:302
+#: portato/gui/templates/portato.glade:305
 msgid "_?"
 msgstr "_?"
 
-#: portato/gui/templates/portato.glade:310
+#: portato/gui/templates/portato.glade:313
 msgid "_About"
 msgstr "_Über"
 
-#: portato/gui/templates/portato.glade:328
+#: portato/gui/templates/portato.glade:331
 msgid "_Plugins"
 msgstr "_Plugins"
 
-#: portato/gui/templates/portato.glade:365
+#: portato/gui/templates/portato.glade:368
 msgid "gtk-find"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:464
-msgid "Add to Emerge Queue"
-msgstr "Füge zur Emerge Queue hinzu"
+#: portato/gui/templates/portato.glade:472
+#: portato/gui/templates/portato.glade:652
+#: portato/gui/templates/portato.glade:668
+msgid "label"
+msgstr ""
 
-#: portato/gui/templates/portato.glade:476
-msgid "Remove from Emerge Queue"
-msgstr "Entferne aus der Emerge Queue"
+#: portato/gui/templates/portato.glade:496
+msgid "Install onto system"
+msgstr "Füge zum System hinzu"
 
-#: portato/gui/templates/portato.glade:488
+#: portato/gui/templates/portato.glade:507
+msgid "Uninstall from system"
+msgstr "Lösche vom System"
+
+#: portato/gui/templates/portato.glade:518
 msgid "Revert changes"
 msgstr "Rückgängig"
 
-#: portato/gui/templates/portato.glade:510
-#: portato/gui/templates/portato.glade:633
-#: portato/gui/templates/portato.glade:648
-msgid "label"
-msgstr ""
+#: portato/gui/templates/portato.glade:519
+msgid "Re_vert"
+msgstr "Rü_ckgängig"
 
-#: portato/gui/templates/portato.glade:555
-msgid "<b>Installed, but not in portage anymore</b>"
-msgstr "<b>Installiert, aber nicht mehr im Portage-Tree vorhanden</b>"
+#: portato/gui/templates/portato.glade:565
+#: portato/gui/gtk/windows.py:755
+#: portato/gui/gtk/windows.py:758
+#: portato/gui/gtk/windows.py:825
+#: portato/gui/gtk/windows.py:829
+msgid "Testing"
+msgstr "Testing"
 
-#: portato/gui/templates/portato.glade:570
-msgid "<span foreground='red'><b>MISSING KEYWORD</b></span>"
-msgstr "<span foreground='red'><b>FEHLENDES KEYWORD</b></span>"
+#: portato/gui/templates/portato.glade:598
+#: portato/gui/gtk/windows.py:738
+#: portato/gui/gtk/windows.py:741
+#: portato/gui/gtk/windows.py:744
+#: portato/gui/gtk/windows.py:852
+#: portato/gui/gtk/windows.py:856
+#: portato/gui/gtk/windows.py:863
+#: portato/gui/gtk/windows.py:867
+msgid "Masked"
+msgstr "Masked"
 
-#: portato/gui/templates/portato.glade:602
-msgid "<b>Description:</b>"
-msgstr "<b>Beschreibung</b>"
-
 #: portato/gui/templates/portato.glade:617
-msgid "<b>Overlay:</b>"
-msgstr "<b>Overlay:</b>"
+#: portato/gui/gtk/windows.py:610
+msgid "Installed"
+msgstr "Installiert"
 
-#: portato/gui/templates/portato.glade:665
+#: portato/gui/templates/portato.glade:635
 msgid "<b>Homepage:</b>"
 msgstr "<b>Homepage:</b>"
 
-#: portato/gui/templates/portato.glade:682
-#: portato/gui/gtk/windows.py:575
-msgid "Installed"
-msgstr "Installiert"
+#: portato/gui/templates/portato.glade:683
+msgid "<b>Overlay:</b>"
+msgstr "<b>Overlay:</b>"
 
-#: portato/gui/templates/portato.glade:701
-#: portato/gui/gtk/windows.py:703
-#: portato/gui/gtk/windows.py:706
-#: portato/gui/gtk/windows.py:709
-#: portato/gui/gtk/windows.py:811
-#: portato/gui/gtk/windows.py:815
-#: portato/gui/gtk/windows.py:822
-#: portato/gui/gtk/windows.py:826
-msgid "Masked"
-msgstr "Masked"
+#: portato/gui/templates/portato.glade:699
+msgid "<b>Description:</b>"
+msgstr "<b>Beschreibung</b>"
 
-#: portato/gui/templates/portato.glade:734
-#: portato/gui/gtk/windows.py:720
-#: portato/gui/gtk/windows.py:723
-#: portato/gui/gtk/windows.py:784
-#: portato/gui/gtk/windows.py:788
-msgid "Testing"
-msgstr "Testing"
+#: portato/gui/templates/portato.glade:730
+msgid "<span foreground='red'><b>MISSING KEYWORD</b></span>"
+msgstr "<span foreground='red'><b>FEHLENDES KEYWORD</b></span>"
 
-#: portato/gui/templates/portato.glade:754
+#: portato/gui/templates/portato.glade:745
+msgid "<b>Installed, but not in portage anymore</b>"
+msgstr "<b>Installiert, aber nicht mehr im Portage-Tree vorhanden</b>"
+
+#: portato/gui/templates/portato.glade:762
 msgid "_General"
 msgstr "All_gemein"
 
-#: portato/gui/templates/portato.glade:786
+#: portato/gui/templates/portato.glade:794
 msgid "U_se List"
 msgstr "U_se-Flag-Liste"
 
-#: portato/gui/templates/portato.glade:814
+#: portato/gui/templates/portato.glade:822
 msgid "E_build"
 msgstr "E_build"
 
-#: portato/gui/templates/portato.glade:842
+#: portato/gui/templates/portato.glade:850
 msgid "C_hangelog"
 msgstr "C_hangelog"
 
-#: portato/gui/templates/portato.glade:870
-msgid "F_iles"
-msgstr "Date_ien"
+#: portato/gui/templates/portato.glade:878
+msgid "Fi_les"
+msgstr "_Dateien"
 
-#: portato/gui/templates/portato.glade:926
-msgid "Install all packages in the \"Emerge Queue\""
-msgstr "Installiere alle Pakete aus der \"Emerge Queue\""
+#: portato/gui/templates/portato.glade:916
+msgid "Execute the current selected queue"
+msgstr "Führe die aktuell gewählte Queue aus"
 
-#: portato/gui/templates/portato.glade:960
-msgid "Deinstall all packages in the \"Unmerge Queue\""
-msgstr "Deinstalliere alle Pakete aus der \"Unmerge Queue\""
+#: portato/gui/templates/portato.glade:935
+msgid "E_xecute"
+msgstr "_Ausführen"
 
-#: portato/gui/templates/portato.glade:997
+#: portato/gui/templates/portato.glade:950
 msgid "Calculate the packages which will be installed during an \"update world\""
 msgstr "Berechnet die Pakete, welche während eines \"update world\" installiert werden würden"
 
-#: portato/gui/templates/portato.glade:1010
+#: portato/gui/templates/portato.glade:963
 msgid "Remove the selected package from the queue"
 msgstr "Löscht das gewählte Paket aus der Queue"
 
-#: portato/gui/templates/portato.glade:1011
+#: portato/gui/templates/portato.glade:964
 msgid "_Remove"
 msgstr "_Löschen"
 
-#: portato/gui/templates/portato.glade:1033
+#: portato/gui/templates/portato.glade:1007
 msgid "_Queue"
 msgstr "_Queue"
 
-#: portato/gui/templates/portato.glade:1059
+#: portato/gui/templates/portato.glade:1033
 msgid "_Console"
 msgstr "_Konsole"
 
-#: portato/gui/templates/portato.glade:1094
+#: portato/gui/templates/portato.glade:1068
 msgid "L_og"
 msgstr "L_og"
 
-#: portato/gui/templates/portato.glade:1129
+#: portato/gui/templates/portato.glade:1103
 msgid "Portato - A Portage GUI"
 msgstr "Portato - A Portage GUI"
 
-#: portato/gui/templates/portato.glade:1146
+#: portato/gui/templates/portato.glade:1120
 msgid "Search Results"
 msgstr "Ergebnisse"
 
-#: portato/gui/templates/portato.glade:1186
-#: portato/gui/templates/portato.glade:1781
-#: portato/gui/templates/portato.glade:1889
+#: portato/gui/templates/portato.glade:1160
+#: portato/gui/templates/portato.glade:1903
+#: portato/gui/templates/portato.glade:2011
 msgid "gtk-cancel"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1198
+#: portato/gui/templates/portato.glade:1172
 msgid "gtk-jump-to"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1213
+#: portato/gui/templates/portato.glade:1187
 msgid "gtk-ok"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1234
+#: portato/gui/templates/portato.glade:1208
 msgid "Preferences"
 msgstr "Einstellungen"
 
-#: portato/gui/templates/portato.glade:1269
+#: portato/gui/templates/portato.glade:1243
 msgid "Debug"
 msgstr "Debug"
 
-#: portato/gui/templates/portato.glade:1282
+#: portato/gui/templates/portato.glade:1256
 msgid "Browser command: "
 msgstr "Browser-Befehl: "
 
-#: portato/gui/templates/portato.glade:1308
+#: portato/gui/templates/portato.glade:1282
+#: portato/gui/templates/portato.glade:1709
 msgid "<b>General Options</b>"
 msgstr "<b>Allgemeine Optionen</b>"
 
-#: portato/gui/templates/portato.glade:1358
+#: portato/gui/templates/portato.glade:1332
 msgid "<b>Update World Options</b>"
 msgstr "<b>Optionen für \"update world\"</b>"
 
-#: portato/gui/templates/portato.glade:1386
+#: portato/gui/templates/portato.glade:1360
 msgid "Sync command: "
 msgstr "Sync-Befehl: "
 
-#: portato/gui/templates/portato.glade:1407
+#: portato/gui/templates/portato.glade:1381
 msgid "<b>Sync Options</b>"
 msgstr "<b>Sync Optionen</b>"
 
-#: portato/gui/templates/portato.glade:1458
-msgid "File name to use, if package.use is a directory: "
-msgstr "Zu benutzender Dateiname, wenn package.use ein Verzeichnis ist:"
+#: portato/gui/templates/portato.glade:1422
+msgid "<u><i>Masking Keywords</i></u>"
+msgstr "<u><i>Masking Keywords</i></u>"
 
-#: portato/gui/templates/portato.glade:1469
-msgid "Add only exact version to package.use"
-msgstr "Füge nur die exakte Paketversion zu package.keywords hinzu"
+#: portato/gui/templates/portato.glade:1437
+msgid "<u><i>Testing Keywords</i></u>"
+msgstr "<u><i>Testing Keywords</i></u>"
 
-#: portato/gui/templates/portato.glade:1482
-msgid "Add only exact version to package.keywords"
-msgstr "Füge nur die exakte Paketversion zu package.keywords hinzu"
+#: portato/gui/templates/portato.glade:1452
+msgid "<u><i>Use-Flags</i></u>"
+msgstr "<u><i>Use-Flags</i></u>"
 
-#: portato/gui/templates/portato.glade:1496
-msgid "File name to use, if package.keywords is a directory: "
-msgstr "Zu benutzender Dateiname, wenn package.keywords ein Verzeichnis ist:"
-
-#: portato/gui/templates/portato.glade:1530
-msgid "File name to use, if package.mask/package.unmask is a directory: "
-msgstr "Zu benutzender Dateiname, wenn package.mask/package.unmask ein Verzeichnis ist:"
-
-#: portato/gui/templates/portato.glade:1541
-msgid "Add only exact version to package.mask/package.unmask"
-msgstr "Füge nur die exakte Paketversion zu package.mask/package.unmask hinzu"
-
-#: portato/gui/templates/portato.glade:1563
+#: portato/gui/templates/portato.glade:1474
 msgid ""
 "<u>You may use the following placeholders:</u>\n"
 "\n"
@@ -316,64 +309,92 @@
 "<i>$(pkg)</i>: Paketname\n"
 "<i>$(cat-1)/$(cat-2)</i>: erster/zweiter Teil der Kategorie"
 
-#: portato/gui/templates/portato.glade:1589
-msgid "<u><i>Use-Flags</i></u>"
-msgstr "<u><i>Use-Flags</i></u>"
+#: portato/gui/templates/portato.glade:1498
+msgid "Add only exact version to package.mask/package.unmask"
+msgstr "Füge nur die exakte Paketversion zu package.mask/package.unmask hinzu"
 
-#: portato/gui/templates/portato.glade:1604
-msgid "<u><i>Testing Keywords</i></u>"
-msgstr "<u><i>Testing Keywords</i></u>"
+#: portato/gui/templates/portato.glade:1512
+msgid "File name to use, if package.mask/package.unmask is a directory: "
+msgstr "Zu benutzender Dateiname, wenn package.mask/package.unmask ein Verzeichnis ist:"
 
-#: portato/gui/templates/portato.glade:1619
-msgid "<u><i>Masking Keywords</i></u>"
-msgstr "<u><i>Masking Keywords</i></u>"
+#: portato/gui/templates/portato.glade:1546
+msgid "File name to use, if package.keywords is a directory: "
+msgstr "Zu benutzender Dateiname, wenn package.keywords ein Verzeichnis ist:"
 
-#: portato/gui/templates/portato.glade:1636
+#: portato/gui/templates/portato.glade:1557
+msgid "Add only exact version to package.keywords"
+msgstr "Füge nur die exakte Paketversion zu package.keywords hinzu"
+
+#: portato/gui/templates/portato.glade:1570
+msgid "Add only exact version to package.use"
+msgstr "Füge nur die exakte Paketversion zu package.keywords hinzu"
+
+#: portato/gui/templates/portato.glade:1584
+msgid "File name to use, if package.use is a directory: "
+msgstr "Zu benutzender Dateiname, wenn package.use ein Verzeichnis ist:"
+
+#: portato/gui/templates/portato.glade:1610
 msgid "<b>Use Flag and Keyword Options</b>"
 msgstr "<b>Use-Flag- und Keyword-Optionen</b>"
 
-#: portato/gui/templates/portato.glade:1654
+#: portato/gui/templates/portato.glade:1628
 msgid "General"
 msgstr "Allgemein"
 
-#: portato/gui/templates/portato.glade:1677
+#: portato/gui/templates/portato.glade:1665
+msgid "Enable systray"
+msgstr "Aktiviere Systray"
+
+#: portato/gui/templates/portato.glade:1678
 msgid "Show emerge progress in title - similar to the console tab"
 msgstr "Zeige den Emerge Prozess im Fenstertitel (wie im Konsolen-Tab)"
 
-#: portato/gui/templates/portato.glade:1693
-msgid "Enable systray"
-msgstr "Aktiviere Systray"
-
-#: portato/gui/templates/portato.glade:1707
+#: portato/gui/templates/portato.glade:1692
 msgid "Hide on minimization (only if systray is enabled)"
 msgstr "Minimiere zu Systray"
 
-#: portato/gui/templates/portato.glade:1726
+#: portato/gui/templates/portato.glade:1743
 msgid "Console Font"
 msgstr "Schriftart in Konsole"
 
-#: portato/gui/templates/portato.glade:1736
+#: portato/gui/templates/portato.glade:1753
 msgid "Chose a console font"
 msgstr "Wähle eine Schriftart"
 
-#: portato/gui/templates/portato.glade:1763
+#: portato/gui/templates/portato.glade:1770
+msgid "<b>Console Options</b>"
+msgstr "<b>Konsolen Optionen</b>"
+
+#: portato/gui/templates/portato.glade:1810
+msgid "Package Tabs"
+msgstr "Pakettabs"
+
+#: portato/gui/templates/portato.glade:1835
+msgid "System Tabs"
+msgstr "Systemtabs"
+
+#: portato/gui/templates/portato.glade:1861
+msgid "<b>Tab Options</b>"
+msgstr "<b>Tab Optionen</b>"
+
+#: portato/gui/templates/portato.glade:1885
 msgid "Visual"
 msgstr "Oberfläche"
 
-#: portato/gui/templates/portato.glade:1790
-#: portato/gui/templates/portato.glade:1901
+#: portato/gui/templates/portato.glade:1912
+#: portato/gui/templates/portato.glade:2023
 msgid "gtk-apply"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1850
+#: portato/gui/templates/portato.glade:1972
 msgid "Plugins"
 msgstr "Plugins"
 
-#: portato/gui/templates/portato.glade:1922
+#: portato/gui/templates/portato.glade:2044
 msgid "About Portato"
 msgstr "Portato"
 
-#: portato/gui/templates/portato.glade:1931
+#: portato/gui/templates/portato.glade:2053
 msgid ""
 "This software is licensed under the terms of the GPLv2.\n"
 "Copyright (C) 2006-2007 René 'Necoro' Neumann <necoro@necoro.net>"
@@ -381,23 +402,23 @@
 "This software is licensed under the terms of the GPLv2.\n"
 "Copyright (C) 2006-2007 René 'Necoro' Neumann <necoro@necoro.net>"
 
-#: portato/gui/templates/portato.glade:1933
+#: portato/gui/templates/portato.glade:2055
 msgid "A Portage GUI"
 msgstr "A Portage GUI"
 
-#: portato/gui/templates/portato.glade:2023
+#: portato/gui/templates/portato.glade:2145
 msgid "Updateble Packages"
 msgstr "Pakete mit Updates"
 
-#: portato/gui/templates/portato.glade:2065
+#: portato/gui/templates/portato.glade:2187
 msgid "_Close"
 msgstr "_Schließen"
 
-#: portato/gui/templates/portato.glade:2077
+#: portato/gui/templates/portato.glade:2199
 msgid "Select _All"
 msgstr "_Alles auswählen"
 
-#: portato/gui/templates/portato.glade:2092
+#: portato/gui/templates/portato.glade:2214
 msgid "_Install Selected"
 msgstr "_Installiere ausgewählte"
 
@@ -481,7 +502,7 @@
 
 #: portato/gui/gtk/windows.py:61
 #: portato/gui/gtk/windows.py:149
-#: portato/gui/gtk/windows.py:574
+#: portato/gui/gtk/windows.py:609
 msgid "Enabled"
 msgstr "Aktiviert"
 
@@ -509,138 +530,151 @@
 msgid "Results"
 msgstr "Ergebnisse"
 
-#: portato/gui/gtk/windows.py:496
+#: portato/gui/gtk/windows.py:372
+msgid "Top"
+msgstr "Oben"
+
+#: portato/gui/gtk/windows.py:372
+msgid "Bottom"
+msgstr "Unten"
+
+#: portato/gui/gtk/windows.py:372
+msgid "Left"
+msgstr "Links"
+
+#: portato/gui/gtk/windows.py:372
+msgid "Right"
+msgstr "Rechts"
+
+#: portato/gui/gtk/windows.py:531
 msgid "<no description>"
 msgstr "<keine Beschreibung>"
 
-#: portato/gui/gtk/windows.py:519
+#: portato/gui/gtk/windows.py:554
 msgid "The first homepage part does not start with 'http' or 'ftp'."
 msgstr "Der erste Teil der Homepage startet nicht mit 'http' oder 'ftp'."
 
-#: portato/gui/gtk/windows.py:523
+#: portato/gui/gtk/windows.py:558
 msgid "Blank inside homepage."
 msgstr "Leerzeichen innerhalb der Homepage-URL."
 
-#: portato/gui/gtk/windows.py:552
+#: portato/gui/gtk/windows.py:587
 msgid "This is an expanded use flag and cannot be selected"
 msgstr "Dies ist ein \"Expanded Use Flag\" und kann daher nicht ausgewählt werden."
 
-#: portato/gui/gtk/windows.py:576
+#: portato/gui/gtk/windows.py:611
 msgid "Flag"
 msgstr "Flag"
 
-#: portato/gui/gtk/windows.py:577
+#: portato/gui/gtk/windows.py:612
 msgid "Description"
 msgstr "Beschreibung"
 
-#: portato/gui/gtk/windows.py:655
+#: portato/gui/gtk/windows.py:690
 #, python-format
 msgid "Package could not be found: %s"
 msgstr "Paket konnte nicht gefunden werden: %s"
 
-#: portato/gui/gtk/windows.py:712
-#: portato/gui/gtk/windows.py:813
+#: portato/gui/gtk/windows.py:747
+#: portato/gui/gtk/windows.py:854
 msgid "Masked by user"
 msgstr "Vom Benutzer maskiert"
 
-#: portato/gui/gtk/windows.py:888
+#: portato/gui/gtk/windows.py:929
 msgid "Loading Config"
 msgstr "Lade Konfiguration"
 
-#: portato/gui/gtk/windows.py:900
+#: portato/gui/gtk/windows.py:941
 msgid "Creating Database"
 msgstr "Erstelle Datenbank"
 
-#: portato/gui/gtk/windows.py:905
+#: portato/gui/gtk/windows.py:946
 msgid "Loading Plugins"
 msgstr "Lade Plugins"
 
-#: portato/gui/gtk/windows.py:918
+#: portato/gui/gtk/windows.py:959
 msgid "Building frontend"
 msgstr "Erstelle Oberfläche"
 
-#: portato/gui/gtk/windows.py:970
+#: portato/gui/gtk/windows.py:1011
 msgid "Restoring Session"
 msgstr "Lade Session"
 
-#: portato/gui/gtk/windows.py:973
+#: portato/gui/gtk/windows.py:1014
 msgid "Finishing startup"
 msgstr "Erledige letzte Handgriffe :)"
 
-#: portato/gui/gtk/windows.py:1025
+#: portato/gui/gtk/windows.py:1067
 msgid "Options"
 msgstr "Optionen"
 
-#: portato/gui/gtk/windows.py:1035
+#: portato/gui/gtk/windows.py:1077
 msgid "Categories"
 msgstr "Kategorien"
 
-#: portato/gui/gtk/windows.py:1062
+#: portato/gui/gtk/windows.py:1104
 msgid "Packages"
 msgstr "Pakete"
 
-#: portato/gui/gtk/windows.py:1184
+#: portato/gui/gtk/windows.py:1233
 #, python-format
 msgid "Console (%(title)s)"
 msgstr "Konsole (%(title)s)"
 
-#: portato/gui/gtk/windows.py:1300
+#: portato/gui/gtk/windows.py:1347
 msgid "use flags"
 msgstr "Use Flags"
 
-#: portato/gui/gtk/windows.py:1307
+#: portato/gui/gtk/windows.py:1354
 msgid "masking keywords"
 msgstr "Masking Keywords"
 
-#: portato/gui/gtk/views.py:70
-msgid "Package is not installed"
-msgstr "Paket ist nicht installiert"
-
-#: portato/gui/gtk/views.py:87
-#, python-format
-msgid "No %(old)s language file installed. Falling back to %(new)s."
-msgstr "Keine \"%(old)s\" Syntaxdatei gefunden. Benutze \"%(new)s\"-Syntax."
-
-#: portato/gui/gtk/views.py:92
-#, python-format
-msgid "No %(old)s language file installed. Disable highlighting."
-msgstr "Keine \"%(old)s\" Syntaxdatei gefunden. Deaktiviere Hervorhebung."
-
-#: portato/gui/gtk/views.py:111
-#, python-format
-msgid "Error: %s"
-msgstr "Fehler: %s"
-
 #: portato/gui/gtk/__init__.py:23
 msgid "Loading Portage"
 msgstr "Lade Portage"
 
-#: portato/gui/gtk/wrapper.py:39
+#: portato/gui/gtk/wrapper.py:40
 msgid "oneshot"
 msgstr "oneshot"
 
-#: portato/gui/gtk/wrapper.py:44
+#: portato/gui/gtk/wrapper.py:45
 #, python-format
 msgid "updating from version %s"
 msgstr "Update von Version %s"
 
-#: portato/gui/gtk/wrapper.py:46
+#: portato/gui/gtk/wrapper.py:47
 msgid "updating"
 msgstr "Update"
 
-#: portato/gui/gtk/wrapper.py:51
+#: portato/gui/gtk/wrapper.py:52
 #, python-format
 msgid "downgrading from version %s"
 msgstr "Downgrade von Version %s"
 
-#: portato/gui/gtk/wrapper.py:53
+#: portato/gui/gtk/wrapper.py:54
 msgid "downgrading"
 msgstr "Downgrade"
 
-#: portato/gui/gtk/wrapper.py:57
+#: portato/gui/gtk/wrapper.py:58
 msgid "IUSE changes:"
 msgstr "IUSE Änderungen:"
 
+#: portato/gui/gtk/wrapper.py:66
+msgid "(In Progress)"
+msgstr "(In Bearbeitung)"
+
+#: portato/gui/gtk/wrapper.py:70
+msgid "Install"
+msgstr "Installieren"
+
+#: portato/gui/gtk/wrapper.py:75
+msgid "Uninstall"
+msgstr "Deinstallieren"
+
+#: portato/gui/gtk/wrapper.py:81
+msgid "Update"
+msgstr "Update"
+
 #: portato/gui/gtk/dialogs.py:17
 msgid ""
 "There are some packages in the emerge queue and/or an emerge process is running.\n"
@@ -685,6 +719,14 @@
 msgstr "Du kannst keine Abhängigkeiten löschen ;)."
 
 #: portato/gui/gtk/dialogs.py:72
+msgid ""
+"This is the updates queue. You cannot remove single elements.\n"
+"Do you want to clear the whole queue instead?"
+msgstr ""
+"Das ist die Update-Queue. Aus dieser können keine einzelnen Pakete entfernt werden.\n"
+"Soll stattdessen die komplette Queue entfernt werden?"
+
+#: portato/gui/gtk/dialogs.py:78
 msgid "Do you really want to clear the whole queue?"
 msgstr "Wirklich die gesamte Queue löschen?"
 
@@ -727,6 +769,25 @@
 "Exception:\n"
 "%s"
 
+#: portato/gui/gtk/views.py:70
+msgid "Package is not installed"
+msgstr "Paket ist nicht installiert"
+
+#: portato/gui/gtk/views.py:87
+#, python-format
+msgid "No %(old)s language file installed. Falling back to %(new)s."
+msgstr "Keine \"%(old)s\" Syntaxdatei gefunden. Benutze \"%(new)s\"-Syntax."
+
+#: portato/gui/gtk/views.py:92
+#, python-format
+msgid "No %(old)s language file installed. Disable highlighting."
+msgstr "Keine \"%(old)s\" Syntaxdatei gefunden. Deaktiviere Hervorhebung."
+
+#: portato/gui/gtk/views.py:111
+#, python-format
+msgid "Error: %s"
+msgstr "Fehler: %s"
+
 #: portato/gui/gui_helper.py:125
 msgid "ALL"
 msgstr "ALLE"
=== i18n/messages.pot
==================================================================
--- i18n/messages.pot	(revision 636)
+++ i18n/messages.pot	(patch 0.8.9.1 level 1)
@@ -8,7 +8,7 @@
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
 "Report-Msgid-Bugs-To: \n"
-"POT-Creation-Date: 2008-01-14 23:07+0100\n"
+"POT-Creation-Date: 2008-01-18 02:35+0100\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
 "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -29,7 +29,7 @@
 msgstr ""
 
 #: portato/gui/templates/portato.glade:68
-#: portato/gui/templates/portato.glade:1840
+#: portato/gui/templates/portato.glade:1962
 msgid "gtk-quit"
 msgstr ""
 
@@ -38,267 +38,260 @@
 msgstr ""
 
 #: portato/gui/templates/portato.glade:89
-#: portato/gui/templates/portato.glade:945
-msgid "E_merge"
+#: portato/gui/templates/portato.glade:497
+msgid "_Install"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:104
-#: portato/gui/templates/portato.glade:979
-msgid "_Unmerge"
+#: portato/gui/templates/portato.glade:105
+#: portato/gui/templates/portato.glade:508
+msgid "_Uninstall"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:118
-#: portato/gui/templates/portato.glade:998
+#: portato/gui/templates/portato.glade:121
+#: portato/gui/templates/portato.glade:951
 msgid "Update _World"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:127
+#: portato/gui/templates/portato.glade:130
 msgid "Show Updatable P_ackages"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:136
-msgid "Show Only _Installed Packages"
+#: portato/gui/templates/portato.glade:139
+msgid "Show _Only Installed Packages"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:150
+#: portato/gui/templates/portato.glade:153
 msgid "_Sync"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:166
+#: portato/gui/templates/portato.glade:169
 msgid "Save _Flags"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:187
-#: portato/gui/templates/portato.glade:279
-#: portato/gui/templates/portato.glade:1815
+#: portato/gui/templates/portato.glade:190
+#: portato/gui/templates/portato.glade:282
+#: portato/gui/templates/portato.glade:1937
 msgid "Emerge _Paused"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:195
-#: portato/gui/templates/portato.glade:261
-#: portato/gui/templates/portato.glade:1822
+#: portato/gui/templates/portato.glade:198
+#: portato/gui/templates/portato.glade:264
+#: portato/gui/templates/portato.glade:1944
 msgid "_Kill Emerge"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:218 portato/gui/gtk/windows.py:1022
+#: portato/gui/templates/portato.glade:221 portato/gui/gtk/windows.py:1064
 msgid "Queue"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:225
+#: portato/gui/templates/portato.glade:228
 msgid "Oneshot"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:237 portato/gui/gtk/windows.py:1182
+#: portato/gui/templates/portato.glade:240 portato/gui/gtk/windows.py:1231
 msgid "Console"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:244
+#: portato/gui/templates/portato.glade:247
 msgid "_Copy"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:290
+#: portato/gui/templates/portato.glade:293
 msgid "Plu_gins"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:302
+#: portato/gui/templates/portato.glade:305
 msgid "_?"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:310
+#: portato/gui/templates/portato.glade:313
 msgid "_About"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:328
+#: portato/gui/templates/portato.glade:331
 msgid "_Plugins"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:365
+#: portato/gui/templates/portato.glade:368
 msgid "gtk-find"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:464
-msgid "Add to Emerge Queue"
+#: portato/gui/templates/portato.glade:472
+#: portato/gui/templates/portato.glade:652
+#: portato/gui/templates/portato.glade:668
+msgid "label"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:476
-msgid "Remove from Emerge Queue"
+#: portato/gui/templates/portato.glade:496
+msgid "Install onto system"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:488
-msgid "Revert changes"
+#: portato/gui/templates/portato.glade:507
+msgid "Uninstall from system"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:510
-#: portato/gui/templates/portato.glade:633
-#: portato/gui/templates/portato.glade:648
-msgid "label"
+#: portato/gui/templates/portato.glade:518
+msgid "Revert changes"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:555
-msgid "<b>Installed, but not in portage anymore</b>"
+#: portato/gui/templates/portato.glade:519
+msgid "Re_vert"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:570
-msgid "<span foreground='red'><b>MISSING KEYWORD</b></span>"
+#: portato/gui/templates/portato.glade:565 portato/gui/gtk/windows.py:755
+#: portato/gui/gtk/windows.py:758 portato/gui/gtk/windows.py:825
+#: portato/gui/gtk/windows.py:829
+msgid "Testing"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:602
-msgid "<b>Description:</b>"
+#: portato/gui/templates/portato.glade:598 portato/gui/gtk/windows.py:738
+#: portato/gui/gtk/windows.py:741 portato/gui/gtk/windows.py:744
+#: portato/gui/gtk/windows.py:852 portato/gui/gtk/windows.py:856
+#: portato/gui/gtk/windows.py:863 portato/gui/gtk/windows.py:867
+msgid "Masked"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:617
-msgid "<b>Overlay:</b>"
+#: portato/gui/templates/portato.glade:617 portato/gui/gtk/windows.py:610
+msgid "Installed"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:665
+#: portato/gui/templates/portato.glade:635
 msgid "<b>Homepage:</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:682 portato/gui/gtk/windows.py:575
-msgid "Installed"
+#: portato/gui/templates/portato.glade:683
+msgid "<b>Overlay:</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:701 portato/gui/gtk/windows.py:703
-#: portato/gui/gtk/windows.py:706 portato/gui/gtk/windows.py:709
-#: portato/gui/gtk/windows.py:811 portato/gui/gtk/windows.py:815
-#: portato/gui/gtk/windows.py:822 portato/gui/gtk/windows.py:826
-msgid "Masked"
+#: portato/gui/templates/portato.glade:699
+msgid "<b>Description:</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:734 portato/gui/gtk/windows.py:720
-#: portato/gui/gtk/windows.py:723 portato/gui/gtk/windows.py:784
-#: portato/gui/gtk/windows.py:788
-msgid "Testing"
+#: portato/gui/templates/portato.glade:730
+msgid "<span foreground='red'><b>MISSING KEYWORD</b></span>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:754
+#: portato/gui/templates/portato.glade:745
+msgid "<b>Installed, but not in portage anymore</b>"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:762
 msgid "_General"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:786
+#: portato/gui/templates/portato.glade:794
 msgid "U_se List"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:814
+#: portato/gui/templates/portato.glade:822
 msgid "E_build"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:842
+#: portato/gui/templates/portato.glade:850
 msgid "C_hangelog"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:870
-msgid "F_iles"
+#: portato/gui/templates/portato.glade:878
+msgid "Fi_les"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:926
-msgid "Install all packages in the \"Emerge Queue\""
+#: portato/gui/templates/portato.glade:916
+msgid "Execute the current selected queue"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:960
-msgid "Deinstall all packages in the \"Unmerge Queue\""
+#: portato/gui/templates/portato.glade:935
+msgid "E_xecute"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:997
+#: portato/gui/templates/portato.glade:950
 msgid ""
 "Calculate the packages which will be installed during an \"update world\""
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1010
+#: portato/gui/templates/portato.glade:963
 msgid "Remove the selected package from the queue"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1011
+#: portato/gui/templates/portato.glade:964
 msgid "_Remove"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1033
+#: portato/gui/templates/portato.glade:1007
 msgid "_Queue"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1059
+#: portato/gui/templates/portato.glade:1033
 msgid "_Console"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1094
+#: portato/gui/templates/portato.glade:1068
 msgid "L_og"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1129
+#: portato/gui/templates/portato.glade:1103
 msgid "Portato - A Portage GUI"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1146
+#: portato/gui/templates/portato.glade:1120
 msgid "Search Results"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1186
-#: portato/gui/templates/portato.glade:1781
-#: portato/gui/templates/portato.glade:1889
+#: portato/gui/templates/portato.glade:1160
+#: portato/gui/templates/portato.glade:1903
+#: portato/gui/templates/portato.glade:2011
 msgid "gtk-cancel"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1198
+#: portato/gui/templates/portato.glade:1172
 msgid "gtk-jump-to"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1213
+#: portato/gui/templates/portato.glade:1187
 msgid "gtk-ok"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1234
+#: portato/gui/templates/portato.glade:1208
 msgid "Preferences"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1269
+#: portato/gui/templates/portato.glade:1243
 msgid "Debug"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1282
+#: portato/gui/templates/portato.glade:1256
 msgid "Browser command: "
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1308
+#: portato/gui/templates/portato.glade:1282
+#: portato/gui/templates/portato.glade:1709
 msgid "<b>General Options</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1358
+#: portato/gui/templates/portato.glade:1332
 msgid "<b>Update World Options</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1386
+#: portato/gui/templates/portato.glade:1360
 msgid "Sync command: "
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1407
+#: portato/gui/templates/portato.glade:1381
 msgid "<b>Sync Options</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1458
-msgid "File name to use, if package.use is a directory: "
+#: portato/gui/templates/portato.glade:1422
+msgid "<u><i>Masking Keywords</i></u>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1469
-msgid "Add only exact version to package.use"
+#: portato/gui/templates/portato.glade:1437
+msgid "<u><i>Testing Keywords</i></u>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1482
-msgid "Add only exact version to package.keywords"
+#: portato/gui/templates/portato.glade:1452
+msgid "<u><i>Use-Flags</i></u>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1496
-msgid "File name to use, if package.keywords is a directory: "
-msgstr ""
-
-#: portato/gui/templates/portato.glade:1530
-msgid "File name to use, if package.mask/package.unmask is a directory: "
-msgstr ""
-
-#: portato/gui/templates/portato.glade:1541
-msgid "Add only exact version to package.mask/package.unmask"
-msgstr ""
-
-#: portato/gui/templates/portato.glade:1563
+#: portato/gui/templates/portato.glade:1474
 msgid ""
 "<u>You may use the following placeholders:</u>\n"
 "\n"
@@ -307,86 +300,114 @@
 "<i>$(cat-1)/$(cat-2)</i>: first/second part of the category"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1589
-msgid "<u><i>Use-Flags</i></u>"
+#: portato/gui/templates/portato.glade:1498
+msgid "Add only exact version to package.mask/package.unmask"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1604
-msgid "<u><i>Testing Keywords</i></u>"
+#: portato/gui/templates/portato.glade:1512
+msgid "File name to use, if package.mask/package.unmask is a directory: "
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1619
-msgid "<u><i>Masking Keywords</i></u>"
+#: portato/gui/templates/portato.glade:1546
+msgid "File name to use, if package.keywords is a directory: "
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1636
+#: portato/gui/templates/portato.glade:1557
+msgid "Add only exact version to package.keywords"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1570
+msgid "Add only exact version to package.use"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1584
+msgid "File name to use, if package.use is a directory: "
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1610
 msgid "<b>Use Flag and Keyword Options</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1654
+#: portato/gui/templates/portato.glade:1628
 msgid "General"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1677
-msgid "Show emerge progress in title - similar to the console tab"
+#: portato/gui/templates/portato.glade:1665
+msgid "Enable systray"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1693
-msgid "Enable systray"
+#: portato/gui/templates/portato.glade:1678
+msgid "Show emerge progress in title - similar to the console tab"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1707
+#: portato/gui/templates/portato.glade:1692
 msgid "Hide on minimization (only if systray is enabled)"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1726
+#: portato/gui/templates/portato.glade:1743
 msgid "Console Font"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1736
+#: portato/gui/templates/portato.glade:1753
 msgid "Chose a console font"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1763
+#: portato/gui/templates/portato.glade:1770
+msgid "<b>Console Options</b>"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1810
+msgid "Package Tabs"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1835
+msgid "System Tabs"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1861
+msgid "<b>Tab Options</b>"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1885
 msgid "Visual"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1790
-#: portato/gui/templates/portato.glade:1901
+#: portato/gui/templates/portato.glade:1912
+#: portato/gui/templates/portato.glade:2023
 msgid "gtk-apply"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1850
+#: portato/gui/templates/portato.glade:1972
 msgid "Plugins"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1922
+#: portato/gui/templates/portato.glade:2044
 msgid "About Portato"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1931
+#: portato/gui/templates/portato.glade:2053
 msgid ""
 "This software is licensed under the terms of the GPLv2.\n"
 "Copyright (C) 2006-2007 René 'Necoro' Neumann <necoro@necoro.net>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1933
+#: portato/gui/templates/portato.glade:2055
 msgid "A Portage GUI"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:2023
+#: portato/gui/templates/portato.glade:2145
 msgid "Updateble Packages"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:2065
+#: portato/gui/templates/portato.glade:2187
 msgid "_Close"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:2077
+#: portato/gui/templates/portato.glade:2199
 msgid "Select _All"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:2092
+#: portato/gui/templates/portato.glade:2214
 msgid "_Install Selected"
 msgstr ""
 
@@ -471,7 +492,7 @@
 msgstr ""
 
 #: portato/gui/gtk/windows.py:61 portato/gui/gtk/windows.py:149
-#: portato/gui/gtk/windows.py:574
+#: portato/gui/gtk/windows.py:609
 msgid "Enabled"
 msgstr ""
 
@@ -499,137 +520,150 @@
 msgid "Results"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:496
+#: portato/gui/gtk/windows.py:372
+msgid "Top"
+msgstr ""
+
+#: portato/gui/gtk/windows.py:372
+msgid "Bottom"
+msgstr ""
+
+#: portato/gui/gtk/windows.py:372
+msgid "Left"
+msgstr ""
+
+#: portato/gui/gtk/windows.py:372
+msgid "Right"
+msgstr ""
+
+#: portato/gui/gtk/windows.py:531
 msgid "<no description>"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:519
+#: portato/gui/gtk/windows.py:554
 msgid "The first homepage part does not start with 'http' or 'ftp'."
 msgstr ""
 
-#: portato/gui/gtk/windows.py:523
+#: portato/gui/gtk/windows.py:558
 msgid "Blank inside homepage."
 msgstr ""
 
-#: portato/gui/gtk/windows.py:552
+#: portato/gui/gtk/windows.py:587
 msgid "This is an expanded use flag and cannot be selected"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:576
+#: portato/gui/gtk/windows.py:611
 msgid "Flag"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:577
+#: portato/gui/gtk/windows.py:612
 msgid "Description"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:655
+#: portato/gui/gtk/windows.py:690
 #, python-format
 msgid "Package could not be found: %s"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:712 portato/gui/gtk/windows.py:813
+#: portato/gui/gtk/windows.py:747 portato/gui/gtk/windows.py:854
 msgid "Masked by user"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:888
+#: portato/gui/gtk/windows.py:929
 msgid "Loading Config"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:900
+#: portato/gui/gtk/windows.py:941
 msgid "Creating Database"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:905
+#: portato/gui/gtk/windows.py:946
 msgid "Loading Plugins"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:918
+#: portato/gui/gtk/windows.py:959
 msgid "Building frontend"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:970
+#: portato/gui/gtk/windows.py:1011
 msgid "Restoring Session"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:973
+#: portato/gui/gtk/windows.py:1014
 msgid "Finishing startup"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1025
+#: portato/gui/gtk/windows.py:1067
 msgid "Options"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1035
+#: portato/gui/gtk/windows.py:1077
 msgid "Categories"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1062
+#: portato/gui/gtk/windows.py:1104
 msgid "Packages"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1184
+#: portato/gui/gtk/windows.py:1233
 #, python-format
 msgid "Console (%(title)s)"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1300
+#: portato/gui/gtk/windows.py:1347
 msgid "use flags"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1307
+#: portato/gui/gtk/windows.py:1354
 msgid "masking keywords"
 msgstr ""
 
-#: portato/gui/gtk/views.py:70
-msgid "Package is not installed"
-msgstr ""
-
-#: portato/gui/gtk/views.py:87
-#, python-format
-msgid "No %(old)s language file installed. Falling back to %(new)s."
-msgstr ""
-
-#: portato/gui/gtk/views.py:92
-#, python-format
-msgid "No %(old)s language file installed. Disable highlighting."
-msgstr ""
-
-#: portato/gui/gtk/views.py:111
-#, python-format
-msgid "Error: %s"
-msgstr ""
-
 #: portato/gui/gtk/__init__.py:23
 msgid "Loading Portage"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:39
+#: portato/gui/gtk/wrapper.py:40
 msgid "oneshot"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:44
+#: portato/gui/gtk/wrapper.py:45
 #, python-format
 msgid "updating from version %s"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:46
+#: portato/gui/gtk/wrapper.py:47
 msgid "updating"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:51
+#: portato/gui/gtk/wrapper.py:52
 #, python-format
 msgid "downgrading from version %s"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:53
+#: portato/gui/gtk/wrapper.py:54
 msgid "downgrading"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:57
+#: portato/gui/gtk/wrapper.py:58
 msgid "IUSE changes:"
 msgstr ""
 
+#: portato/gui/gtk/wrapper.py:66
+msgid "(In Progress)"
+msgstr ""
+
+#: portato/gui/gtk/wrapper.py:70
+msgid "Install"
+msgstr ""
+
+#: portato/gui/gtk/wrapper.py:75
+msgid "Uninstall"
+msgstr ""
+
+#: portato/gui/gtk/wrapper.py:81
+msgid "Update"
+msgstr ""
+
 #: portato/gui/gtk/dialogs.py:17
 msgid ""
 "There are some packages in the emerge queue and/or an emerge process is "
@@ -671,6 +705,12 @@
 msgstr ""
 
 #: portato/gui/gtk/dialogs.py:72
+msgid ""
+"This is the updates queue. You cannot remove single elements.\n"
+"Do you want to clear the whole queue instead?"
+msgstr ""
+
+#: portato/gui/gtk/dialogs.py:78
 msgid "Do you really want to clear the whole queue?"
 msgstr ""
 
@@ -712,6 +752,25 @@
 "%s"
 msgstr ""
 
+#: portato/gui/gtk/views.py:70
+msgid "Package is not installed"
+msgstr ""
+
+#: portato/gui/gtk/views.py:87
+#, python-format
+msgid "No %(old)s language file installed. Falling back to %(new)s."
+msgstr ""
+
+#: portato/gui/gtk/views.py:92
+#, python-format
+msgid "No %(old)s language file installed. Disable highlighting."
+msgstr ""
+
+#: portato/gui/gtk/views.py:111
+#, python-format
+msgid "Error: %s"
+msgstr ""
+
 #: portato/gui/gui_helper.py:125
 msgid "ALL"
 msgstr ""
=== portato.py
==================================================================
--- portato.py	(revision 636)
+++ portato.py	(patch 0.8.9.1 level 1)
@@ -102,7 +102,7 @@
 		try:
 			import shm_wrapper as shm
 		except ImportError:
-			from portato.shm import shm_wrapper as shm
+			from portato._shm import shm_wrapper as shm
 
 		mem = shm.create_memory(1024, permissions=0600)
 		sig = shm.create_semaphore(InitialValue = 0, permissions = 0600)
=== doc/TODO
==================================================================
--- doc/TODO	(revision 636)
+++ doc/TODO	(patch 0.8.9.1 level 1)
@@ -16,6 +16,7 @@
 - save/restore queue on exit/start
 - only remove already merged packages from queue
 - make sure, a package being removed from the queue is not needed as a dependency by another package
+- binary package support
 
 - "nach hause telefonieren" :)
 
@@ -38,7 +39,9 @@
 - show dependencies
 - reload package table when emerge is finished
 - dependency tree out of the installed packages
+- better display for search results
 
+
 Qt (stopped):
 ---
 - better terminal
=== doc/Changelog
==================================================================
--- doc/Changelog	(revision 636)
+++ doc/Changelog	(patch 0.8.9.1 level 1)
@@ -7,7 +7,7 @@
 - handle new "use defaults" correctly
 - allowed the permanent change of a plugin status
 - added "ALL" category
-- new design
+- new design and handling
 
 0.8.6.2:
 - changed the pipe version and use shm instead (fixes issues with kdesu)
=== _shm/__init__.py
==================================================================
=== _shm/shm_wrapper.py
==================================================================
--- _shm/shm_wrapper.py	(revision 636)
+++ _shm/shm_wrapper.py	(patch 0.8.9.1 level 1)
@@ -0,0 +1,301 @@
+# shm_wrapper - A wrapper for the shm module which provides access
+# to System V shared memory and semaphores on *nix systems.
+#
+# Copyright (c) 2007 by Philip Semanchuk
+# Contact info at http://NikitaTheSpider.com/
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+
+# Python modules
+import random
+import sys
+
+# Third party modules
+import shm
+
+r"""shm_wrapper - A wrapper for the shm module which provides access
+to System V shared memory and semaphores on *nix systems.
+
+The module shm is a Python wrapper around system functions like shmget. This
+module in turn offers higher-level, more Pythonic access to shared memory and
+semaphores.
+
+Full documentation is online at http://NikitaTheSpider.com/python/shm/
+
+"""
+
+def create_memory(size, permissions = 0666, InitCharacter = ' '):
+    """ Creates a new shared memory segment. One can destroy it either by calling the
+    module-level method remove_memory() or by calling the .remove() method of a handle to
+    said memory.
+    """
+    memory = None
+
+    # I create the memory using a randomly-generated key. I keep trying until I find one
+    # that works or until I hit an error.
+    while not memory:
+        key = random.randint(1, sys.maxint - 1)
+        try:
+            memory = shm.create_memory(key, size, permissions)
+        except shm.error, ExtraData:
+            if shm.memory_haskey(key):
+                # Oops, bad luck, the key exists. I'll try another. I can't call
+                # memory_haskey() before calling create_memory() because that would create
+                # a race condition where I could verify a key is not used but then another
+                # process could call create_memory() with that key before I got a chance to
+                # do so.
+                pass
+            else:
+                # Uh-oh, something fundamental is wrong.
+                raise shm.error, ExtraData
+
+    # Here I implicitly discard the memory handle object returned to me by shm and instead
+    # return my own handle to the shared memory segment.
+    memory = SharedMemoryHandle(key)
+
+    memory.write(InitCharacter[0] * memory.size)
+
+    return memory
+
+
+def remove_memory(key):
+    # Destroys the shared memory segment. Raises KeyError if the key doesn't exist.
+    shm.remove_memory(shm.getshmid(key))
+
+
+class SharedMemoryHandle(object):
+    def __init__(self, key):
+        self._MemoryHandle = None
+
+        # getshmid will raise a KeyError if there's no memory segment with this key.
+        shmid = shm.getshmid(key)
+        self._MemoryHandle = shm.memory(shmid)
+
+
+    def __del__(self):
+        if self._MemoryHandle:
+            # This will raise an error if the memory has been destroyed.
+            try:
+                if self._MemoryHandle.attached:
+                    self._MemoryHandle.detach()
+            except shm.error:
+                pass
+
+
+    def remove(self):
+        if self._MemoryHandle:
+            if self._MemoryHandle.attached:
+                self._MemoryHandle.detach()
+
+            shm.remove_memory(self._MemoryHandle.shmid)
+            self._MemoryHandle = None
+
+
+    def read(self, NumberOfBytes = 0, offset = 0):
+        if not self._MemoryHandle.attached:
+            self._MemoryHandle.attach()
+
+        if not NumberOfBytes:
+            NumberOfBytes = self._MemoryHandle.size - offset
+
+        return self._MemoryHandle.read(NumberOfBytes, offset)
+
+
+    def write(self, s, offset = 0):
+        if not self._MemoryHandle.attached:
+            self._MemoryHandle.attach()
+
+        self._MemoryHandle.write(s, offset)
+
+
+    # Properties start here ================================================================
+
+    # key
+    def __get_key(self): return self._MemoryHandle.key
+    def __set_key(self, foo): raise AttributeError
+    key = property(__get_key, __set_key)
+
+    # size of segment
+    def __get_size(self): return self._MemoryHandle.size
+    def __set_size(self, foo): raise AttributeError
+    size = property(__get_size, __set_size)
+
+    # permissions
+    def __get_permissions(self): return self._MemoryHandle.perm
+    def __set_permissions(self, permissions): self._MemoryHandle.setperm(permissions)
+    permissions = property(__get_permissions, __set_permissions)
+
+    # The number of processes currently attached to this memory segment.
+    def __get_number_attached(self): return self._MemoryHandle.nattch
+    def __set_number_attached(self, foo): raise AttributeError
+    number_attached = property(__get_number_attached, __set_number_attached)
+
+    # segment's uid
+    def __get_uid(self): return self._MemoryHandle.uid
+    def __set_uid(self, uid): self._MemoryHandle.setuid(uid)
+    uid = property(__get_uid, __set_uid)
+
+    # segment's gid
+    def __get_gid(self): return self._MemoryHandle.gid
+    def __set_gid(self, gid): self._MemoryHandle.setgid(gid)
+    gid = property(__get_gid, __set_gid)
+
+    # Creator uid (read-only)
+    def __get_creator_uid(self): return self._MemoryHandle.cuid
+    def __set_creator_uid(self, foo): raise AttributeError
+    creator_uid = property(__get_creator_uid, __set_creator_uid)
+
+    # Creator gid (read-only)
+    def __get_creator_gid(self): return self._MemoryHandle.cgid
+    def __set_creator_gid(self, foo): raise AttributeError
+    creator_gid = property(__get_creator_gid, __set_creator_gid)
+
+    # Creator pid (read-only)
+    def __get_creator_pid(self): return self._MemoryHandle.cpid
+    def __set_creator_pid(self, foo): raise AttributeError
+    creator_pid = property(__get_creator_pid, __set_creator_pid)
+
+    # pid of last process to operate on this segment (read-only)
+    def __get_last_pid(self): return self._MemoryHandle.lpid
+    def __set_last_pid(self, foo): raise AttributeError
+    last_pid = property(__get_last_pid, __set_last_pid)
+
+
+
+def create_semaphore(InitialValue = 1, permissions = 0666):
+    """ Creates a new semaphore. One can destroy it either by calling the
+    module-level method remove_semaphore() or by calling the .remove() method of a
+    handle to said semaphore.
+    """
+    semaphore = None
+
+    # I create the semaphore using a randomly-generated key. I keep trying until I find one
+    # that works or until I hit an error.
+    while not semaphore:
+        key = random.randint(1, sys.maxint - 1)
+        try:
+            semaphore = shm.create_semaphore(key, InitialValue, permissions)
+        except shm.error, ExtraData:
+            if shm.semaphore_haskey(key):
+                # Oops, bad luck, the key exists. I'll try another. I can't call
+                # memory_haskey() before calling create_semaphore() because that would create
+                # a race condition where I could verify a key is not used but then another
+                # process could call create_semaphore() with that key before I got a chance to
+                # do so.
+                pass
+            else:
+                # Uh-oh, something fundamental is wrong.
+                raise ExtraData
+
+    # Here I implicitly discard the semaphore object returned to me by shm and instead
+    # return my own handle to the semaphore.
+    return SemaphoreHandle(key)
+
+
+def remove_semaphore(key):
+    # Destroys the semaphore. Raises KeyError if the key doesn't exist.
+    shm.remove_semaphore(shm.getsemid(key))
+
+
+class SemaphoreHandle(object):
+    def __init__(self, key):
+        # getsemid will raise a KeyError if appropriate.
+        self._SemaphoreHandle = shm.semaphore(shm.getsemid(key))
+
+
+    def remove(self):
+        shm.remove_semaphore(self._SemaphoreHandle.semid)
+        self._SemaphoreHandle = None
+
+
+    def P(self):
+        # P = prolaag = probeer te verlagen (try to decrease)
+        self._SemaphoreHandle.P()
+
+
+    def V(self):
+        # V = verhoog (increase)
+        self._SemaphoreHandle.V()
+
+
+    def Z(self):
+        # Z = block until Zee semaphore is Zero
+        self._SemaphoreHandle.Z()
+
+
+    # Properties start here ================================================================
+    def __get_key(self): return self._SemaphoreHandle.key
+    def __set_key(self, foo): raise AttributeError
+    key = property(__get_key, __set_key)
+
+
+    def __get_value(self): return self._SemaphoreHandle.val
+    def __set_value(self, value): self._semaphore.setval(value)
+    value = property(__get_value, __set_value)
+
+
+    def __get_WaitingForZero(self): return self._SemaphoreHandle.zcnt
+    def __set_WaitingForZero(self, foo): raise AttributeError
+    WaitingForZero = property(__get_WaitingForZero, __set_WaitingForZero)
+
+
+    def __get_WaitingForNonZero(self): return self._SemaphoreHandle.ncnt
+    def __set_WaitingForNonZero(self, foo): raise AttributeError
+    WaitingForNonZero = property(__get_WaitingForNonZero, __set_WaitingForNonZero)
+
+
+    def __get_blocking(self): return self._SemaphoreHandle.blocking
+    def __set_blocking(self, block): self._SemaphoreHandle.setblocking(block)
+    blocking = property(__get_blocking, __set_blocking)
+
+
+    def __get_undo(self): raise AttributeError
+    def __set_undo(self, undo): self._SemaphoreHandle.setundo(undo)
+    undo = property(__get_undo, __set_undo)
+
+
+    # segment's uid
+    def __get_uid(self): return self._SemaphoreHandle.uid
+    def __set_uid(self, uid): self._SemaphoreHandle.setuid(uid)
+    uid = property(__get_uid, __set_uid)
+
+
+    # segment's gid
+    def __get_gid(self): return self._SemaphoreHandle.gid
+    def __set_gid(self, gid): self._SemaphoreHandle.setgid(gid)
+    gid = property(__get_gid, __set_gid)
+
+
+    # Creator uid (read-only)
+    def __get_creator_uid(self): return self._SemaphoreHandle.cuid
+    def __set_creator_uid(self, foo): raise AttributeError
+    creator_uid = property(__get_creator_uid, __set_creator_uid)
+
+
+    # Creator gid (read-only)
+    def __get_creator_gid(self): return self._SemaphoreHandle.cgid
+    def __set_creator_gid(self, foo): raise AttributeError
+    creator_gid = property(__get_creator_gid, __set_creator_gid)
+
+
+    # Creator pid -- since semaphores have a lot of the same properties as memory
+    # objects, one would expect creator PID to be exposed here, but it isn't
+    # made available by the system (true AFAICT for BSDs, OS X and Solaris).
+
+
+    # pid of last process to operate on this segment (read-only)
+    def __get_last_pid(self): return self._SemaphoreHandle.lpid
+    def __set_last_pid(self, foo): raise AttributeError
+    last_pid = property(__get_last_pid, __set_last_pid)
=== _shm/shmmodule.c
==================================================================
--- _shm/shmmodule.c	(revision 636)
+++ _shm/shmmodule.c	(patch 0.8.9.1 level 1)
@@ -0,0 +1,1396 @@
+/****************************************************************************
+ *
+ * shmmodule.c Copyright 1997, 1998 by INRIA. All rights reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY WARRANTIES, EXPRESS OR IMPLIED,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ *
+ * IN NO EVENT SHALL THE INRIA OR THE AUTHORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES,
+ * INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
+ * LOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION, HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT,
+ * INCLUDING NEGLIGENCE OR OTHERWISE, ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ ***************************************************************************/
+
+/* Python Shared Memory module 
+   Written by Vladimir Marangozov  
+   Adopted by Philip Semanchuk 
+
+  This module provides an interface to System V shared memory IPC.
+
+  Version history:
+  - 1.0 (sometime in the 1990s) - Released by Mr. Marangozov
+  - 1.1 (Feb 2007) - Released by me, Philip Semanchuk. Fixes a few bugs (including some 
+        memory leaks) and adds the ability to read the blocking flag on semaphores.
+  - 1.1.1 (Mar 2007)- Updated setup.py to handle compile options for Linux users.
+  - 1.1.2 (Nov 2007) - Fixed a sprintf() format in repr to handle size_t.
+  - 1.1.3 (Nov 2007) - Changed #define of key to _key instead of __key for OS X Leopard.
+        Thanks to Bill Hart.
+  - 1.1.4 (Jan 2008) - Changed the reference to key in the ipc_perm structure to the 
+        explicit #define IPC_PERM_KEY_NAME. 
+
+  See http://NikitaTheSpider.com/python/shm/ for more thorough documentation, a more Pythonic 
+  wrapper, updates, contact info, setup.py, etc.
+
+
+  Module interface:
+
+  - shm.create_memory(int Key, int Size [,int Perm=0666]) --> object
+  - shm.create_semaphore(int Key [,int Value=1 [,int Perm=0666]]) --> object
+  - shm.error
+  - shm.ftok(string Path, int ProjId) --> int
+  - shm.getsemid(int Key) --> int
+  - shm.getshmid(int Key) --> int
+  - shm.memory(int Shmid) --> object
+  - shm.memory_haskey(int Key) --> int
+  - shm.remove_memory(int Shmid) --> None
+  - shm.remove_semaphore(int Semid) --> None
+  - shm.semaphore(int Semid) --> object
+  - shm.semaphore_haskey(int Key) --> int
+
+  Memory Objects:
+
+  + Members:
+
+    - m.addr	- attachment address in the process address space
+    - m.attached	- 0|1
+    - m.cgid	- gid of creator
+    - m.cpid	- pid of creator
+    - m.cuid	- uid of creator
+    - m.gid		- gid of owner
+    - m.key		- segment key or IPC_PRIVATE (=0)
+    - m.lpid	- pid of last shmop
+    - m.nattch	- current # of attached processes
+    - m.perm	- operation permission
+    - m.shmid	- shared memory segment id
+    - m.size	- segment size
+    - m.uid		- uid of owner
+
+  + Methods:
+
+    - m.attach([int Addr=0 [,int How=0]]) --> None
+    - m.detach() --> None
+    - m.read(int Nbytes [,int Offset=0]) --> string
+    - m.setgid(int Gid) --> None
+    - m.setperm(int Perm) --> None
+    - m.setuid(int Uid) --> None
+    - m.write(string Data [,int Offset=0]) --> None
+
+  Semaphore Objects:
+
+  + Members:
+
+    - s.cgid        - gid of creator
+    - s.cuid        - uid of creator
+    - s.gid         - gid of owner
+    - s.key         - semaphore key or IPC_PRIVATE (=0)
+    - s.lpid        - pid of last semop
+    - s.ncnt        - current # of processes waiting for s.val > 0
+    - s.perm        - operation permission
+    - s.semid       - semaphore id
+    - s.uid         - uid of owner
+    - s.val         - value of the semaphore counter
+    - s.zcnt        - current # of processes waiting for s.val == 0
+    - s.blocking    - whether or not the semaphore is in blocking mode
+
+  + Methods:
+
+    - s.P() --> None		- blocks if s.val == 0; decrements s.val
+    - s.V() --> None		- increments s.val
+    - s.Z() --> None		- blocks until s.val == 0
+    - s.setblocking(0|1) --> None
+    - s.setgid(int Gid) --> None
+    - s.setperm(int Perm) --> None
+    - s.setuid(int Uid) --> None
+    - s.setundo(0|1) --> None
+    - s.setval(int Value) --> None
+
+*/
+
+/* ------------------------------------------------------------------------- */
+#include "Python.h"
+#include "structmember.h"
+
+/* v1.1 - added */
+#ifdef __FreeBSD__
+#include <machine/param.h>  /* for system definition of PAGE_SIZE */
+#endif
+
+#include <sys/types.h>
+#include <sys/ipc.h>		/* for system's IPC_xxx definitions */
+#include <sys/shm.h>		/* for shmget, shmat, shmdt, shmctl */
+#include <sys/sem.h>		/* for semget, semctl, semop */
+
+/* v1.1.4 - The name of this member varies and is sniffed out by setup.py. */
+#if defined(ZERO_UNDERSCORE_KEY)
+#define IPC_PERM_KEY_NAME   key
+#elif defined(ONE_UNDERSCORE_KEY)
+#define IPC_PERM_KEY_NAME  _key
+#elif defined(TWO_UNDERSCORE_KEY)
+#define IPC_PERM_KEY_NAME __key
+#endif
+
+/*
+-- Exception type for errors detected by this module.
+*/
+
+static PyObject *PyShm_Error;
+
+/*
+-- Convenience function to raise an error according to errno.
+*/
+
+static PyObject *
+PyShm_Err(void)
+{
+    return PyErr_SetFromErrno(PyShm_Error);
+}
+
+/*
+-- The object holding a shared memory segment
+*/
+
+typedef struct {
+    PyObject_HEAD
+    int shmid;			/* shared memory id	*/
+    int mode;			/* attachment mode	*/
+    void *addr;			/* shmseg start address	*/
+    struct shmid_ds ds;		/* data structure	*/
+} PyShmMemoryObject;
+
+staticforward PyTypeObject	PyShmMemory_Type;
+
+#define PyShmObj		PyShmMemoryObject
+#define PyShmMemory_Check(op)	((op)->ob_type == &PyShmMemory_Type)
+
+/*
+-- The object holding a semaphore
+*/
+
+typedef struct {
+    PyObject_HEAD
+    int semid;			/* semaphore id		*/
+    short opflag;		/* IPC_NOWAIT, SEM_UNDO	*/
+    struct semid_ds ds;		/* data structure	*/
+} PyShmSemaphoreObject;
+
+#ifndef HAVE_UNION_SEMUN
+union semun {
+    int val;                    /* used for SETVAL only */
+    struct semid_ds *buf;       /* for IPC_STAT and IPC_SET */
+    unsigned short *array;      /* used for GETALL and SETALL */
+};
+#endif
+
+typedef union semun semctl_arg;
+
+staticforward PyTypeObject	PyShmSemaphore_Type;
+
+#define PyShmSemObj		PyShmSemaphoreObject
+#define PyShmSemaphore_Check(op) ((op)->ob_type == &PyShmSemaphore_Type)
+
+/*
+-- Internal dictionaries for Python memory and semaphore objects
+*/
+
+static PyObject *shm_dict = NULL;
+static PyObject *sem_dict = NULL;
+
+/************************************************************/
+/*                       Memory Objects                     */
+/************************************************************/
+
+/* This is to check the validity of a Python memory object
+   (and to refresh its data status structure). Notably, we
+   have to check that the real memory segment it points to
+   is still in memory and hasn't changed (test its id and
+   size). It could be that the segment has been removed and
+   created again by someone else with the same key. This is
+   fine as far as the segment (1) has the same id and size,
+   and (2) is accessible via shmctl. If you have a better
+   test, you're welcome :-) */
+
+static int
+check_memory_identity(PyShmObj *o)
+{
+    int new_shmid;
+    int old_shmid = o->shmid;
+    int old_size = o->ds.shm_segsz;
+    key_t old_key = o->ds.shm_perm.IPC_PERM_KEY_NAME;
+
+    /*
+    -- 1. Try to get the segment identified by the old key (if not IPC_PRIVATE)
+    -- 2. On failure or on mismatch of the new and the old id -> fail.
+    -- 3. Try to refresh the object's status using the new id.
+    -- 4. On failure (the segment cannot be accessed) -> fail.
+    -- 5. Finaly, compare the old size and the one we got via the new id.
+    */
+    if (old_key != IPC_PRIVATE) {
+        new_shmid = shmget(old_key, 0, 0);
+        if (new_shmid != old_shmid)
+            return 0;
+    }
+    else
+        new_shmid = old_shmid;
+    if ((shmctl(new_shmid, IPC_STAT, &(o->ds)) != -1) &&
+        (old_size == o->ds.shm_segsz) &&
+	    (old_key == o->ds.shm_perm.IPC_PERM_KEY_NAME))
+        return 1;
+    return 0;
+}
+
+/* Convenience macro for updating the shared memory data status structure */
+
+#define refresh_memory_status(o)					\
+    if (!check_memory_identity(o)) {					\
+	   PyErr_SetString(PyShm_Error, "can't access shared memory segment");		\
+	   return NULL;							\
+    }
+
+/*
+-- attach([,address=0 [,how=0]])
+*/
+
+/* Attach the shared memory segment to the process address space */
+
+static PyObject *
+PyShmMemory_attach(PyShmObj *self, PyObject *args)
+{
+    unsigned long address = 0;
+    int mode = 0;
+    void *addr, *old_addr;
+
+    if (!PyArg_ParseTuple(args, "|li", &address, &mode))
+	   return NULL;
+    refresh_memory_status(self);
+    /* return if already attached with the same mode to the same address */
+    if ((self->addr != NULL) && (self->mode == mode) &&
+        ((address == 0) || (self->addr == (void *)address))) {
+    	Py_INCREF(Py_None);
+    	return Py_None;
+    }
+    /* perform the attach */
+    addr = (void *)shmat(self->shmid, (void *)address, mode);
+    if (addr  == (void *)-1)
+	   return PyShm_Err();
+    old_addr = self->addr;
+    self->addr = addr;
+    self->mode = mode;
+    /* XXX - multiple attachments of the same shared memory segment
+             to different locations of the process address space is
+	     not supported. */
+    shmdt(old_addr);
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- detach()
+*/
+
+/* Detach the memory object from the process address space */
+
+static PyObject *
+PyShmMemory_detach(PyShmObj *self, PyObject *args)
+{
+    if (!PyArg_NoArgs(args))
+	   return NULL;
+    if (self->addr != NULL) {
+        refresh_memory_status(self);
+        if (shmdt(self->addr) != 0)
+            return PyShm_Err();
+        self->addr = NULL;		/* mark as detached */
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- read(int Nbytes [,int Offset=0]) --> string
+*/
+
+/* Return a string of n bytes peeked from the shared memory segment */
+
+static PyObject *
+PyShmMemory_read(PyShmObj *self, PyObject *args)
+{
+    unsigned long n, offset = 0;
+    char buf[128];
+    char *addr;
+
+    if (!PyArg_ParseTuple(args, "l|l", &n, &offset))
+	    return NULL;
+    refresh_memory_status(self);
+    if (self->addr == NULL) {
+        PyErr_SetString(PyShm_Error, "R/W operation on detached memory");
+        return NULL;
+    }
+    if ((unsigned long)self->ds.shm_segsz < (n + offset)) {
+        sprintf(buf, "read() argument%s exceed%s upper memory limit",
+            offset ? "s" : "", offset ? "" : "s");
+        PyErr_SetString(PyShm_Error, buf);
+        return NULL;
+    }
+    addr = (char *)((unsigned long)self->addr + offset);
+    return PyString_FromStringAndSize(addr, n);
+}
+
+/*
+-- setgid(int Gid)
+*/
+
+static PyObject *
+PyShmMemory_setgid(PyShmObj *self, PyObject *args)
+{
+    long newgid, oldgid;
+
+    if (!PyArg_ParseTuple(args, "l", &newgid))
+	    return NULL;
+    refresh_memory_status(self);
+    oldgid = (long)self->ds.shm_perm.gid;
+    self->ds.shm_perm.gid = (gid_t)newgid;
+    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
+        self->ds.shm_perm.gid = (gid_t)oldgid;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setperm(int Perm)
+*/
+
+static PyObject *
+PyShmMemory_setperm(PyShmObj *self, PyObject *args)
+{
+    long newmode, oldmode;
+
+    if (!PyArg_ParseTuple(args, "l", &newmode))
+        return NULL;
+    refresh_memory_status(self);
+    newmode &= 0777;	/* permission bits only */
+    oldmode = (mode_t)self->ds.shm_perm.mode;
+    self->ds.shm_perm.mode ^= 0777;
+    self->ds.shm_perm.mode |= (mode_t)newmode;
+    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
+        self->ds.shm_perm.mode = (mode_t)oldmode;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setuid(int Uid)
+*/
+
+static PyObject *
+PyShmMemory_setuid(PyShmObj *self, PyObject *args)
+{
+    long newuid, olduid;
+
+    if (!PyArg_ParseTuple(args, "l", &newuid))
+        return NULL;
+    refresh_memory_status(self);
+    olduid = (long)self->ds.shm_perm.uid;
+    /* v1.1 - fixed typo that set the group id rather than the user id */
+    self->ds.shm_perm.uid = (uid_t)newuid;
+    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
+        self->ds.shm_perm.uid = (uid_t)olduid;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- write(string Data [, int Offset=0])
+*/
+
+/* Write a string to the shared memory segment. */
+
+static PyObject *
+PyShmMemory_write(PyShmObj *self, PyObject *args)
+{
+    char *data;
+    unsigned long n, offset = 0;
+    char buf[128];
+    char *addr;
+
+    if (!PyArg_ParseTuple(args, "s#|l", &data, &n, &offset))
+        return NULL;
+    refresh_memory_status(self);
+    if (self->addr == NULL) {
+        PyErr_SetString(PyShm_Error, "R/W operation on detached memory");
+        return NULL;
+    }
+    if (self->mode & SHM_RDONLY) {
+        PyErr_SetString(PyShm_Error,
+                "can't write on read-only attached memory");
+        return NULL;
+    }
+    if ((unsigned long)self->ds.shm_segsz < (n + offset)) {
+        sprintf(buf, "write() argument%s exceed%s upper memory limit",
+            offset ? "s" : "", offset ? "" : "s");
+        PyErr_SetString(PyShm_Error, buf);
+        return NULL;
+    }
+    addr = (void *)((unsigned long)self->addr + offset);
+    memcpy(addr, data, n);
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/* List of methods for shared memory objects */
+
+static PyMethodDef memory_methods[] = {
+    {"attach",	(PyCFunction)PyShmMemory_attach,	1,
+     "attach([int Addr=0 [,int How=0]]) --> None | except shm.error"},
+    {"detach",	(PyCFunction)PyShmMemory_detach,	0,
+     "detach() --> None | except shm.error"},
+    {"read",	(PyCFunction)PyShmMemory_read,		1,
+     "read(int Nbytes [,int Offset=0]) --> string | except shm.error"},
+    {"setgid",	(PyCFunction)PyShmMemory_setgid,	1,
+     "setgid(int Gid) --> None | except shm.error"},
+    {"setperm",	(PyCFunction)PyShmMemory_setperm,	1,
+     "setperm(int Perm) --> None | except shm.error"},
+    {"setuid",	(PyCFunction)PyShmMemory_setuid,	1,
+     "setuid(int Uid) --> None | except shm.error"},
+    {"write",	(PyCFunction)PyShmMemory_write,		1,
+     "write(string Data [,int Offset=0]) --> None | except shm.error"},
+    {NULL,	NULL}		/* sentinel */
+};
+
+#define OFF(x)	offsetof(PyShmMemoryObject, x)
+#define OFF1(x)	OFF(ds) + offsetof(struct shmid_ds, x)
+#define OFF2(x)	OFF1(shm_perm) + offsetof(struct ipc_perm, x)
+
+/* List of members for shared memory objects */
+
+/* Note: member types are set in the initshm function.
+   Members which need separate processing are:
+   - addr --> it is not part of the shmid_ds structure
+   - attached --> function depending on addr
+   - nattch  --> system dependent declaration in shmid_ds (unknown type)
+   - perm --> return permission (lower 9) bits only of ds.shm_perm.mode
+*/
+
+static struct memberlist memory_memberlist[] = {
+    {"cgid",	T_INT,	OFF2(cgid),		RO},	/* 0  (gid_t)  */
+    {"cpid",	T_INT,	OFF1(shm_cpid),		RO},	/* 1  (pid_t)  */
+    {"cuid",	T_INT,	OFF2(cuid),		RO},	/* 2  (uid_t)  */
+    {"key", T_INT,	OFF2(IPC_PERM_KEY_NAME),		RO},	/* 3  (key_t)  */
+    {"lpid",	T_INT,	OFF1(shm_lpid),		RO},	/* 4  (pid_t)  */
+    {"shmid",	T_INT,	OFF(shmid),		RO},	/* 5  (int)    */
+    {"size",	T_INT,	OFF1(shm_segsz),	RO},	/* 6  (int)    */
+    {"gid",	T_INT,	OFF2(gid),		RO},	/* 7  (gid_t)  */
+    {"uid",	T_INT,	OFF2(uid),		RO},	/* 8  (uid_t)  */
+    /* The following members are implemented without this table */
+    {"addr",	T_INT,	0,			RO},	/* 9  (void *) */
+    {"attached",T_INT,	0,			RO},	/* 10  (int)    */
+    {"nattch",	T_INT,	0,			RO},	/* 11 sys.dep. */
+    {"perm",	T_INT,	0,			RO},	/* 12 (mode_t) */
+    {NULL}			/* sentinel */
+};
+
+#undef OFF
+#undef OFF1
+#undef OFF2
+
+static void
+PyShmMemory_dealloc(PyShmObj *self)
+{
+    /* del shm_dict[key], ignore if it fails */
+    if (PyDict_DelItem(shm_dict, PyInt_FromLong(self->shmid)) == -1)
+        PyErr_Clear();
+    /* all references in the current process to the shared
+       memory segment are lost, so if attached, detach it.
+       XXX: This is not true when Python is embedded.
+
+    if (self->addr != NULL) {
+	shmdt(self->addr);
+    }
+    */
+    /* v1.1 - changed the reference below from PyMem_DEL to PyObject_Del.    */
+    PyObject_Del(self);
+}
+
+static PyObject *
+PyShmMemory_getattr(PyShmObj *self, char *name)
+{
+    PyObject *res;
+
+    res = Py_FindMethod(memory_methods, (PyObject *)self, name);
+    if (res != NULL)
+        return res;
+    PyErr_Clear();
+    refresh_memory_status(self);
+    if (strcmp(name, "attached") == 0)
+        return PyInt_FromLong((self->addr == NULL) ? 0 : 1);
+    if (strcmp(name, "addr") == 0) {
+        if (self->addr != NULL)
+            return PyInt_FromLong((unsigned long)self->addr);
+        else {
+            Py_INCREF(Py_None);
+            return Py_None;
+        }
+    }
+    if (strcmp(name, "nattch") == 0)
+        return PyInt_FromLong(self->ds.shm_nattch);
+    if (strcmp(name, "perm") == 0)
+        return PyInt_FromLong(self->ds.shm_perm.mode & 0777);
+    return PyMember_Get((char *)self, memory_memberlist, name);
+}
+
+static PyObject *
+PyShmMemory_repr(PyShmObj *self, char *name)
+{
+    char buf[100];
+    char buf2[20];
+
+    refresh_memory_status(self);
+    if (self->addr == NULL)
+        sprintf(buf2, "None");
+    else
+        /* v 1.1 - changed format from %lx to %p. */
+        /* v 1.1.2 - changed %u to %zu. */
+        sprintf(buf2, "0x%p", self->addr);
+    sprintf(buf, "<%s shared memory object, id=%d, size=%zu, addr=%s>",
+	    (self->addr == NULL) ? "detached" : (self->mode & SHM_RDONLY) ?
+	    "attached RO" : "attached R/W",
+	    self->shmid,
+	    self->ds.shm_segsz,
+	    buf2);
+    return PyString_FromString(buf);
+}
+
+/* Type object for shared memory objects */
+
+static PyTypeObject PyShmMemory_Type = {
+    PyObject_HEAD_INIT(&PyType_Type)
+    0,					/*ob_size*/
+    "shared memory",			/*tp_name*/
+    sizeof(PyShmObj),			/*tp_size*/
+    0,					/*tp_itemsize*/
+    /* methods */
+    (destructor)PyShmMemory_dealloc,	/*tp_dealloc*/
+    0,					/*tp_print*/
+    (getattrfunc)PyShmMemory_getattr,	/*tp_getattr*/
+    0,					/*tp_setattr*/
+    0,					/*tp_compare*/
+    (reprfunc)PyShmMemory_repr,		/*tp_repr*/
+    0,					/*tp_as_number*/
+    0,					/*tp_as_sequence*/
+    0,					/*tp_as_mapping*/
+};
+
+/************************************************************/
+/*                     Semaphore Objects                    */
+/************************************************************/
+
+/* This is to check the validity of a Python semaphore object */
+
+static int
+check_semaphore_identity(PyShmSemObj *o)
+{
+    int new_semid;
+    int old_semid = o->semid;
+    unsigned short old_nsems = o->ds.sem_nsems;
+    key_t old_key = o->ds.sem_perm.IPC_PERM_KEY_NAME;
+    semctl_arg arg;
+
+    if (old_key != IPC_PRIVATE) {
+        new_semid = semget(old_key, 0, 0);
+        if (new_semid != old_semid)
+            return 0;
+    }
+    else
+        new_semid = old_semid;
+    arg.buf = &(o->ds);
+    if ((semctl(new_semid, 0, IPC_STAT, arg) != -1) &&
+        (old_nsems == o->ds.sem_nsems) &&
+        (old_key == o->ds.sem_perm.IPC_PERM_KEY_NAME))
+        return 1;
+    return 0;
+}
+
+/* Convenience macro for updating the semaphore data status structure */
+
+#define refresh_semaphore_status(o)					\
+    if (!check_semaphore_identity(o)) {					\
+        PyErr_SetString(PyShm_Error,					\
+                "can't access semaphore");			\
+	return NULL;							\
+    }
+
+/*
+-- P()
+*/
+
+static PyObject *
+PyShmSemaphore_P(PyShmSemObj *self, PyObject *args)
+{
+    struct sembuf op[1];
+    int res;
+
+    op[0].sem_num = 0;
+    op[0].sem_op = -1;
+    op[0].sem_flg = self->opflag;
+
+    if (!PyArg_NoArgs(args))
+        return NULL;
+    refresh_semaphore_status(self);
+    res = semop(self->semid, op, (size_t)1);
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- V()
+*/
+
+static PyObject *
+PyShmSemaphore_V(PyShmSemObj *self, PyObject *args)
+{
+    struct sembuf op[1];
+    int res;
+
+    op[0].sem_num = 0;
+    op[0].sem_op = 1;
+    op[0].sem_flg = self->opflag;
+
+    if (!PyArg_NoArgs(args))
+        return NULL;
+    refresh_semaphore_status(self);
+    res = semop(self->semid, op, (size_t)1);
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- Z()
+*/
+
+static PyObject *
+PyShmSemaphore_Z(PyShmSemObj *self, PyObject *args)
+{
+    struct sembuf op[1];
+    int res;
+
+    op[0].sem_num = 0;
+    op[0].sem_op = 0;
+    op[0].sem_flg = self->opflag;
+
+    if (!PyArg_NoArgs(args))
+        return NULL;
+    refresh_semaphore_status(self);
+    res = semop(self->semid, op, (size_t)1);
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setblocking(0|1)
+*/
+
+static PyObject *
+PyShmSemaphore_setblocking(PyShmSemObj *self, PyObject *args)
+{
+    int block;
+
+    if (!PyArg_ParseTuple(args, "i", &block))
+        return NULL;
+    refresh_semaphore_status(self);
+    if (block)
+        self->opflag &= ~IPC_NOWAIT;
+    else
+        self->opflag |= IPC_NOWAIT;
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setgid(int Gid)
+*/
+
+static PyObject *
+PyShmSemaphore_setgid(PyShmSemObj *self, PyObject *args)
+{
+    long newgid, oldgid;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "l", &newgid))
+        return NULL;
+    refresh_semaphore_status(self);
+    oldgid = (long)self->ds.sem_perm.gid;
+    self->ds.sem_perm.gid = (gid_t)newgid;
+    arg.buf = &(self->ds);
+    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
+        self->ds.sem_perm.gid = (gid_t)oldgid;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setperm(int Perm)
+*/
+
+static PyObject *
+PyShmSemaphore_setperm(PyShmSemObj *self, PyObject *args)
+{
+    long newmode, oldmode;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "l", &newmode))
+        return NULL;
+    refresh_semaphore_status(self);
+    newmode &= 0777;	/* permission bits only */
+    oldmode = (mode_t)self->ds.sem_perm.mode;
+    self->ds.sem_perm.mode ^= 0777;
+    self->ds.sem_perm.mode |= (mode_t)newmode;
+    arg.buf = &(self->ds);
+    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
+        self->ds.sem_perm.mode = (mode_t)oldmode;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setuid(int Uid)
+*/
+
+static PyObject *
+PyShmSemaphore_setuid(PyShmSemObj *self, PyObject *args)
+{
+    long newuid, olduid;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "l", &newuid))
+        return NULL;
+    refresh_semaphore_status(self);
+    olduid = (long)self->ds.sem_perm.uid;
+    /* v1.1 - fixed typo that set the group id rather than the user id */
+    self->ds.sem_perm.uid = (uid_t)newuid;
+    arg.buf = &(self->ds);
+    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
+        self->ds.sem_perm.uid = (uid_t)olduid;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setundo(0|1)
+*/
+
+static PyObject *
+PyShmSemaphore_setundo(PyShmSemObj *self, PyObject *args)
+{
+    int undo;
+
+    if (!PyArg_ParseTuple(args, "i", &undo))
+        return NULL;
+    refresh_semaphore_status(self);
+    if (undo)
+        self->opflag |= SEM_UNDO;
+    else
+        self->opflag &= ~SEM_UNDO;
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setval(int Value)
+*/
+
+static PyObject *
+PyShmSemaphore_setval(PyShmSemObj *self, PyObject *args)
+{
+    int value;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "i", &value))
+        return NULL;
+    refresh_semaphore_status(self);
+    arg.val = value;
+    if (semctl(self->semid, 0, SETVAL, arg) == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/* List of methods for semaphore objects */
+
+static PyMethodDef semaphore_methods[] = {
+    {"P",		(PyCFunction)PyShmSemaphore_P,			0,
+     "P() --> None | except shm.error"},
+    {"V",		(PyCFunction)PyShmSemaphore_V,			0,
+     "V() --> None | except shm.error"},
+    {"Z",		(PyCFunction)PyShmSemaphore_Z,			0,
+     "Z() --> None | except shm.error"},
+    {"setblocking",	(PyCFunction)PyShmSemaphore_setblocking,	1,
+     "setblocking(0|1) --> None"},
+    {"setgid",		(PyCFunction)PyShmSemaphore_setgid,		1,
+     "setgid(int Gid) --> None | except shm.error"},
+    {"setperm",		(PyCFunction)PyShmSemaphore_setperm,		1,
+     "setperm(int Perm) --> None | except shm.error"},
+    {"setuid",		(PyCFunction)PyShmSemaphore_setuid,		1,
+     "setuid(int Uid) --> None | except shm.error"},
+    {"setundo",		(PyCFunction)PyShmSemaphore_setundo,		1,
+     "setundo(0|1) --> None"},
+    {"setval",		(PyCFunction)PyShmSemaphore_setval,		1,
+     "setval(int Value) --> None | except shm.error"},
+    {NULL,	NULL}		/* sentinel */
+};
+
+#define OFF(x)	offsetof(PyShmSemaphoreObject, x)
+#define OFF1(x)	OFF(ds) + offsetof(struct semid_ds, x)
+#define OFF2(x)	OFF1(sem_perm) + offsetof(struct ipc_perm, x)
+
+/* List of members for semaphore objects */
+
+/* Note: member types are set in the initshm function.
+   Members which need separate processing are:
+   - val, lpid, ncnt, zcnt --> in kernel memory, not accessible from a process
+   - perm --> return permission (lower 9) bits only of ds.sem_perm.mode
+   - blocking --> in opflags
+*/
+
+static struct memberlist semaphore_memberlist[] = {
+    {"cgid",	T_INT,	OFF2(cgid),		RO},	/* 0  (gid_t)  */
+    {"cuid",	T_INT,	OFF2(cuid),		RO},	/* 1  (uid_t)  */
+    {"key",	    T_INT,	OFF2(IPC_PERM_KEY_NAME),		RO},	/* 2  (key_t)  */
+    {"semid",	T_INT,	OFF(semid),		RO},	/* 3  (int)    */
+    {"gid",	    T_INT,	OFF2(gid),		RO},	/* 4  (gid_t)  */
+    {"uid",	    T_INT,	OFF2(uid),		RO},	/* 5  (uid_t)  */
+    /* The following members are implemented without this table */
+    {"lpid",	T_INT,	0,			RO},	/* 6  (ushort) */
+    {"ncnt",	T_INT,	0,			RO},	/* 7  (ushort) */
+    {"perm",	T_INT,	0,			RO},	/* 8  (mode_t) */
+    {"val",	    T_INT,	0,			RO},	/* 9  (ushort) */
+    {"zcnt",	T_INT,	0,			RO},	/* 10 (ushort) */
+    {"blocking",T_INT,	0,			RO},	/* 11 (ushort) */
+    {NULL}			/* sentinel */
+};
+
+#undef OFF
+#undef OFF1
+#undef OFF2
+
+static void
+PyShmSemaphore_dealloc(PyShmSemObj *self)
+{
+    /* del sem_dict[key], ignore if it fails */
+    if (PyDict_DelItem(sem_dict, PyInt_FromLong(self->semid)) == -1)
+        PyErr_Clear();
+    /* v1.1 - changed the reference below from PyMem_DEL to PyObject_Del.    */
+    PyObject_Del(self);
+}
+
+static PyObject *
+PyShmSemaphore_getattr(PyShmSemObj *self, char *name)
+{
+    PyObject *res;
+
+    res = Py_FindMethod(semaphore_methods, (PyObject *)self, name);
+    if (res != NULL)
+        return res;
+    PyErr_Clear();
+    refresh_semaphore_status(self);
+    if (strcmp(name, "val") == 0)
+        return PyInt_FromLong(semctl(self->semid, 0, GETVAL, 0));
+    if (strcmp(name, "lpid") == 0)
+        return PyInt_FromLong(semctl(self->semid, 0, GETPID, 0));
+    if (strcmp(name, "ncnt") == 0)
+        return PyInt_FromLong(semctl(self->semid, 0, GETNCNT, 0));
+    if (strcmp(name, "zcnt") == 0)
+        return PyInt_FromLong(semctl(self->semid, 0, GETZCNT, 0));
+    if (strcmp(name, "perm") == 0)
+        return PyInt_FromLong(self->ds.sem_perm.mode & 0777);
+    /* v1.1 - added blocking */
+    if (strcmp(name, "blocking") == 0)
+        return PyInt_FromLong(self->opflag & IPC_NOWAIT ? 0 : 1);
+    return PyMember_Get((char *)self, semaphore_memberlist, name);
+}
+
+static PyObject *
+PyShmSemaphore_repr(PyShmSemObj *self, char *name)
+{
+    /* v1.1 - added blocking */
+    char buf[200];
+
+    refresh_semaphore_status(self);
+    sprintf(buf, "<semaphore object, id=%d, val=%d, ncnt=%d, zcnt=%d, blocking=%d>",
+            self->semid,
+            semctl(self->semid, 0, GETVAL, 0),
+            semctl(self->semid, 0, GETNCNT, 0),
+            semctl(self->semid, 0, GETZCNT, 0),
+            self->opflag & IPC_NOWAIT ? 0 : 1);
+    return PyString_FromString(buf);
+}
+
+/* Type object for semaphore objects */
+
+static PyTypeObject PyShmSemaphore_Type = {
+    PyObject_HEAD_INIT(&PyType_Type)
+    0,					/*ob_size*/
+    "semaphore",			/*tp_name*/
+    sizeof(PyShmSemObj),		/*tp_size*/
+    0,					/*tp_itemsize*/
+    /* methods */
+    (destructor)PyShmSemaphore_dealloc,	/*tp_dealloc*/
+    0,					/*tp_print*/
+    (getattrfunc)PyShmSemaphore_getattr,/*tp_getattr*/
+    0,					/*tp_setattr*/
+    0,					/*tp_compare*/
+    (reprfunc)PyShmSemaphore_repr,	/*tp_repr*/
+    0,					/*tp_as_number*/
+    0,					/*tp_as_sequence*/
+    0,					/*tp_as_mapping*/
+};
+
+/************************************************************/
+/*                      Module Interface                    */
+/************************************************************/
+
+/*
+-- ftok(string Path, int ProjId) -> int
+*/
+
+/* Compute a key by using the system's ftok algorithm */
+
+static PyObject *
+PyShm_ftok(PyObject *self, PyObject *args)
+{
+    char *path;
+    char id;
+    key_t key;
+
+    if (!PyArg_ParseTuple(args, "sb", &path, &id))
+        return NULL;
+    key = ftok(path, id);
+    return PyInt_FromLong((long)key);
+}
+
+/*
+-- getshmid(int Key) --> int | except KeyError
+*/
+
+/* Return a shared memory segment id from a given key */
+
+static PyObject *
+PyShm_getshmid(PyObject *self, PyObject *args)
+{
+    long key;
+    int shmid;
+
+    if (!PyArg_ParseTuple(args, "l", &key))
+        return NULL;
+    shmid = shmget((key_t)key, 0, 0);
+    if (shmid == -1) {
+        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(key));
+        return NULL;
+    }
+    return PyInt_FromLong(shmid);
+}
+
+/*
+-- memory_haskey(int Key) --> int
+*/
+
+/* Check whether there is a shared memory segment with the given key */
+
+static PyObject *
+PyShm_memory_haskey(PyObject *self, PyObject *args)
+{
+    long key;
+    int shmid;
+
+    if (!PyArg_ParseTuple(args, "l", &key))
+        return NULL;
+    shmid = shmget((key_t)key, 0, 0);
+    return PyInt_FromLong((shmid == -1) ? 0 : 1);
+}
+
+/*
+-- memory(int Shmid) --> object | except shm.error
+*/
+
+/* Get an existing shared memory segment and return it as a python object. */
+
+static PyObject *
+PyShm_memory(PyObject *self, PyObject *args)
+{
+    int shmid;
+    PyShmObj *o;
+    PyObject *keyo;
+
+    if (!PyArg_ParseTuple(args, "i", &shmid))
+        return NULL;
+    keyo = PyInt_FromLong(shmid);
+    /* get the object from the dictionary */
+    if (PyMapping_HasKey(shm_dict, keyo)) {
+        o = (PyShmObj *)PyDict_GetItem(shm_dict, keyo);
+        Py_INCREF(o);
+    }
+    else {
+        /* not found, create it */
+        if ((o = PyObject_NEW(PyShmObj, &PyShmMemory_Type)) == NULL)
+            return NULL;
+        o->shmid = shmid;
+        o->addr = NULL;
+        o->mode = 0;
+        /* shm_dict[shmid] = o */
+        if (PyDict_SetItem(shm_dict, keyo, (PyObject *)o) == -1) {
+            Py_DECREF(o);
+            PyErr_SetString(PyShm_Error, "can't initialize shared memory object");
+            return NULL;
+        }
+        Py_DECREF(o);	/* the owned reference in shm_dict doesn't count! */
+    }
+    /* v1.1 - plugged memory leak */
+    Py_DECREF(keyo);
+    /* set up the status data */
+    if (shmctl(o->shmid, IPC_STAT, &(o->ds)) == -1) {
+        Py_DECREF(o);
+        PyErr_SetString(PyShm_Error, "can't access shared memory segment");
+        return NULL;
+    }
+    return (PyObject *)o;
+}
+
+/*
+-- create_memory(int Key, int Size [,int Perm=0666]) --> object
+*/
+
+/* Create a new shared memory segment. */
+
+static PyObject *
+PyShm_create_memory(PyObject *self, PyObject *args)
+{
+    long key;
+    int size, shmid;
+    int perm = 0666;	/* Default permission is -rw-rw-rw- */
+    PyObject *py_shmid;
+    PyObject *memory;
+
+    if (!PyArg_ParseTuple(args, "li|i", &key, &size, &perm))
+        return NULL;
+    shmid = shmget((key_t)key, size, perm | IPC_CREAT | IPC_EXCL);
+    if (shmid == -1)
+        return PyShm_Err();
+    /* v1.1 - fixed memory leak resulting from inlining Py_BuildValue */
+    py_shmid = Py_BuildValue("(i)", shmid);
+    memory = PyShm_memory(self, py_shmid);
+    Py_DECREF(py_shmid);
+
+    return memory;
+}
+
+/*
+-- remove_memory(int Shmid) --> None | except shm.error
+*/
+
+/* Remove an existing shared memory segment. */
+
+static PyObject *
+PyShm_remove_memory(PyObject *self, PyObject *args)
+{
+    int shmid, res;
+
+    if (!PyArg_ParseTuple(args, "i", &shmid))
+        return NULL;
+    res = shmctl(shmid, IPC_RMID, 0);	/* remove it */
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- getsemid(int Key) --> int | except KeyError
+*/
+
+/* Return a semaphore id from a given key */
+
+static PyObject *
+PyShm_getsemid(PyObject *self, PyObject *args)
+{
+    long key;
+    int semid;
+
+    if (!PyArg_ParseTuple(args, "l", &key))
+        return NULL;
+    semid = semget((key_t)key, 0, 0);
+    if (semid == -1) {
+        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(key));
+        return NULL;
+    }
+    return PyInt_FromLong(semid);
+}
+
+/*
+-- semaphore_haskey(int Key) --> int
+*/
+
+/* Check whether there is a semaphore with the given key */
+
+static PyObject *
+PyShm_semaphore_haskey(PyObject *self, PyObject *args)
+{
+    long key;
+    int semid;
+
+    if (!PyArg_ParseTuple(args, "l", &key))
+        return NULL;
+    semid = semget((key_t)key, 0, 0);
+    return PyInt_FromLong((semid == -1) ? 0 : 1);
+}
+
+/*
+-- semaphore(int Semid) --> object
+*/
+
+/* Get an existing semaphore and return it as a python object. */
+
+static PyObject *
+PyShm_semaphore(PyObject *self, PyObject *args)
+{
+    int semid;
+    PyShmSemObj *o;
+    PyObject *keyo;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "i", &semid))
+        return NULL;
+    keyo = PyInt_FromLong(semid);
+    /* get the object from the dictionary */
+    if (PyMapping_HasKey(sem_dict, keyo)) {
+        o = (PyShmSemObj *)PyDict_GetItem(sem_dict, keyo);
+        Py_INCREF(o);
+    }
+    else {
+        /* not found, create it */
+        if ((o = PyObject_NEW(PyShmSemObj, &PyShmSemaphore_Type)) == NULL)
+            return NULL;
+        o->semid = semid;
+        o->opflag = 0;
+        /* sem_dict[semid] = o */
+        if (PyDict_SetItem(sem_dict, keyo, (PyObject *)o) == -1) {
+            Py_DECREF(o);
+            PyErr_SetString(PyShm_Error, "can't initialize semaphore object");
+            return NULL;
+        }
+        Py_DECREF(o);	/* the owned reference in sem_dict doesn't count! */
+    }
+    /* v1.1 - plugged memory leak */
+    Py_DECREF(keyo);
+    /* set up the status data */
+    arg.buf = &(o->ds);
+    if (semctl(o->semid, 0, IPC_STAT, arg) == -1) {
+        Py_DECREF(o);
+        PyErr_SetString(PyShm_Error, "can't access semaphore");
+        return NULL;
+    }
+    return (PyObject *)o;
+}
+
+/*
+-- create_semaphore(int Key, [,int Value=1 [,int Perm=0666]]) --> object
+*/
+
+/* Create a new semaphore. */
+
+static PyObject *
+PyShm_create_semaphore(PyObject *self, PyObject *args)
+{
+    long key;
+    int semid;
+    int value = 1;
+    int perm = 0666;	/* Default permission is -rw-rw-rw- */
+    semctl_arg arg;
+    PyObject *py_shmid;
+    PyObject *semaphore;
+
+    if (!PyArg_ParseTuple(args, "l|ii", &key, &value, &perm))
+        return NULL;
+    semid = semget((key_t)key, 1, perm | IPC_CREAT | IPC_EXCL);
+    arg.val = value;
+    if (!((semid != -1) && (semctl(semid, 0, SETVAL, arg) != -1)))
+	   return PyShm_Err();
+    /* v1.1 - fixed memory leak resulting from inlining Py_BuildValue */
+    py_shmid = Py_BuildValue("(i)", semid);
+    semaphore = PyShm_semaphore(self, py_shmid);
+    Py_DECREF(py_shmid);
+
+    return semaphore;
+}
+
+/*
+-- remove_semaphore(int Semid) --> None | except shm.error
+*/
+
+/* Remove an existing semaphore. */
+
+static PyObject *
+PyShm_remove_semaphore(PyObject *self, PyObject *args)
+{
+    int semid, res;
+
+    if (!PyArg_ParseTuple(args, "i", &semid))
+        return NULL;
+    res = semctl(semid, 0, IPC_RMID, 0);	/* remove it */
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/* List of functions exported by this module. */
+
+static PyMethodDef PyShm_methods[] = {
+    {"create_memory",		PyShm_create_memory,	1,
+     "create_memory(int Key, int Size [,int Perm=0666]) --> object | except shm.error"},
+    {"create_semaphore",	PyShm_create_semaphore,	1,
+     "create_semaphore(int Key [,int Value=1 [,int Perm=0666]]) --> object | except shm.error"},
+    {"ftok",			PyShm_ftok,		1,
+     "ftok(string Path, int ProjId) --> int | except shm.error"},
+    {"getsemid",		PyShm_getsemid,		1,
+     "getsemid(int Key) --> int | except KeyError"},
+    {"getshmid",		PyShm_getshmid,		1,
+     "getshmid(int Key) --> int | except KeyError"},
+    {"memory_haskey",		PyShm_memory_haskey,	1,
+     "memory_haskey(int Key) --> int"},
+    {"memory",			PyShm_memory,		1,
+     "memory(int Shmid) --> object | except shm.error"},
+    {"semaphore",		PyShm_semaphore,	1,
+     "semaphore(int Semid) --> object | except shm.error"},
+    {"semaphore_haskey",	PyShm_semaphore_haskey,	1,
+     "semaphore_haskey(int Key) --> int"},
+    {"remove_memory",		PyShm_remove_memory,	1,
+     "remove_memory(int Shmid) --> None | except shm.error"},
+    {"remove_semaphore",	PyShm_remove_semaphore,	1,
+     "remove_semaphore(int Semid) --> None | except shm.error"},
+    {NULL,			NULL}		/* Sentinel */
+};
+
+
+/* Initialize this module */
+
+/* This is for inserting constants in the module's dictionary */
+
+static void
+insint(PyObject *d, char *name, int value)
+{
+	PyObject *v = PyInt_FromLong((long) value);
+	if (!v || PyDict_SetItemString(d, name, v))
+		Py_FatalError("can't initialize shm module");
+
+	Py_DECREF(v);
+}
+
+/* This is to set up the type of shared memory/semaphore object members */
+
+static void
+set_member_type(struct memberlist *sxm_memberlist,
+                int index,                          /* index in memberlist */
+                int typesize                        /* sizeof(member_type) */
+               )
+{
+    int t;
+
+    if (typesize == sizeof(char))
+        t = T_UBYTE;
+    else if (typesize == sizeof(short))
+        t = T_USHORT;
+    else if (typesize == sizeof(int))
+        t = T_UINT;
+    else if (typesize == sizeof(long))
+        t = T_ULONG;
+    else
+        Py_FatalError("can't initialize shm module");
+    sxm_memberlist[index].type = t;
+};
+
+void
+initshm(void)
+{
+    PyObject *m, *d;
+
+    m = Py_InitModule("shm", PyShm_methods);
+    d = PyModule_GetDict(m);
+    PyShm_Error = PyString_FromString("shm.error");
+    if (PyShm_Error == NULL ||
+	PyDict_SetItemString(d, "error", PyShm_Error) != 0)
+	    Py_FatalError("can't define shm.error");
+    if (PyDict_SetItemString(d, "__doc__", PyString_FromString
+			     ("Interface to System V shared memory IPC")) != 0)
+        Py_FatalError("can't define shm.__doc__");
+    if ((shm_dict = PyDict_New()) == NULL || (sem_dict = PyDict_New()) == NULL)
+	   Py_FatalError("can't initialize shm module");
+
+    /* initialize the machine dependent types in memory_memberlist */
+    set_member_type(memory_memberlist, 0, sizeof(gid_t));	/* cgid   */
+    set_member_type(memory_memberlist, 1, sizeof(pid_t));	/* cpid   */
+    set_member_type(memory_memberlist, 2, sizeof(uid_t));	/* cuid   */
+    set_member_type(memory_memberlist, 3, sizeof(key_t));	/* key    */
+    set_member_type(memory_memberlist, 4, sizeof(pid_t));	/* lpid   */
+    set_member_type(memory_memberlist, 5, sizeof(int));		/* shmid  */
+    set_member_type(memory_memberlist, 6, sizeof(int));		/* size   */
+    set_member_type(memory_memberlist, 7, sizeof(gid_t));	/* gid    */
+    set_member_type(memory_memberlist, 8, sizeof(uid_t));	/* uid    */
+
+    /* initialize the machine dependent types in semaphore_memberlist */
+    set_member_type(semaphore_memberlist, 0, sizeof(gid_t));	/* cgid   */
+    set_member_type(semaphore_memberlist, 1, sizeof(uid_t));	/* cuid   */
+    set_member_type(semaphore_memberlist, 2, sizeof(key_t));	/* key    */
+    set_member_type(semaphore_memberlist, 3, sizeof(int));	/* semid  */
+    set_member_type(semaphore_memberlist, 4, sizeof(gid_t));	/* gid    */
+    set_member_type(semaphore_memberlist, 5, sizeof(uid_t));	/* uid    */
+
+    /* relevant constants for this module; the others are useless here */
+    insint(d, "IPC_PRIVATE", IPC_PRIVATE);
+    insint(d, "SHM_RDONLY", SHM_RDONLY);
+    insint(d, "SHM_RND", SHM_RND);
+#ifdef SHMLBA
+    insint(d, "SHMLBA", SHMLBA);
+#endif
+#ifdef SEM_A
+    insint(d, "SEM_A", SEM_A);
+#endif
+#ifdef SEM_R
+    insint(d, "SEM_R", SEM_R);
+#endif
+#ifdef SHM_R
+    insint(d, "SHM_R", SHM_R);
+#endif
+#ifdef SHM_W
+    insint(d, "SHM_W", SHM_W);
+#endif
+}
=== setup.py
==================================================================
--- setup.py	(revision 636)
+++ setup.py	(patch 0.8.9.1 level 1)
@@ -127,14 +127,14 @@
 	uis = [x for x in os.listdir("portato/gui/templates/ui/") if x.endswith(".ui")]
 	return [os.path.join("portato/gui/templates/ui",x) for x in uis]
 
-packages = ["portato", "portato.gui", "portato.plugins", "portato.backend", "portato.backend.portage", "portato.backend.catapult", "portato.shm"]
-ext_modules = [Extension("portato.shm.shm", ["shm/shmmodule.c"], define_macros = MacrosAndDefines, extra_compile_args=["-fPIC"])]
+packages = ["portato", "portato.gui", "portato.plugins", "portato.backend", "portato.backend.portage", "portato.backend.catapult", "portato._shm"]
+ext_modules = [Extension("portato._shm.shm", ["_shm/shmmodule.c"], define_macros = MacrosAndDefines, extra_compile_args=["-fPIC"])]
 data_files = [
 		(ICON_DIR, ["icons/portato-icon.png"]), 
 		#(PLUGIN_DIR, plugin_list("shutdown", "resume_loop")), 
 		(DATA_DIR, ["plugin.xsd"])]
 cmdclass = {}
-package_dir = {"portato.shm" : "shm"}
+package_dir = {"portato._shm" : "_shm"}
 
 if "gtk" in FRONTENDS:
 	packages.append("portato.gui.gtk")
=== portato/gui/gtk/windows.py
==================================================================
--- portato/gui/gtk/windows.py	(revision 636)
+++ portato/gui/gtk/windows.py	(patch 0.8.9.1 level 1)
@@ -37,7 +37,7 @@
 from .views import LogView, HighlightView, InstalledOnlyView
 from .dialogs import (blocked_dialog, changed_flags_dialog, io_ex_dialog,
 		nothing_found_dialog, queue_not_empty_dialog, remove_deps_dialog,
-		remove_queue_dialog, unmask_dialog)
+		remove_queue_dialog, remove_updates_dialog, unmask_dialog)
 
 class AboutWindow (AbstractDialog):
 	"""A window showing the "about"-informations."""
@@ -304,23 +304,37 @@
 			"browserEdit"		: ("browserCmd", "GUI")
 			}
 
-	def __init__ (self, parent, cfg, set_console_font):
+	# the mappings for the tabpos combos
+	tabpos = {
+			1 : gtk.POS_TOP,
+			2 : gtk.POS_BOTTOM,
+			3 : gtk.POS_LEFT,
+			4 : gtk.POS_RIGHT
+			}
+
+	def __init__ (self, parent, cfg, console_fn, linkbtn_fn, tabpos_fn):
 		"""Constructor.
 
 		@param parent: parent window
 		@type parent: gtk.Window
 		@param cfg: configuration object
 		@type cfg: gui_helper.Config
-		@param set_console_font: function to call to set the console font
-		@type set_console_font: function(string)"""
+		@param console_fn: function to call to set the console font
+		@type console_fn: function(string)
+		@param linkbtn_fn: function to call to set the linkbutton behavior
+		@type linkbtn_fn: function(string)
+		@param tabpos_fn: function to call to set the tabposition of the notebooks
+		@type tabpos_fn: function(gtk.ComboBox,int)"""
 		
 		AbstractDialog.__init__(self, parent)
 
 		# our config
 		self.cfg = cfg
 
-		# the console font setter
-		self.set_console_font = set_console_font
+		# the setter functions
+		self.console_fn = console_fn
+		self.linkbtn_fn = linkbtn_fn
+		self.tabpos_fn = tabpos_fn
 		
 		# set the bg-color of the hint
 		hintEB = self.tree.get_widget("hintEB")
@@ -348,6 +362,19 @@
 		self.consoleFontBtn = self.tree.get_widget("consoleFontBtn")
 		self.consoleFontBtn.set_font_name(self.cfg.get("consolefont", section = "GTK"))
 
+		# the comboboxes
+		self.systemTabCombo = self.tree.get_widget("systemTabCombo")
+		self.pkgTabCombo = self.tree.get_widget("packageTabCombo")
+
+		for c in (self.systemTabCombo, self.pkgTabCombo):
+			m = c.get_model()
+			m.clear()
+			for i in (_("Top"), _("Bottom"), _("Left"), _("Right")):
+				m.append((i,))
+
+		self.systemTabCombo.set_active(int(self.cfg.get("systemTabPos", section = "GTK"))-1)
+		self.pkgTabCombo.set_active(int(self.cfg.get("packageTabPos", section = "GTK"))-1)
+
 		self.window.show_all()
 
 	def _save(self):
@@ -367,9 +394,17 @@
 
 		font = self.consoleFontBtn.get_font_name()
 		self.cfg.set("consolefont", font, section = "GTK")
-		self.set_console_font(font)
+		self.console_fn(font)
+
+		pkgPos = self.pkgTabCombo.get_active()+1
+		sysPos = self.systemTabCombo.get_active()+1
+
+		self.cfg.set("packageTabPos", str(pkgPos), section = "GTK")
+		self.cfg.set("systemTabPos", str(sysPos), section = "GTK")
+
+		self.tabpos_fn(map(self.tabpos.get, (pkgPos, sysPos)))
 		
-		gtk.link_button_set_uri_hook(lambda btn, x: get_listener().send_cmd([self.cfg.get("browserCmd", section = "GUI"), btn.get_uri()]))
+		self.linkbtn_fn(self.cfg.get("browserCmd", section="GUI"))
 
 	def cb_ok_clicked(self, button):
 		"""Saves, writes to config-file and closes the window."""
@@ -642,15 +677,15 @@
 		if emerge:
 			try:
 				try:
-					self.queue.append(self.actual_package().get_cpv(), unmerge = False, update = update)
+					self.queue.append(self.actual_package().get_cpv(), type = "install", update = update)
 				except PackageNotFoundException, e:
 					if unmask_dialog(e[0]) == gtk.RESPONSE_YES:
-						self.queue.append(self.actual_package().get_cpv(), unmerge = False, unmask = True, update = update)
+						self.queue.append(self.actual_package().get_cpv(), type = "install", unmask = True, update = update)
 			except BlockedException, e:
 				blocked_dialog(e[0], e[1])
 		else:
 			try:
-				self.queue.append(self.actual_package().get_cpv(), unmerge = True)
+				self.queue.append(self.actual_package().get_cpv(), type = "uninstall")
 			except PackageNotFoundException, e:
 				error(_("Package could not be found: %s"), e[0])
 				#masked_dialog(e[0])
@@ -752,9 +787,9 @@
 		self.actual_package().remove_new_use_flags()
 		self.actual_package().remove_new_masked()
 		self.actual_package().remove_new_testing()
-		self.versList.get_model().clear()
-		self.fill_vers_list()
-		self.cb_vers_list_changed()
+		self.versionCombo.get_model().clear()
+		self.fill_version_combo()
+		self.cb_version_combo_changed()
 		if self.instantChange:
 			self._update_keywords(True, update = True)
 		return True
@@ -762,13 +797,13 @@
 	def cb_package_emerge_clicked (self, button):
 		"""Callback for pressed emerge-button. Adds the package to the EmergeQueue."""
 		self._update_keywords(True)
-		self.main.notebook.set_current_page(self.main.QUEUE_PAGE)
+		self.main.sysNotebook.set_current_page(self.main.QUEUE_PAGE)
 		return True
 
 	def cb_package_unmerge_clicked (self, button):
 		"""Callback for pressed unmerge-button clicked. Adds the package to the UnmergeQueue."""
 		self._update_keywords(False)
-		self.main.notebook.set_current_page(self.main.QUEUE_PAGE)
+		self.main.sysNotebook.set_current_page(self.main.QUEUE_PAGE)
 		return True
 
 	def cb_testing_toggled (self, button):
@@ -978,8 +1013,9 @@
 		
 		splash(_("Finishing startup"))
 		
-		# notebook
-		self.notebook = self.tree.get_widget("systemNotebook")
+		# notebooks
+		self.sysNotebook = self.tree.get_widget("systemNotebook")
+		self.pkgNotebook = self.tree.get_widget("packageNotebook")
 		self.window.show_all()
 		
 		# the hidden stuff
@@ -1025,7 +1061,7 @@
 		self.queueList.set_model(store)
 		
 		cell = gtk.CellRendererText()
-		col = gtk.TreeViewColumn(_("Queue"), cell, text = 0)
+		col = gtk.TreeViewColumn(_("Queue"), cell, markup = 0)
 		self.queueList.append_column(col)
 		
 		col = gtk.TreeViewColumn(_("Options"), cell, markup = 1)
@@ -1163,6 +1199,13 @@
 		"""Is called when we want to jump to a specific package."""
 		self.show_package(cp, self.queue, version = version)
 
+	def set_uri_hook (self, browser):
+		gtk.link_button_set_uri_hook(lambda btn, x: get_listener().send_cmd([browser, btn.get_uri()]))
+
+	def set_notebook_tabpos (self, tabposlist):
+		self.pkgNotebook.set_tab_pos(tabposlist[0])
+		self.sysNotebook.set_tab_pos(tabposlist[1])
+
 	def title_update (self, title):
 		
 		def window_title_update (title):
@@ -1189,7 +1232,7 @@
 			else: 
 				title = (_("Console (%(title)s)") % {"title" : title})
 			
-			self.notebook.set_tab_label_text(self.termHB, title)
+			self.sysNotebook.set_tab_label_text(self.termHB, title)
 
 			return False
 
@@ -1297,11 +1340,9 @@
 		tooltip.set_markup(string)
 		return string != ""
 
-	def cb_emerge_clicked (self, action):
-		"""Do emerge."""
+	def cb_execute_clicked (self, action):
+		"""Execute the current queue."""
 		
-		self.notebook.set_current_page(self.CONSOLE_PAGE)
-		
 		if len(flags.newUseFlags) > 0:
 			changed_flags_dialog(_("use flags"))
 			flags.write_use_flags()
@@ -1314,20 +1355,27 @@
 			flags.write_masked()
 			flags.write_testing()
 			system.reload_settings()
+
+		model, iter = self.queueList.get_selection().get_selected()
+
+		if iter is None:
+			if model.iter_n_children(None) == 1: # only one queue there - take this as being selected
+				iter = model.get_iter_root()
+			else:
+				return False
+
+		self.sysNotebook.set_current_page(self.CONSOLE_PAGE)
 		
-		if not self.doUpdate:
-			self.queue.emerge(force=True)
+		# test which type of queue we have here
+		if self.queueTree.is_in_emerge(iter):
+			self.queue.emerge(force = True)
+		elif self.queueTree.is_in_unmerge(iter):
+			self.queue.unmerge(force = True)
 		else:
 			self.queue.update_world(force=True, newuse = self.cfg.get_boolean("newuse"), deep = self.cfg.get_boolean("deep"))
-			self.doUpdate = False
-		
-	def cb_unmerge_clicked (self, button):
-		"""Do unmerge."""
 
-		self.notebook.set_current_page(self.CONSOLE_PAGE)
-		self.queue.unmerge(force=True)
 		return True
-
+		
 	def cb_update_clicked (self, action):
 		def __update():
 			
@@ -1335,15 +1383,15 @@
 				try:
 					try:
 						for pkg, old_pkg in updating:
-							self.queue.append(pkg.get_cpv(), unmask = False)
+							self.queue.append(pkg.get_cpv(), type = "update", unmask = False)
 					except PackageNotFoundException, e:
 						if unmask_dialog(e[0]) == gtk.RESPONSE_YES:
 							for pkg, old_pkg in updating:
-								self.queue.append(pkg.get_cpv(), unmask = True)
+								self.queue.append(pkg.get_cpv(), type = "update", unmask = True)
 
 				except BlockedException, e:
 					blocked_dialog(e[0], e[1])
-					self.queue.remove_children(self.queue.emergeIt)
+					self.queue.remove_children(self.queueTree.get_update_it())
 				
 				return False
 
@@ -1353,7 +1401,6 @@
 				updating = system.update_world(newuse = self.cfg.get_boolean("newuse"), deep = self.cfg.get_boolean("deep"))
 				debug("updating list: %s --> length: %s", [(x.get_cpv(), y.get_cpv()) for x,y in updating], len(updating))
 				gobject.idle_add(cb_idle_append, updating)
-				if len(updating): self.doUpdate = True
 			finally:
 				self.window.window.set_cursor(None)
 			
@@ -1363,29 +1410,35 @@
 
 	def cb_remove_clicked (self, button):
 		"""Removes a selected item in the (un)emerge-queue if possible."""
-		selected = self.queueList.get_selection()
+		model, iter = self.queueList.get_selection().get_selected()
 
-		if selected:
-			model, iter = selected.get_selected()
+		if iter:
+			parent = model.iter_parent(iter)
 			
-			if iter == None: return False
-
-			if not model.iter_parent(iter): # top-level
+			if self.queueTree.is_in_update(iter) and parent:
+				if remove_updates_dialog() == gtk.RESPONSE_YES:
+					self.queue.remove_with_children(self.queueTree.get_update_it())
+			
+			elif not parent: # top-level
 				if model.iter_n_children(iter) > 0: # and has children which can be removed :)
 					if remove_queue_dialog() == gtk.RESPONSE_YES :
-						self.queue.remove_children(iter)
-						self.doUpdate = False
+						self.queue.remove_with_children(iter)
+				else:
+					self.queue.remove(iter)
 			
-			elif model.iter_parent(model.iter_parent(iter)): # this is in the 3rd level => dependency
+			elif model.iter_parent(parent): # this is in the 3rd level => dependency
 				remove_deps_dialog()
 			else:
 				self.queue.remove_with_children(iter)
-				self.doUpdate = False
+
+				if model.iter_n_children(parent) == 0: # no more children left - remove queue too
+					self.queue.remove(parent)
 		
-		return True
+			return True
+		return False
 
 	def cb_sync_clicked (self, action):
-		self.notebook.set_current_page(self.CONSOLE_PAGE)
+		self.sysNotebook.set_current_page(self.CONSOLE_PAGE)
 		cmd = self.cfg.get("syncCommand")
 
 		if cmd != "emerge --sync":
@@ -1424,7 +1477,7 @@
 					SearchWindow(self.window, packages, self.jump_to)
 
 	def cb_preferences_clicked (self, button):
-		PreferenceWindow(self.window, self.cfg, self.console.set_font_from_string)
+		PreferenceWindow(self.window, self.cfg, self.console.set_font_from_string, self.set_uri_hook, self.set_notebook_tabpos)
 		return True
 
 	def cb_about_clicked (self, button):
=== portato/gui/gtk/wrapper.py
==================================================================
--- portato/gui/gtk/wrapper.py	(revision 636)
+++ portato/gui/gtk/wrapper.py	(patch 0.8.9.1 level 1)
@@ -29,8 +29,9 @@
 
 		self.tree = tree
 		self.cpv_col = col
-		self.emergeIt = self.append(None, ["Emerge", ""])
-		self.unmergeIt = self.append(None, ["Unmerge", ""])
+		self.emergeIt = None
+		self.unmergeIt = None
+		self.updateIt = None
 
 	def build_append_value (self, cpv, oneshot = False, update = False, downgrade = False, version = None, useChange = []):
 		string = ""
@@ -60,17 +61,38 @@
 
 		return [cpv, string]
 
+	def set_in_progress (self, it):
+		iter = self.tree.get_iter_from_string(self.tree.get_string_from_iter(it).split(":")[0])
+		self.tree.set_value(iter, 1, "<b>%s</b>" % _("(In Progress)"))
+
 	def get_emerge_it (self):
+		if self.emergeIt is None:
+			self.emergeIt = self.append(None, ["<b>%s</b>" % _("Install"), ""])
 		return self.emergeIt
 
 	def get_unmerge_it (self):
+		if self.unmergeIt is None:
+			self.unmergeIt = self.append(None, ["<b>%s</b>" % _("Uninstall"), ""])
+
 		return self.unmergeIt
 
+	def get_update_it (self):
+		if self.updateIt is None:
+			self.updateIt = self.append(None, ["<b>%s</b>" % _("Update"), ""])
+
+		return self.updateIt
+
+	def is_in (self, it, in_it):
+		return in_it and self.tree.get_string_from_iter(it).split(":")[0] == self.tree.get_string_from_iter(in_it)
+
 	def is_in_emerge (self, it):
-		return self.tree.get_string_from_iter(it).split(":")[0] == self.tree.get_string_from_iter(self.emergeIt)
+		return self.is_in(it, self.emergeIt)
 
 	def is_in_unmerge (self, it):
-		return self.tree.get_string_from_iter(it).split(":")[0] == self.tree.get_string_from_iter(self.unmergeIt)
+		return self.is_in(it, self.unmergeIt)
+
+	def is_in_update (self, it):
+		return self.is_in(it, self.updateIt)
 	
 	def iter_has_parent (self, it):
 		return (self.tree.iter_parent(it) != None)
@@ -90,10 +112,18 @@
 	def get_value (self, it, column):
 		return self.tree.get_value(it, column)
 
+	def iter_equal (self, it, other_it):
+		return self.tree.get_string_from_iter(it) == self.tree.get_string_from_iter(other_it)
+
 	def append (self, parent = None, values = None):
 		return self.tree.append(parent, values)
 
 	def remove (self, it):
+		
+		if self.emergeIt and self.iter_equal(it, self.emergeIt) : self.emergeIt = None
+		elif self.unmergeIt and self.iter_equal(it, self.unmergeIt) : self.unmergeIt = None
+		elif self.updateIt and self.iter_equal(it, self.updateIt) : self.updateIt = None
+		
 		self.tree.remove(it)
 
 	def get_original (self):
=== portato/gui/gtk/dialogs.py
==================================================================
--- portato/gui/gtk/dialogs.py	(revision 636)
+++ portato/gui/gtk/dialogs.py	(patch 0.8.9.1 level 1)
@@ -68,6 +68,12 @@
 	infoMB.destroy()
 	return ret
 
+def remove_updates_dialog():
+	askMB = gtk.MessageDialog(None, gtk.DIALOG_MODAL, gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO, _("This is the updates queue. You cannot remove single elements.\nDo you want to clear the whole queue instead?"))
+	ret = askMB.run()
+	askMB.destroy()
+	return ret
+
 def remove_queue_dialog ():
 	askMB = gtk.MessageDialog(None, gtk.DIALOG_MODAL, gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO, _("Do you really want to clear the whole queue?"))
 	ret = askMB.run()
=== portato/gui/wrapper.py
==================================================================
--- portato/gui/wrapper.py	(revision 636)
+++ portato/gui/wrapper.py	(patch 0.8.9.1 level 1)
@@ -125,6 +125,26 @@
 		@rtype: boolean"""
 		raise NotImplementedError
 
+	def is_in_emerge (self, it):
+		"""Checks whether an iterator is part of the "Update" section.
+
+		@param it: the iterator to check
+		@type it: Iterator
+		@returns: True if the iter is part; False otherwise
+		@rtype: boolean"""
+		raise NotImplementedError
+
+	def iter_equal (self, it, other_it):
+		"""Checks whether to iterators are equal.
+
+		@param it: the one iterator to compare
+		@type it: Iterator
+		@param other_it: the other iterator to compare
+		@type other_it: Iterator
+		@returns: True if both iterators are equal; False otherwise
+		@rtype boolean"""
+		raise NotImplementedError
+
 	def get_emerge_it (self):
 		"""Returns an iterator signaling the top of the emerge section.
 
@@ -139,6 +159,20 @@
 		@rtype: Iterator"""
 		raise NotImplementedError
 
+	def get_update_it (self):
+		"""Returns an iterator signaling the top of the update section.
+
+		@returns: unmerge-iterator
+		@rtype: Iterator"""
+		raise NotImplementedError
+
+	def set_in_progress (self, it):
+		"""Marks the queue where the given iterator belongs as being in progress.
+
+		@param it: one iterator of the queue to mark to
+		@type it: Iterator"""
+		raise NotImplementedError
+
 	def build_append_value (self, cpv, oneshot = False, update = False, downgrade = False, version = None, useChange = []):
 		"""Builds the list, which is going to be passed to append. 
 
=== portato/gui/gui_helper.py
==================================================================
--- portato/gui/gui_helper.py	(revision 636)
+++ portato/gui/gui_helper.py	(patch 0.8.9.1 level 1)
@@ -264,13 +264,6 @@
 		self.db = db
 		self.title_update = title_update
 
-		# our iterators pointing at the toplevels; they are set to None if we do not have a tree
-		if self.tree: 
-			self.emergeIt = self.tree.get_emerge_it()
-			self.unmergeIt = self.tree.get_unmerge_it()
-		else:
-			self.emergeIt = self.unmergeIt = None
-
 	def _get_pkg_from_cpv (self, cpv, unmask = False):
 		"""Gets a L{backend.Package}-object from a cpv.
 
@@ -390,14 +383,14 @@
 				self.remove_with_children(subIt)
 				raise
 		
-	def append (self, cpv, unmerge = False, update = False, forceUpdate = False, unmask = False, oneshot = False):
+	def append (self, cpv, type = "install", update = False, forceUpdate = False, unmask = False, oneshot = False):
 		"""Appends a cpv either to the merge queue or to the unmerge-queue.
 		Also updates the tree-view.
 		
 		@param cpv: Package to add
 		@type cpv: string (cat/pkg-ver)
-		@param unmerge: Set to True if you want to unmerge this package - else False.
-		@type unmerge: boolean		
+		@param type: The type of this append process. Possible values are "install", "uninstall", "update".
+		@type unmerge: string		
 		@param update: Set to True if a package is going to be updated (e.g. if the use-flags changed).
 		@type update: boolean
 		@param forceUpdate: Set to True if the update should be forced.
@@ -409,7 +402,7 @@
 		
 		@raises portato.backend.PackageNotFoundException: if trying to add a package which does not exist"""
 		
-		if not unmerge: # emerge
+		if type in ("install", "update"): # emerge
 			# insert dependencies
 			pkg = self._get_pkg_from_cpv(cpv, unmask)
 			deps = pkg.get_dep_packages()
@@ -429,14 +422,17 @@
 					
 					self.update_tree(parentIt, cpv, unmask, oneshot = oneshot)
 			else: # not update
-				self._queue_append(cpv, oneshot)
-				if self.emergeIt: 
-					self.update_tree(self.emergeIt, cpv, unmask, oneshot = oneshot)
+				if type == "install":
+					self._queue_append(cpv, oneshot)
+					if self.tree:
+						self.update_tree(self.tree.get_emerge_it(), cpv, unmask, oneshot = oneshot)
+				elif type == "update" and self.tree:
+					self.update_tree(self.tree.get_update_it(), cpv, unmask, oneshot = oneshot)
 			
 		else: # unmerge
 			self.unmergequeue.append(cpv)
-			if self.unmergeIt: # update tree
-				self.tree.append(self.unmergeIt, self.tree.build_append_value(cpv))
+			if self.tree: # update tree
+				self.tree.append(self.tree.get_unmerge_it(), self.tree.build_append_value(cpv))
 
 	def _queue_append (self, cpv, oneshot = False):
 		"""Convenience function appending a cpv either to self.mergequeue or to self.oneshotmerge.
@@ -453,8 +449,11 @@
 			if cpv not in self.oneshotmerge:
 				self.oneshotmerge.append(cpv)
 
-	def doEmerge (self, *args, **kwargs):
-		self.threadQueue.put(self.__emerge, *args, **kwargs)
+	def doEmerge (self, options, packages, it, *args, **kwargs):
+		if self.tree and it:
+			self.tree.set_in_progress(it[0])
+
+		self.threadQueue.put(self.__emerge, options, packages, it, *args, **kwargs)
 	
 	def __emerge (self, options, packages, it, command = None):
 		"""Calls emerge and updates the terminal.
@@ -530,14 +529,21 @@
 			its = []
 			for k in queue:
 				list += ["="+k]
-				its.append(self.iters[k])
+				if self.tree: its.append(self.iters[k])
 
 			return list, its
 
+		if self.tree:
+			ownit = [self.tree.get_emerge_it()]
+		else:
+			ownit = []
+
 		# oneshot-queue
 		if self.oneshotmerge:
 			# prepare package-list for oneshot
 			list, its = prepare(self.oneshotmerge)
+			if not self.mergequeue :# the other one does not exist - remove completely
+				its = ownit
 			
 			s = system.get_oneshot_option()
 			if not force: s += system.get_pretend_option()
@@ -549,6 +555,8 @@
 		if self.mergequeue:
 			# prepare package-list
 			list, its = prepare(self.mergequeue)
+			if not self.oneshotmerge: # the other one does not exist - remove completely
+				its = ownit
 
 			s = []
 			if not force: s = system.get_pretend_option()
@@ -573,8 +581,13 @@
 		if not force: s += system.get_pretend_option()
 		if options is not None: s += options
 		
-		self.doEmerge(s,list, [self.unmergeIt], caller = self.unmerge)
+		if self.tree:
+			it = [self.tree.get_unmerge_it()]
+		else:
+			it = []
 
+		self.doEmerge(s,list, it, caller = self.unmerge)
+
 	def update_world(self, force = False, newuse = False, deep = False, options = None):
 		"""Does an update world. newuse and deep are the arguments handed to emerge.
 
@@ -594,8 +607,13 @@
 		if not force: opts += system.get_pretend_option()
 		if options is not None: opts += options
 
-		self.doEmerge(opts, ["world"], [self.emergeIt], caller = self.update_world)
+		if self.tree:
+			it = [self.tree.get_update_it()]
+		else:
+			it = []
 
+		self.doEmerge(opts, ["world"], it, caller = self.update_world)
+
 	def sync (self, command = None):
 		"""Calls "emerge --sync".
 		
@@ -677,7 +695,7 @@
 		@param removeNewFlags: True if new flags should be removed; False otherwise. Default: True.
 		@type removeNewFlags: boolean"""
 		
-		if self.tree.iter_has_parent(it): # NEVER remove our top stuff
+		if self.tree.iter_has_parent(it):
 			cpv = self.tree.get_value(it, self.tree.get_cpv_column())
 			if self.tree.is_in_emerge(it): # Emerge
 				del self.iters[cpv]
@@ -698,10 +716,10 @@
 					flags.remove_new_masked(cpv)
 					flags.remove_new_testing(cpv)
 			
-			else: # in Unmerge
+			elif self.tree.is_in_unmerge(it): # in Unmerge
 				self.unmergequeue.remove(cpv)
 			
-			self.tree.remove(it)
+		self.tree.remove(it)
 
 	def is_empty (self):
 		"""Checks whether the current queue is empty and not working. Therefore it looks, whether the queues are empty,
=== portato/gui/templates/portato.glade
==================================================================
--- portato/gui/templates/portato.glade	(revision 636)
+++ portato/gui/templates/portato.glade	(patch 0.8.9.1 level 1)
@@ -86,9 +86,10 @@
                     <child>
                       <widget class="GtkImageMenuItem" id="emergeItem">
                         <property name="visible">True</property>
-                        <property name="label" translatable="yes">E_merge</property>
+                        <property name="label" translatable="yes">_Install</property>
                         <property name="use_underline">True</property>
-                        <signal name="activate" handler="cb_emerge_clicked"/>
+                        <signal name="activate" handler="cb_package_emerge_clicked"/>
+                        <accelerator key="plus" modifiers="GDK_CONTROL_MASK" signal="activate"/>
                         <child internal-child="image">
                           <widget class="GtkImage" id="menu-item-image9">
                             <property name="visible">True</property>
@@ -101,8 +102,10 @@
                     <child>
                       <widget class="GtkImageMenuItem" id="unmergeItem">
                         <property name="visible">True</property>
-                        <property name="label" translatable="yes">_Unmerge</property>
+                        <property name="label" translatable="yes">_Uninstall</property>
                         <property name="use_underline">True</property>
+                        <signal name="activate" handler="cb_package_unmerge_clicked"/>
+                        <accelerator key="minus" modifiers="GDK_CONTROL_MASK" signal="activate"/>
                         <child internal-child="image">
                           <widget class="GtkImage" id="menu-item-image10">
                             <property name="visible">True</property>
@@ -133,7 +136,7 @@
                       <widget class="GtkCheckMenuItem" id="showInstalledItem">
                         <property name="visible">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="label" translatable="yes">Show Only _Installed Packages</property>
+                        <property name="label" translatable="yes">Show _Only Installed Packages</property>
                         <property name="use_underline">True</property>
                         <signal name="toggled" handler="cb_show_installed_toggled"/>
                         <accelerator key="i" modifiers="GDK_CONTROL_MASK" signal="activate"/>
@@ -452,82 +455,88 @@
                     <property name="visible">True</property>
                     <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
                     <child>
-                      <widget class="GtkToolbar" id="packageTB">
+                      <widget class="GtkHBox" id="hbox5">
                         <property name="visible">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="icon_size">GTK_ICON_SIZE_BUTTON</property>
-                        <property name="icon_size_set">True</property>
+                        <property name="spacing">5</property>
                         <child>
-                          <widget class="GtkToolButton" id="pkgEmergeBtn">
+                          <widget class="GtkHBox" id="packageHB">
                             <property name="visible">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">Add to Emerge Queue</property>
-                            <property name="stock_id">gtk-add</property>
-                            <signal name="clicked" handler="cb_package_emerge_clicked"/>
+                            <property name="spacing">4</property>
+                            <property name="homogeneous">True</property>
+                            <child>
+                              <widget class="GtkLabel" id="nameLabel">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="label" translatable="yes">label</property>
+                              </widget>
+                            </child>
+                            <child>
+                              <widget class="GtkComboBox" id="versionCombo">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                              </widget>
+                              <packing>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
                           </widget>
-                          <packing>
-                            <property name="expand">False</property>
-                          </packing>
                         </child>
                         <child>
-                          <widget class="GtkToolButton" id="pkgUnmergeBtn">
+                          <widget class="GtkToolbar" id="packageTB">
                             <property name="visible">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">Remove from Emerge Queue</property>
-                            <property name="stock_id">gtk-remove</property>
-                            <signal name="clicked" handler="cb_package_unmerge_clicked"/>
+                            <property name="icon_size">GTK_ICON_SIZE_BUTTON</property>
+                            <property name="icon_size_set">True</property>
+                            <child>
+                              <widget class="GtkToolButton" id="pkgEmergeBtn">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="tooltip" translatable="yes">Install onto system</property>
+                                <property name="label" translatable="yes">_Install</property>
+                                <property name="use_underline">True</property>
+                                <property name="stock_id">gtk-add</property>
+                                <signal name="clicked" handler="cb_package_emerge_clicked"/>
+                              </widget>
+                            </child>
+                            <child>
+                              <widget class="GtkToolButton" id="pkgUnmergeBtn">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="tooltip" translatable="yes">Uninstall from system</property>
+                                <property name="label" translatable="yes">_Uninstall</property>
+                                <property name="use_underline">True</property>
+                                <property name="stock_id">gtk-remove</property>
+                                <signal name="clicked" handler="cb_package_unmerge_clicked"/>
+                              </widget>
+                            </child>
+                            <child>
+                              <widget class="GtkToolButton" id="pkgRevertBtn">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="tooltip" translatable="yes">Revert changes</property>
+                                <property name="label" translatable="yes">Re_vert</property>
+                                <property name="use_underline">True</property>
+                                <property name="stock_id">gtk-undo</property>
+                                <signal name="clicked" handler="cb_package_revert_clicked"/>
+                              </widget>
+                            </child>
                           </widget>
                           <packing>
-                            <property name="expand">False</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <widget class="GtkToolButton" id="pkgRevertBtn">
-                            <property name="visible">True</property>
-                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">Revert changes</property>
-                            <property name="stock_id">gtk-undo</property>
-                            <signal name="clicked" handler="cb_package_revert_clicked"/>
-                          </widget>
-                          <packing>
-                            <property name="expand">False</property>
-                          </packing>
-                        </child>
-                      </widget>
-                      <packing>
-                        <property name="expand">False</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <widget class="GtkHBox" id="packageHB">
-                        <property name="visible">True</property>
-                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="homogeneous">True</property>
-                        <child>
-                          <widget class="GtkLabel" id="nameLabel">
-                            <property name="visible">True</property>
-                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">label</property>
-                          </widget>
-                        </child>
-                        <child>
-                          <widget class="GtkComboBox" id="versionCombo">
-                            <property name="visible">True</property>
-                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                          </widget>
-                          <packing>
                             <property name="position">1</property>
                           </packing>
                         </child>
                       </widget>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="position">1</property>
+                        <property name="padding">5</property>
                       </packing>
                     </child>
                     <child>
                       <widget class="GtkNotebook" id="packageNotebook">
                         <property name="visible">True</property>
+                        <property name="tab_pos">GTK_POS_BOTTOM</property>
                         <child>
                           <widget class="GtkEventBox" id="generalEB">
                             <property name="visible">True</property>
@@ -866,7 +875,7 @@
                           <widget class="GtkLabel" id="label2">
                             <property name="visible">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">F_iles</property>
+                            <property name="label" translatable="yes">Fi_les</property>
                             <property name="use_underline">True</property>
                           </widget>
                           <packing>
@@ -877,7 +886,7 @@
                         </child>
                       </widget>
                       <packing>
-                        <property name="position">2</property>
+                        <property name="position">1</property>
                       </packing>
                     </child>
                   </widget>
@@ -891,40 +900,22 @@
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
                     <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                    <property name="tab_pos">GTK_POS_BOTTOM</property>
                     <child>
                       <widget class="GtkVBox" id="queueVB">
                         <property name="visible">True</property>
                         <child>
-                          <widget class="GtkScrolledWindow" id="queueScroll">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-                            <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-                            <child>
-                              <widget class="GtkTreeView" id="queueList">
-                                <property name="visible">True</property>
-                                <property name="has_tooltip">True</property>
-                                <property name="headers_visible">False</property>
-                                <property name="enable_search">False</property>
-                                <signal name="button_press_event" handler="cb_right_click"/>
-                                <signal name="query_tooltip" handler="cb_queue_tooltip_queried"/>
-                                <signal name="row_activated" handler="cb_row_activated"/>
-                              </widget>
-                            </child>
-                          </widget>
-                        </child>
-                        <child>
                           <widget class="GtkHButtonBox" id="queueBB">
                             <property name="visible">True</property>
                             <property name="border_width">5</property>
                             <property name="homogeneous">True</property>
                             <property name="layout_style">GTK_BUTTONBOX_SPREAD</property>
                             <child>
-                              <widget class="GtkButton" id="emergeBtn">
+                              <widget class="GtkButton" id="executeBtn">
                                 <property name="visible">True</property>
-                                <property name="tooltip" translatable="yes">Install all packages in the "Emerge Queue"</property>
+                                <property name="tooltip" translatable="yes">Execute the current selected queue</property>
                                 <property name="response_id">0</property>
-                                <signal name="clicked" handler="cb_emerge_clicked"/>
+                                <signal name="clicked" handler="cb_execute_clicked"/>
                                 <child>
                                   <widget class="GtkHBox" id="hbox7">
                                     <property name="visible">True</property>
@@ -933,7 +924,7 @@
                                       <widget class="GtkImage" id="image6">
                                         <property name="visible">True</property>
                                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                                        <property name="stock">gtk-add</property>
+                                        <property name="stock">gtk-execute</property>
                                       </widget>
                                     </child>
                                     <child>
@@ -941,7 +932,7 @@
                                         <property name="visible">True</property>
                                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
                                         <property name="xalign">0</property>
-                                        <property name="label" translatable="yes">E_merge</property>
+                                        <property name="label" translatable="yes">E_xecute</property>
                                         <property name="use_underline">True</property>
                                         <property name="single_line_mode">True</property>
                                       </widget>
@@ -954,43 +945,6 @@
                               </widget>
                             </child>
                             <child>
-                              <widget class="GtkButton" id="unmergeBtn">
-                                <property name="visible">True</property>
-                                <property name="tooltip" translatable="yes">Deinstall all packages in the "Unmerge Queue"</property>
-                                <property name="response_id">0</property>
-                                <signal name="clicked" handler="cb_unmerge_clicked"/>
-                                <child>
-                                  <widget class="GtkHBox" id="hbox8">
-                                    <property name="visible">True</property>
-                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                                    <child>
-                                      <widget class="GtkImage" id="image7">
-                                        <property name="visible">True</property>
-                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                                        <property name="stock">gtk-remove</property>
-                                      </widget>
-                                    </child>
-                                    <child>
-                                      <widget class="GtkLabel" id="label13">
-                                        <property name="visible">True</property>
-                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                                        <property name="xalign">0</property>
-                                        <property name="label" translatable="yes">_Unmerge</property>
-                                        <property name="use_underline">True</property>
-                                        <property name="single_line_mode">True</property>
-                                      </widget>
-                                      <packing>
-                                        <property name="position">1</property>
-                                      </packing>
-                                    </child>
-                                  </widget>
-                                </child>
-                              </widget>
-                              <packing>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                            <child>
                               <widget class="GtkButton" id="updateBtn">
                                 <property name="visible">True</property>
                                 <property name="tooltip" translatable="yes">Calculate the packages which will be installed during an "update world"</property>
@@ -1000,7 +954,7 @@
                                 <signal name="clicked" handler="cb_update_clicked"/>
                               </widget>
                               <packing>
-                                <property name="position">2</property>
+                                <property name="position">1</property>
                               </packing>
                             </child>
                             <child>
@@ -1013,13 +967,34 @@
                                 <signal name="clicked" handler="cb_remove_clicked"/>
                               </widget>
                               <packing>
-                                <property name="position">3</property>
+                                <property name="position">2</property>
                               </packing>
                             </child>
                           </widget>
                           <packing>
                             <property name="expand">False</property>
                             <property name="fill">False</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <widget class="GtkScrolledWindow" id="queueScroll">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                            <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                            <child>
+                              <widget class="GtkTreeView" id="queueList">
+                                <property name="visible">True</property>
+                                <property name="has_tooltip">True</property>
+                                <property name="headers_visible">False</property>
+                                <property name="enable_search">False</property>
+                                <signal name="button_press_event" handler="cb_right_click"/>
+                                <signal name="query_tooltip" handler="cb_queue_tooltip_queried"/>
+                                <signal name="row_activated" handler="cb_row_activated"/>
+                              </widget>
+                            </child>
+                          </widget>
+                          <packing>
                             <property name="position">1</property>
                           </packing>
                         </child>
@@ -1669,83 +1644,231 @@
                     <property name="visible">True</property>
                     <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
                     <child>
-                      <widget class="GtkCheckButton" id="titleUpdateCheck">
+                      <widget class="GtkFrame" id="visualGeneralFrame">
                         <property name="visible">True</property>
-                        <property name="can_focus">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="label" translatable="yes">Show emerge progress in title - similar to the console tab</property>
-                        <property name="response_id">0</property>
-                        <property name="draw_indicator">True</property>
+                        <property name="label_xalign">0</property>
+                        <child>
+                          <widget class="GtkAlignment" id="alignment8">
+                            <property name="visible">True</property>
+                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                            <property name="left_padding">12</property>
+                            <child>
+                              <widget class="GtkVBox" id="vbox6">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <child>
+                                  <widget class="GtkCheckButton" id="systrayCheck">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="label" translatable="yes">Enable systray</property>
+                                    <property name="response_id">0</property>
+                                    <property name="draw_indicator">True</property>
+                                  </widget>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <widget class="GtkCheckButton" id="titleUpdateCheck">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="label" translatable="yes">Show emerge progress in title - similar to the console tab</property>
+                                    <property name="response_id">0</property>
+                                    <property name="draw_indicator">True</property>
+                                  </widget>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <widget class="GtkCheckButton" id="minimizeCheck">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="label" translatable="yes">Hide on minimization (only if systray is enabled)</property>
+                                    <property name="response_id">0</property>
+                                    <property name="draw_indicator">True</property>
+                                  </widget>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="position">2</property>
+                                  </packing>
+                                </child>
+                              </widget>
+                            </child>
+                          </widget>
+                        </child>
+                        <child>
+                          <widget class="GtkLabel" id="label3">
+                            <property name="visible">True</property>
+                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                            <property name="label" translatable="yes">&lt;b&gt;General Options&lt;/b&gt;</property>
+                            <property name="use_markup">True</property>
+                          </widget>
+                          <packing>
+                            <property name="type">label_item</property>
+                          </packing>
+                        </child>
                       </widget>
                       <packing>
                         <property name="expand">False</property>
                       </packing>
                     </child>
                     <child>
-                      <placeholder/>
-                    </child>
-                    <child>
-                      <widget class="GtkCheckButton" id="systrayCheck">
+                      <widget class="GtkFrame" id="consoleFrame">
                         <property name="visible">True</property>
-                        <property name="can_focus">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="label" translatable="yes">Enable systray</property>
-                        <property name="response_id">0</property>
-                        <property name="draw_indicator">True</property>
+                        <property name="label_xalign">0</property>
+                        <child>
+                          <widget class="GtkAlignment" id="alignment9">
+                            <property name="visible">True</property>
+                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                            <property name="bottom_padding">5</property>
+                            <property name="left_padding">12</property>
+                            <property name="right_padding">5</property>
+                            <child>
+                              <widget class="GtkHBox" id="hbox1">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="spacing">5</property>
+                                <child>
+                                  <widget class="GtkLabel" id="label11">
+                                    <property name="visible">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="xalign">0</property>
+                                    <property name="label" translatable="yes">Console Font</property>
+                                  </widget>
+                                </child>
+                                <child>
+                                  <widget class="GtkFontButton" id="consoleFontBtn">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="receives_default">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="response_id">0</property>
+                                    <property name="title" translatable="yes">Chose a console font</property>
+                                    <property name="use_font">True</property>
+                                    <property name="use_size">True</property>
+                                    <property name="show_style">False</property>
+                                  </widget>
+                                  <packing>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </widget>
+                            </child>
+                          </widget>
+                        </child>
+                        <child>
+                          <widget class="GtkLabel" id="label8">
+                            <property name="visible">True</property>
+                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                            <property name="label" translatable="yes">&lt;b&gt;Console Options&lt;/b&gt;</property>
+                            <property name="use_markup">True</property>
+                          </widget>
+                          <packing>
+                            <property name="type">label_item</property>
+                          </packing>
+                        </child>
                       </widget>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="position">2</property>
+                        <property name="position">1</property>
                       </packing>
                     </child>
                     <child>
-                      <widget class="GtkCheckButton" id="minimizeCheck">
+                      <widget class="GtkFrame" id="tabFrame">
                         <property name="visible">True</property>
-                        <property name="can_focus">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="label" translatable="yes">Hide on minimization (only if systray is enabled)</property>
-                        <property name="response_id">0</property>
-                        <property name="draw_indicator">True</property>
-                      </widget>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="position">3</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <widget class="GtkHBox" id="hbox1">
-                        <property name="visible">True</property>
-                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="spacing">5</property>
+                        <property name="label_xalign">0</property>
                         <child>
-                          <widget class="GtkLabel" id="label11">
+                          <widget class="GtkAlignment" id="alignment10">
                             <property name="visible">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="xalign">0</property>
-                            <property name="label" translatable="yes">Console Font</property>
+                            <property name="bottom_padding">5</property>
+                            <property name="left_padding">12</property>
+                            <property name="right_padding">5</property>
+                            <child>
+                              <widget class="GtkVBox" id="vbox7">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="spacing">5</property>
+                                <child>
+                                  <widget class="GtkHBox" id="hbox2">
+                                    <property name="visible">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="homogeneous">True</property>
+                                    <child>
+                                      <widget class="GtkLabel" id="label15">
+                                        <property name="visible">True</property>
+                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                        <property name="xalign">0</property>
+                                        <property name="label" translatable="yes">Package Tabs</property>
+                                      </widget>
+                                    </child>
+                                    <child>
+                                      <widget class="GtkComboBox" id="packageTabCombo">
+                                        <property name="visible">True</property>
+                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                        <property name="items" translatable="yes"></property>
+                                      </widget>
+                                      <packing>
+                                        <property name="position">1</property>
+                                      </packing>
+                                    </child>
+                                  </widget>
+                                </child>
+                                <child>
+                                  <widget class="GtkHBox" id="hbox4">
+                                    <property name="visible">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="homogeneous">True</property>
+                                    <child>
+                                      <widget class="GtkLabel" id="label21">
+                                        <property name="visible">True</property>
+                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                        <property name="xalign">0</property>
+                                        <property name="label" translatable="yes">System Tabs</property>
+                                      </widget>
+                                    </child>
+                                    <child>
+                                      <widget class="GtkComboBox" id="systemTabCombo">
+                                        <property name="visible">True</property>
+                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                        <property name="items" translatable="yes"></property>
+                                      </widget>
+                                      <packing>
+                                        <property name="position">1</property>
+                                      </packing>
+                                    </child>
+                                  </widget>
+                                  <packing>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </widget>
+                            </child>
                           </widget>
                         </child>
                         <child>
-                          <widget class="GtkFontButton" id="consoleFontBtn">
+                          <widget class="GtkLabel" id="label9">
                             <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="response_id">0</property>
-                            <property name="title" translatable="yes">Chose a console font</property>
-                            <property name="use_font">True</property>
-                            <property name="use_size">True</property>
-                            <property name="show_style">False</property>
+                            <property name="label" translatable="yes">&lt;b&gt;Tab Options&lt;/b&gt;</property>
+                            <property name="use_markup">True</property>
                           </widget>
                           <packing>
-                            <property name="position">1</property>
+                            <property name="type">label_item</property>
                           </packing>
                         </child>
                       </widget>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="padding">5</property>
-                        <property name="position">4</property>
+                        <property name="position">2</property>
                       </packing>
                     </child>
                   </widget>
=== portato/plistener.py
==================================================================
--- portato/plistener.py	(revision 636)
+++ portato/plistener.py	(patch 0.8.9.1 level 1)
@@ -93,7 +93,7 @@
 			try:
 				import shm_wrapper as shm
 			except ImportError:
-				from portato.shm import shm_wrapper as shm
+				from portato._shm import shm_wrapper as shm
 
 			self._mem = shm.SharedMemoryHandle(mem)
 			self._sig = shm.SemaphoreHandle(sig)
=== etc/portato.cfg
==================================================================
--- etc/portato.cfg	(revision 636)
+++ etc/portato.cfg	(patch 0.8.9.1 level 1)
@@ -73,4 +73,13 @@
 ; sets the font of the console - string values
 consolefont = Monospace 11
 
+; sets the position of the tabs of the two notebooks
+; allowed positions:
+;						- 1 : top
+;						- 2 : bottom
+;						- 3 : left
+;						- 4 : right
+packagetabpos = 2
+systemtabpos = 2
+
 # vim:ts=4:sw=4:ft=cfg
=== shm/__init__.py
==================================================================
=== shm/shm_wrapper.py
==================================================================
--- shm/shm_wrapper.py	(revision 636)
+++ shm/shm_wrapper.py	(patch 0.8.9.1 level 1)
@@ -1,301 +0,0 @@
-# shm_wrapper - A wrapper for the shm module which provides access
-# to System V shared memory and semaphores on *nix systems.
-#
-# Copyright (c) 2007 by Philip Semanchuk
-# Contact info at http://NikitaTheSpider.com/
-#
-# This program is free software; you can redistribute it and/or
-# modify it under the terms of the GNU General Public License
-# as published by the Free Software Foundation; either version 2
-# of the License, or (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-
-# Python modules
-import random
-import sys
-
-# Third party modules
-import shm
-
-r"""shm_wrapper - A wrapper for the shm module which provides access
-to System V shared memory and semaphores on *nix systems.
-
-The module shm is a Python wrapper around system functions like shmget. This
-module in turn offers higher-level, more Pythonic access to shared memory and
-semaphores.
-
-Full documentation is online at http://NikitaTheSpider.com/python/shm/
-
-"""
-
-def create_memory(size, permissions = 0666, InitCharacter = ' '):
-    """ Creates a new shared memory segment. One can destroy it either by calling the
-    module-level method remove_memory() or by calling the .remove() method of a handle to
-    said memory.
-    """
-    memory = None
-
-    # I create the memory using a randomly-generated key. I keep trying until I find one
-    # that works or until I hit an error.
-    while not memory:
-        key = random.randint(1, sys.maxint - 1)
-        try:
-            memory = shm.create_memory(key, size, permissions)
-        except shm.error, ExtraData:
-            if shm.memory_haskey(key):
-                # Oops, bad luck, the key exists. I'll try another. I can't call
-                # memory_haskey() before calling create_memory() because that would create
-                # a race condition where I could verify a key is not used but then another
-                # process could call create_memory() with that key before I got a chance to
-                # do so.
-                pass
-            else:
-                # Uh-oh, something fundamental is wrong.
-                raise shm.error, ExtraData
-
-    # Here I implicitly discard the memory handle object returned to me by shm and instead
-    # return my own handle to the shared memory segment.
-    memory = SharedMemoryHandle(key)
-
-    memory.write(InitCharacter[0] * memory.size)
-
-    return memory
-
-
-def remove_memory(key):
-    # Destroys the shared memory segment. Raises KeyError if the key doesn't exist.
-    shm.remove_memory(shm.getshmid(key))
-
-
-class SharedMemoryHandle(object):
-    def __init__(self, key):
-        self._MemoryHandle = None
-
-        # getshmid will raise a KeyError if there's no memory segment with this key.
-        shmid = shm.getshmid(key)
-        self._MemoryHandle = shm.memory(shmid)
-
-
-    def __del__(self):
-        if self._MemoryHandle:
-            # This will raise an error if the memory has been destroyed.
-            try:
-                if self._MemoryHandle.attached:
-                    self._MemoryHandle.detach()
-            except shm.error:
-                pass
-
-
-    def remove(self):
-        if self._MemoryHandle:
-            if self._MemoryHandle.attached:
-                self._MemoryHandle.detach()
-
-            shm.remove_memory(self._MemoryHandle.shmid)
-            self._MemoryHandle = None
-
-
-    def read(self, NumberOfBytes = 0, offset = 0):
-        if not self._MemoryHandle.attached:
-            self._MemoryHandle.attach()
-
-        if not NumberOfBytes:
-            NumberOfBytes = self._MemoryHandle.size - offset
-
-        return self._MemoryHandle.read(NumberOfBytes, offset)
-
-
-    def write(self, s, offset = 0):
-        if not self._MemoryHandle.attached:
-            self._MemoryHandle.attach()
-
-        self._MemoryHandle.write(s, offset)
-
-
-    # Properties start here ================================================================
-
-    # key
-    def __get_key(self): return self._MemoryHandle.key
-    def __set_key(self, foo): raise AttributeError
-    key = property(__get_key, __set_key)
-
-    # size of segment
-    def __get_size(self): return self._MemoryHandle.size
-    def __set_size(self, foo): raise AttributeError
-    size = property(__get_size, __set_size)
-
-    # permissions
-    def __get_permissions(self): return self._MemoryHandle.perm
-    def __set_permissions(self, permissions): self._MemoryHandle.setperm(permissions)
-    permissions = property(__get_permissions, __set_permissions)
-
-    # The number of processes currently attached to this memory segment.
-    def __get_number_attached(self): return self._MemoryHandle.nattch
-    def __set_number_attached(self, foo): raise AttributeError
-    number_attached = property(__get_number_attached, __set_number_attached)
-
-    # segment's uid
-    def __get_uid(self): return self._MemoryHandle.uid
-    def __set_uid(self, uid): self._MemoryHandle.setuid(uid)
-    uid = property(__get_uid, __set_uid)
-
-    # segment's gid
-    def __get_gid(self): return self._MemoryHandle.gid
-    def __set_gid(self, gid): self._MemoryHandle.setgid(gid)
-    gid = property(__get_gid, __set_gid)
-
-    # Creator uid (read-only)
-    def __get_creator_uid(self): return self._MemoryHandle.cuid
-    def __set_creator_uid(self, foo): raise AttributeError
-    creator_uid = property(__get_creator_uid, __set_creator_uid)
-
-    # Creator gid (read-only)
-    def __get_creator_gid(self): return self._MemoryHandle.cgid
-    def __set_creator_gid(self, foo): raise AttributeError
-    creator_gid = property(__get_creator_gid, __set_creator_gid)
-
-    # Creator pid (read-only)
-    def __get_creator_pid(self): return self._MemoryHandle.cpid
-    def __set_creator_pid(self, foo): raise AttributeError
-    creator_pid = property(__get_creator_pid, __set_creator_pid)
-
-    # pid of last process to operate on this segment (read-only)
-    def __get_last_pid(self): return self._MemoryHandle.lpid
-    def __set_last_pid(self, foo): raise AttributeError
-    last_pid = property(__get_last_pid, __set_last_pid)
-
-
-
-def create_semaphore(InitialValue = 1, permissions = 0666):
-    """ Creates a new semaphore. One can destroy it either by calling the
-    module-level method remove_semaphore() or by calling the .remove() method of a
-    handle to said semaphore.
-    """
-    semaphore = None
-
-    # I create the semaphore using a randomly-generated key. I keep trying until I find one
-    # that works or until I hit an error.
-    while not semaphore:
-        key = random.randint(1, sys.maxint - 1)
-        try:
-            semaphore = shm.create_semaphore(key, InitialValue, permissions)
-        except shm.error, ExtraData:
-            if shm.semaphore_haskey(key):
-                # Oops, bad luck, the key exists. I'll try another. I can't call
-                # memory_haskey() before calling create_semaphore() because that would create
-                # a race condition where I could verify a key is not used but then another
-                # process could call create_semaphore() with that key before I got a chance to
-                # do so.
-                pass
-            else:
-                # Uh-oh, something fundamental is wrong.
-                raise ExtraData
-
-    # Here I implicitly discard the semaphore object returned to me by shm and instead
-    # return my own handle to the semaphore.
-    return SemaphoreHandle(key)
-
-
-def remove_semaphore(key):
-    # Destroys the semaphore. Raises KeyError if the key doesn't exist.
-    shm.remove_semaphore(shm.getsemid(key))
-
-
-class SemaphoreHandle(object):
-    def __init__(self, key):
-        # getsemid will raise a KeyError if appropriate.
-        self._SemaphoreHandle = shm.semaphore(shm.getsemid(key))
-
-
-    def remove(self):
-        shm.remove_semaphore(self._SemaphoreHandle.semid)
-        self._SemaphoreHandle = None
-
-
-    def P(self):
-        # P = prolaag = probeer te verlagen (try to decrease)
-        self._SemaphoreHandle.P()
-
-
-    def V(self):
-        # V = verhoog (increase)
-        self._SemaphoreHandle.V()
-
-
-    def Z(self):
-        # Z = block until Zee semaphore is Zero
-        self._SemaphoreHandle.Z()
-
-
-    # Properties start here ================================================================
-    def __get_key(self): return self._SemaphoreHandle.key
-    def __set_key(self, foo): raise AttributeError
-    key = property(__get_key, __set_key)
-
-
-    def __get_value(self): return self._SemaphoreHandle.val
-    def __set_value(self, value): self._semaphore.setval(value)
-    value = property(__get_value, __set_value)
-
-
-    def __get_WaitingForZero(self): return self._SemaphoreHandle.zcnt
-    def __set_WaitingForZero(self, foo): raise AttributeError
-    WaitingForZero = property(__get_WaitingForZero, __set_WaitingForZero)
-
-
-    def __get_WaitingForNonZero(self): return self._SemaphoreHandle.ncnt
-    def __set_WaitingForNonZero(self, foo): raise AttributeError
-    WaitingForNonZero = property(__get_WaitingForNonZero, __set_WaitingForNonZero)
-
-
-    def __get_blocking(self): return self._SemaphoreHandle.blocking
-    def __set_blocking(self, block): self._SemaphoreHandle.setblocking(block)
-    blocking = property(__get_blocking, __set_blocking)
-
-
-    def __get_undo(self): raise AttributeError
-    def __set_undo(self, undo): self._SemaphoreHandle.setundo(undo)
-    undo = property(__get_undo, __set_undo)
-
-
-    # segment's uid
-    def __get_uid(self): return self._SemaphoreHandle.uid
-    def __set_uid(self, uid): self._SemaphoreHandle.setuid(uid)
-    uid = property(__get_uid, __set_uid)
-
-
-    # segment's gid
-    def __get_gid(self): return self._SemaphoreHandle.gid
-    def __set_gid(self, gid): self._SemaphoreHandle.setgid(gid)
-    gid = property(__get_gid, __set_gid)
-
-
-    # Creator uid (read-only)
-    def __get_creator_uid(self): return self._SemaphoreHandle.cuid
-    def __set_creator_uid(self, foo): raise AttributeError
-    creator_uid = property(__get_creator_uid, __set_creator_uid)
-
-
-    # Creator gid (read-only)
-    def __get_creator_gid(self): return self._SemaphoreHandle.cgid
-    def __set_creator_gid(self, foo): raise AttributeError
-    creator_gid = property(__get_creator_gid, __set_creator_gid)
-
-
-    # Creator pid -- since semaphores have a lot of the same properties as memory
-    # objects, one would expect creator PID to be exposed here, but it isn't
-    # made available by the system (true AFAICT for BSDs, OS X and Solaris).
-
-
-    # pid of last process to operate on this segment (read-only)
-    def __get_last_pid(self): return self._SemaphoreHandle.lpid
-    def __set_last_pid(self, foo): raise AttributeError
-    last_pid = property(__get_last_pid, __set_last_pid)
=== shm/shmmodule.c
==================================================================
--- shm/shmmodule.c	(revision 636)
+++ shm/shmmodule.c	(patch 0.8.9.1 level 1)
@@ -1,1396 +0,0 @@
-/****************************************************************************
- *
- * shmmodule.c Copyright 1997, 1998 by INRIA. All rights reserved.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY WARRANTIES, EXPRESS OR IMPLIED,
- * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
- * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- *
- * IN NO EVENT SHALL THE INRIA OR THE AUTHORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES,
- * INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
- * LOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION, HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT,
- * INCLUDING NEGLIGENCE OR OTHERWISE, ARISING IN ANY WAY OUT OF THE USE OF
- * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- ***************************************************************************/
-
-/* Python Shared Memory module 
-   Written by Vladimir Marangozov  
-   Adopted by Philip Semanchuk 
-
-  This module provides an interface to System V shared memory IPC.
-
-  Version history:
-  - 1.0 (sometime in the 1990s) - Released by Mr. Marangozov
-  - 1.1 (Feb 2007) - Released by me, Philip Semanchuk. Fixes a few bugs (including some 
-        memory leaks) and adds the ability to read the blocking flag on semaphores.
-  - 1.1.1 (Mar 2007)- Updated setup.py to handle compile options for Linux users.
-  - 1.1.2 (Nov 2007) - Fixed a sprintf() format in repr to handle size_t.
-  - 1.1.3 (Nov 2007) - Changed #define of key to _key instead of __key for OS X Leopard.
-        Thanks to Bill Hart.
-  - 1.1.4 (Jan 2008) - Changed the reference to key in the ipc_perm structure to the 
-        explicit #define IPC_PERM_KEY_NAME. 
-
-  See http://NikitaTheSpider.com/python/shm/ for more thorough documentation, a more Pythonic 
-  wrapper, updates, contact info, setup.py, etc.
-
-
-  Module interface:
-
-  - shm.create_memory(int Key, int Size [,int Perm=0666]) --> object
-  - shm.create_semaphore(int Key [,int Value=1 [,int Perm=0666]]) --> object
-  - shm.error
-  - shm.ftok(string Path, int ProjId) --> int
-  - shm.getsemid(int Key) --> int
-  - shm.getshmid(int Key) --> int
-  - shm.memory(int Shmid) --> object
-  - shm.memory_haskey(int Key) --> int
-  - shm.remove_memory(int Shmid) --> None
-  - shm.remove_semaphore(int Semid) --> None
-  - shm.semaphore(int Semid) --> object
-  - shm.semaphore_haskey(int Key) --> int
-
-  Memory Objects:
-
-  + Members:
-
-    - m.addr	- attachment address in the process address space
-    - m.attached	- 0|1
-    - m.cgid	- gid of creator
-    - m.cpid	- pid of creator
-    - m.cuid	- uid of creator
-    - m.gid		- gid of owner
-    - m.key		- segment key or IPC_PRIVATE (=0)
-    - m.lpid	- pid of last shmop
-    - m.nattch	- current # of attached processes
-    - m.perm	- operation permission
-    - m.shmid	- shared memory segment id
-    - m.size	- segment size
-    - m.uid		- uid of owner
-
-  + Methods:
-
-    - m.attach([int Addr=0 [,int How=0]]) --> None
-    - m.detach() --> None
-    - m.read(int Nbytes [,int Offset=0]) --> string
-    - m.setgid(int Gid) --> None
-    - m.setperm(int Perm) --> None
-    - m.setuid(int Uid) --> None
-    - m.write(string Data [,int Offset=0]) --> None
-
-  Semaphore Objects:
-
-  + Members:
-
-    - s.cgid        - gid of creator
-    - s.cuid        - uid of creator
-    - s.gid         - gid of owner
-    - s.key         - semaphore key or IPC_PRIVATE (=0)
-    - s.lpid        - pid of last semop
-    - s.ncnt        - current # of processes waiting for s.val > 0
-    - s.perm        - operation permission
-    - s.semid       - semaphore id
-    - s.uid         - uid of owner
-    - s.val         - value of the semaphore counter
-    - s.zcnt        - current # of processes waiting for s.val == 0
-    - s.blocking    - whether or not the semaphore is in blocking mode
-
-  + Methods:
-
-    - s.P() --> None		- blocks if s.val == 0; decrements s.val
-    - s.V() --> None		- increments s.val
-    - s.Z() --> None		- blocks until s.val == 0
-    - s.setblocking(0|1) --> None
-    - s.setgid(int Gid) --> None
-    - s.setperm(int Perm) --> None
-    - s.setuid(int Uid) --> None
-    - s.setundo(0|1) --> None
-    - s.setval(int Value) --> None
-
-*/
-
-/* ------------------------------------------------------------------------- */
-#include "Python.h"
-#include "structmember.h"
-
-/* v1.1 - added */
-#ifdef __FreeBSD__
-#include <machine/param.h>  /* for system definition of PAGE_SIZE */
-#endif
-
-#include <sys/types.h>
-#include <sys/ipc.h>		/* for system's IPC_xxx definitions */
-#include <sys/shm.h>		/* for shmget, shmat, shmdt, shmctl */
-#include <sys/sem.h>		/* for semget, semctl, semop */
-
-/* v1.1.4 - The name of this member varies and is sniffed out by setup.py. */
-#if defined(ZERO_UNDERSCORE_KEY)
-#define IPC_PERM_KEY_NAME   key
-#elif defined(ONE_UNDERSCORE_KEY)
-#define IPC_PERM_KEY_NAME  _key
-#elif defined(TWO_UNDERSCORE_KEY)
-#define IPC_PERM_KEY_NAME __key
-#endif
-
-/*
--- Exception type for errors detected by this module.
-*/
-
-static PyObject *PyShm_Error;
-
-/*
--- Convenience function to raise an error according to errno.
-*/
-
-static PyObject *
-PyShm_Err(void)
-{
-    return PyErr_SetFromErrno(PyShm_Error);
-}
-
-/*
--- The object holding a shared memory segment
-*/
-
-typedef struct {
-    PyObject_HEAD
-    int shmid;			/* shared memory id	*/
-    int mode;			/* attachment mode	*/
-    void *addr;			/* shmseg start address	*/
-    struct shmid_ds ds;		/* data structure	*/
-} PyShmMemoryObject;
-
-staticforward PyTypeObject	PyShmMemory_Type;
-
-#define PyShmObj		PyShmMemoryObject
-#define PyShmMemory_Check(op)	((op)->ob_type == &PyShmMemory_Type)
-
-/*
--- The object holding a semaphore
-*/
-
-typedef struct {
-    PyObject_HEAD
-    int semid;			/* semaphore id		*/
-    short opflag;		/* IPC_NOWAIT, SEM_UNDO	*/
-    struct semid_ds ds;		/* data structure	*/
-} PyShmSemaphoreObject;
-
-#ifndef HAVE_UNION_SEMUN
-union semun {
-    int val;                    /* used for SETVAL only */
-    struct semid_ds *buf;       /* for IPC_STAT and IPC_SET */
-    unsigned short *array;      /* used for GETALL and SETALL */
-};
-#endif
-
-typedef union semun semctl_arg;
-
-staticforward PyTypeObject	PyShmSemaphore_Type;
-
-#define PyShmSemObj		PyShmSemaphoreObject
-#define PyShmSemaphore_Check(op) ((op)->ob_type == &PyShmSemaphore_Type)
-
-/*
--- Internal dictionaries for Python memory and semaphore objects
-*/
-
-static PyObject *shm_dict = NULL;
-static PyObject *sem_dict = NULL;
-
-/************************************************************/
-/*                       Memory Objects                     */
-/************************************************************/
-
-/* This is to check the validity of a Python memory object
-   (and to refresh its data status structure). Notably, we
-   have to check that the real memory segment it points to
-   is still in memory and hasn't changed (test its id and
-   size). It could be that the segment has been removed and
-   created again by someone else with the same key. This is
-   fine as far as the segment (1) has the same id and size,
-   and (2) is accessible via shmctl. If you have a better
-   test, you're welcome :-) */
-
-static int
-check_memory_identity(PyShmObj *o)
-{
-    int new_shmid;
-    int old_shmid = o->shmid;
-    int old_size = o->ds.shm_segsz;
-    key_t old_key = o->ds.shm_perm.IPC_PERM_KEY_NAME;
-
-    /*
-    -- 1. Try to get the segment identified by the old key (if not IPC_PRIVATE)
-    -- 2. On failure or on mismatch of the new and the old id -> fail.
-    -- 3. Try to refresh the object's status using the new id.
-    -- 4. On failure (the segment cannot be accessed) -> fail.
-    -- 5. Finaly, compare the old size and the one we got via the new id.
-    */
-    if (old_key != IPC_PRIVATE) {
-        new_shmid = shmget(old_key, 0, 0);
-        if (new_shmid != old_shmid)
-            return 0;
-    }
-    else
-        new_shmid = old_shmid;
-    if ((shmctl(new_shmid, IPC_STAT, &(o->ds)) != -1) &&
-        (old_size == o->ds.shm_segsz) &&
-	    (old_key == o->ds.shm_perm.IPC_PERM_KEY_NAME))
-        return 1;
-    return 0;
-}
-
-/* Convenience macro for updating the shared memory data status structure */
-
-#define refresh_memory_status(o)					\
-    if (!check_memory_identity(o)) {					\
-	   PyErr_SetString(PyShm_Error, "can't access shared memory segment");		\
-	   return NULL;							\
-    }
-
-/*
--- attach([,address=0 [,how=0]])
-*/
-
-/* Attach the shared memory segment to the process address space */
-
-static PyObject *
-PyShmMemory_attach(PyShmObj *self, PyObject *args)
-{
-    unsigned long address = 0;
-    int mode = 0;
-    void *addr, *old_addr;
-
-    if (!PyArg_ParseTuple(args, "|li", &address, &mode))
-	   return NULL;
-    refresh_memory_status(self);
-    /* return if already attached with the same mode to the same address */
-    if ((self->addr != NULL) && (self->mode == mode) &&
-        ((address == 0) || (self->addr == (void *)address))) {
-    	Py_INCREF(Py_None);
-    	return Py_None;
-    }
-    /* perform the attach */
-    addr = (void *)shmat(self->shmid, (void *)address, mode);
-    if (addr  == (void *)-1)
-	   return PyShm_Err();
-    old_addr = self->addr;
-    self->addr = addr;
-    self->mode = mode;
-    /* XXX - multiple attachments of the same shared memory segment
-             to different locations of the process address space is
-	     not supported. */
-    shmdt(old_addr);
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- detach()
-*/
-
-/* Detach the memory object from the process address space */
-
-static PyObject *
-PyShmMemory_detach(PyShmObj *self, PyObject *args)
-{
-    if (!PyArg_NoArgs(args))
-	   return NULL;
-    if (self->addr != NULL) {
-        refresh_memory_status(self);
-        if (shmdt(self->addr) != 0)
-            return PyShm_Err();
-        self->addr = NULL;		/* mark as detached */
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- read(int Nbytes [,int Offset=0]) --> string
-*/
-
-/* Return a string of n bytes peeked from the shared memory segment */
-
-static PyObject *
-PyShmMemory_read(PyShmObj *self, PyObject *args)
-{
-    unsigned long n, offset = 0;
-    char buf[128];
-    char *addr;
-
-    if (!PyArg_ParseTuple(args, "l|l", &n, &offset))
-	    return NULL;
-    refresh_memory_status(self);
-    if (self->addr == NULL) {
-        PyErr_SetString(PyShm_Error, "R/W operation on detached memory");
-        return NULL;
-    }
-    if ((unsigned long)self->ds.shm_segsz < (n + offset)) {
-        sprintf(buf, "read() argument%s exceed%s upper memory limit",
-            offset ? "s" : "", offset ? "" : "s");
-        PyErr_SetString(PyShm_Error, buf);
-        return NULL;
-    }
-    addr = (char *)((unsigned long)self->addr + offset);
-    return PyString_FromStringAndSize(addr, n);
-}
-
-/*
--- setgid(int Gid)
-*/
-
-static PyObject *
-PyShmMemory_setgid(PyShmObj *self, PyObject *args)
-{
-    long newgid, oldgid;
-
-    if (!PyArg_ParseTuple(args, "l", &newgid))
-	    return NULL;
-    refresh_memory_status(self);
-    oldgid = (long)self->ds.shm_perm.gid;
-    self->ds.shm_perm.gid = (gid_t)newgid;
-    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
-        self->ds.shm_perm.gid = (gid_t)oldgid;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setperm(int Perm)
-*/
-
-static PyObject *
-PyShmMemory_setperm(PyShmObj *self, PyObject *args)
-{
-    long newmode, oldmode;
-
-    if (!PyArg_ParseTuple(args, "l", &newmode))
-        return NULL;
-    refresh_memory_status(self);
-    newmode &= 0777;	/* permission bits only */
-    oldmode = (mode_t)self->ds.shm_perm.mode;
-    self->ds.shm_perm.mode ^= 0777;
-    self->ds.shm_perm.mode |= (mode_t)newmode;
-    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
-        self->ds.shm_perm.mode = (mode_t)oldmode;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setuid(int Uid)
-*/
-
-static PyObject *
-PyShmMemory_setuid(PyShmObj *self, PyObject *args)
-{
-    long newuid, olduid;
-
-    if (!PyArg_ParseTuple(args, "l", &newuid))
-        return NULL;
-    refresh_memory_status(self);
-    olduid = (long)self->ds.shm_perm.uid;
-    /* v1.1 - fixed typo that set the group id rather than the user id */
-    self->ds.shm_perm.uid = (uid_t)newuid;
-    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
-        self->ds.shm_perm.uid = (uid_t)olduid;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- write(string Data [, int Offset=0])
-*/
-
-/* Write a string to the shared memory segment. */
-
-static PyObject *
-PyShmMemory_write(PyShmObj *self, PyObject *args)
-{
-    char *data;
-    unsigned long n, offset = 0;
-    char buf[128];
-    char *addr;
-
-    if (!PyArg_ParseTuple(args, "s#|l", &data, &n, &offset))
-        return NULL;
-    refresh_memory_status(self);
-    if (self->addr == NULL) {
-        PyErr_SetString(PyShm_Error, "R/W operation on detached memory");
-        return NULL;
-    }
-    if (self->mode & SHM_RDONLY) {
-        PyErr_SetString(PyShm_Error,
-                "can't write on read-only attached memory");
-        return NULL;
-    }
-    if ((unsigned long)self->ds.shm_segsz < (n + offset)) {
-        sprintf(buf, "write() argument%s exceed%s upper memory limit",
-            offset ? "s" : "", offset ? "" : "s");
-        PyErr_SetString(PyShm_Error, buf);
-        return NULL;
-    }
-    addr = (void *)((unsigned long)self->addr + offset);
-    memcpy(addr, data, n);
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/* List of methods for shared memory objects */
-
-static PyMethodDef memory_methods[] = {
-    {"attach",	(PyCFunction)PyShmMemory_attach,	1,
-     "attach([int Addr=0 [,int How=0]]) --> None | except shm.error"},
-    {"detach",	(PyCFunction)PyShmMemory_detach,	0,
-     "detach() --> None | except shm.error"},
-    {"read",	(PyCFunction)PyShmMemory_read,		1,
-     "read(int Nbytes [,int Offset=0]) --> string | except shm.error"},
-    {"setgid",	(PyCFunction)PyShmMemory_setgid,	1,
-     "setgid(int Gid) --> None | except shm.error"},
-    {"setperm",	(PyCFunction)PyShmMemory_setperm,	1,
-     "setperm(int Perm) --> None | except shm.error"},
-    {"setuid",	(PyCFunction)PyShmMemory_setuid,	1,
-     "setuid(int Uid) --> None | except shm.error"},
-    {"write",	(PyCFunction)PyShmMemory_write,		1,
-     "write(string Data [,int Offset=0]) --> None | except shm.error"},
-    {NULL,	NULL}		/* sentinel */
-};
-
-#define OFF(x)	offsetof(PyShmMemoryObject, x)
-#define OFF1(x)	OFF(ds) + offsetof(struct shmid_ds, x)
-#define OFF2(x)	OFF1(shm_perm) + offsetof(struct ipc_perm, x)
-
-/* List of members for shared memory objects */
-
-/* Note: member types are set in the initshm function.
-   Members which need separate processing are:
-   - addr --> it is not part of the shmid_ds structure
-   - attached --> function depending on addr
-   - nattch  --> system dependent declaration in shmid_ds (unknown type)
-   - perm --> return permission (lower 9) bits only of ds.shm_perm.mode
-*/
-
-static struct memberlist memory_memberlist[] = {
-    {"cgid",	T_INT,	OFF2(cgid),		RO},	/* 0  (gid_t)  */
-    {"cpid",	T_INT,	OFF1(shm_cpid),		RO},	/* 1  (pid_t)  */
-    {"cuid",	T_INT,	OFF2(cuid),		RO},	/* 2  (uid_t)  */
-    {"key", T_INT,	OFF2(IPC_PERM_KEY_NAME),		RO},	/* 3  (key_t)  */
-    {"lpid",	T_INT,	OFF1(shm_lpid),		RO},	/* 4  (pid_t)  */
-    {"shmid",	T_INT,	OFF(shmid),		RO},	/* 5  (int)    */
-    {"size",	T_INT,	OFF1(shm_segsz),	RO},	/* 6  (int)    */
-    {"gid",	T_INT,	OFF2(gid),		RO},	/* 7  (gid_t)  */
-    {"uid",	T_INT,	OFF2(uid),		RO},	/* 8  (uid_t)  */
-    /* The following members are implemented without this table */
-    {"addr",	T_INT,	0,			RO},	/* 9  (void *) */
-    {"attached",T_INT,	0,			RO},	/* 10  (int)    */
-    {"nattch",	T_INT,	0,			RO},	/* 11 sys.dep. */
-    {"perm",	T_INT,	0,			RO},	/* 12 (mode_t) */
-    {NULL}			/* sentinel */
-};
-
-#undef OFF
-#undef OFF1
-#undef OFF2
-
-static void
-PyShmMemory_dealloc(PyShmObj *self)
-{
-    /* del shm_dict[key], ignore if it fails */
-    if (PyDict_DelItem(shm_dict, PyInt_FromLong(self->shmid)) == -1)
-        PyErr_Clear();
-    /* all references in the current process to the shared
-       memory segment are lost, so if attached, detach it.
-       XXX: This is not true when Python is embedded.
-
-    if (self->addr != NULL) {
-	shmdt(self->addr);
-    }
-    */
-    /* v1.1 - changed the reference below from PyMem_DEL to PyObject_Del.    */
-    PyObject_Del(self);
-}
-
-static PyObject *
-PyShmMemory_getattr(PyShmObj *self, char *name)
-{
-    PyObject *res;
-
-    res = Py_FindMethod(memory_methods, (PyObject *)self, name);
-    if (res != NULL)
-        return res;
-    PyErr_Clear();
-    refresh_memory_status(self);
-    if (strcmp(name, "attached") == 0)
-        return PyInt_FromLong((self->addr == NULL) ? 0 : 1);
-    if (strcmp(name, "addr") == 0) {
-        if (self->addr != NULL)
-            return PyInt_FromLong((unsigned long)self->addr);
-        else {
-            Py_INCREF(Py_None);
-            return Py_None;
-        }
-    }
-    if (strcmp(name, "nattch") == 0)
-        return PyInt_FromLong(self->ds.shm_nattch);
-    if (strcmp(name, "perm") == 0)
-        return PyInt_FromLong(self->ds.shm_perm.mode & 0777);
-    return PyMember_Get((char *)self, memory_memberlist, name);
-}
-
-static PyObject *
-PyShmMemory_repr(PyShmObj *self, char *name)
-{
-    char buf[100];
-    char buf2[20];
-
-    refresh_memory_status(self);
-    if (self->addr == NULL)
-        sprintf(buf2, "None");
-    else
-        /* v 1.1 - changed format from %lx to %p. */
-        /* v 1.1.2 - changed %u to %zu. */
-        sprintf(buf2, "0x%p", self->addr);
-    sprintf(buf, "<%s shared memory object, id=%d, size=%zu, addr=%s>",
-	    (self->addr == NULL) ? "detached" : (self->mode & SHM_RDONLY) ?
-	    "attached RO" : "attached R/W",
-	    self->shmid,
-	    self->ds.shm_segsz,
-	    buf2);
-    return PyString_FromString(buf);
-}
-
-/* Type object for shared memory objects */
-
-static PyTypeObject PyShmMemory_Type = {
-    PyObject_HEAD_INIT(&PyType_Type)
-    0,					/*ob_size*/
-    "shared memory",			/*tp_name*/
-    sizeof(PyShmObj),			/*tp_size*/
-    0,					/*tp_itemsize*/
-    /* methods */
-    (destructor)PyShmMemory_dealloc,	/*tp_dealloc*/
-    0,					/*tp_print*/
-    (getattrfunc)PyShmMemory_getattr,	/*tp_getattr*/
-    0,					/*tp_setattr*/
-    0,					/*tp_compare*/
-    (reprfunc)PyShmMemory_repr,		/*tp_repr*/
-    0,					/*tp_as_number*/
-    0,					/*tp_as_sequence*/
-    0,					/*tp_as_mapping*/
-};
-
-/************************************************************/
-/*                     Semaphore Objects                    */
-/************************************************************/
-
-/* This is to check the validity of a Python semaphore object */
-
-static int
-check_semaphore_identity(PyShmSemObj *o)
-{
-    int new_semid;
-    int old_semid = o->semid;
-    unsigned short old_nsems = o->ds.sem_nsems;
-    key_t old_key = o->ds.sem_perm.IPC_PERM_KEY_NAME;
-    semctl_arg arg;
-
-    if (old_key != IPC_PRIVATE) {
-        new_semid = semget(old_key, 0, 0);
-        if (new_semid != old_semid)
-            return 0;
-    }
-    else
-        new_semid = old_semid;
-    arg.buf = &(o->ds);
-    if ((semctl(new_semid, 0, IPC_STAT, arg) != -1) &&
-        (old_nsems == o->ds.sem_nsems) &&
-        (old_key == o->ds.sem_perm.IPC_PERM_KEY_NAME))
-        return 1;
-    return 0;
-}
-
-/* Convenience macro for updating the semaphore data status structure */
-
-#define refresh_semaphore_status(o)					\
-    if (!check_semaphore_identity(o)) {					\
-        PyErr_SetString(PyShm_Error,					\
-                "can't access semaphore");			\
-	return NULL;							\
-    }
-
-/*
--- P()
-*/
-
-static PyObject *
-PyShmSemaphore_P(PyShmSemObj *self, PyObject *args)
-{
-    struct sembuf op[1];
-    int res;
-
-    op[0].sem_num = 0;
-    op[0].sem_op = -1;
-    op[0].sem_flg = self->opflag;
-
-    if (!PyArg_NoArgs(args))
-        return NULL;
-    refresh_semaphore_status(self);
-    res = semop(self->semid, op, (size_t)1);
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- V()
-*/
-
-static PyObject *
-PyShmSemaphore_V(PyShmSemObj *self, PyObject *args)
-{
-    struct sembuf op[1];
-    int res;
-
-    op[0].sem_num = 0;
-    op[0].sem_op = 1;
-    op[0].sem_flg = self->opflag;
-
-    if (!PyArg_NoArgs(args))
-        return NULL;
-    refresh_semaphore_status(self);
-    res = semop(self->semid, op, (size_t)1);
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- Z()
-*/
-
-static PyObject *
-PyShmSemaphore_Z(PyShmSemObj *self, PyObject *args)
-{
-    struct sembuf op[1];
-    int res;
-
-    op[0].sem_num = 0;
-    op[0].sem_op = 0;
-    op[0].sem_flg = self->opflag;
-
-    if (!PyArg_NoArgs(args))
-        return NULL;
-    refresh_semaphore_status(self);
-    res = semop(self->semid, op, (size_t)1);
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setblocking(0|1)
-*/
-
-static PyObject *
-PyShmSemaphore_setblocking(PyShmSemObj *self, PyObject *args)
-{
-    int block;
-
-    if (!PyArg_ParseTuple(args, "i", &block))
-        return NULL;
-    refresh_semaphore_status(self);
-    if (block)
-        self->opflag &= ~IPC_NOWAIT;
-    else
-        self->opflag |= IPC_NOWAIT;
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setgid(int Gid)
-*/
-
-static PyObject *
-PyShmSemaphore_setgid(PyShmSemObj *self, PyObject *args)
-{
-    long newgid, oldgid;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "l", &newgid))
-        return NULL;
-    refresh_semaphore_status(self);
-    oldgid = (long)self->ds.sem_perm.gid;
-    self->ds.sem_perm.gid = (gid_t)newgid;
-    arg.buf = &(self->ds);
-    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
-        self->ds.sem_perm.gid = (gid_t)oldgid;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setperm(int Perm)
-*/
-
-static PyObject *
-PyShmSemaphore_setperm(PyShmSemObj *self, PyObject *args)
-{
-    long newmode, oldmode;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "l", &newmode))
-        return NULL;
-    refresh_semaphore_status(self);
-    newmode &= 0777;	/* permission bits only */
-    oldmode = (mode_t)self->ds.sem_perm.mode;
-    self->ds.sem_perm.mode ^= 0777;
-    self->ds.sem_perm.mode |= (mode_t)newmode;
-    arg.buf = &(self->ds);
-    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
-        self->ds.sem_perm.mode = (mode_t)oldmode;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setuid(int Uid)
-*/
-
-static PyObject *
-PyShmSemaphore_setuid(PyShmSemObj *self, PyObject *args)
-{
-    long newuid, olduid;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "l", &newuid))
-        return NULL;
-    refresh_semaphore_status(self);
-    olduid = (long)self->ds.sem_perm.uid;
-    /* v1.1 - fixed typo that set the group id rather than the user id */
-    self->ds.sem_perm.uid = (uid_t)newuid;
-    arg.buf = &(self->ds);
-    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
-        self->ds.sem_perm.uid = (uid_t)olduid;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setundo(0|1)
-*/
-
-static PyObject *
-PyShmSemaphore_setundo(PyShmSemObj *self, PyObject *args)
-{
-    int undo;
-
-    if (!PyArg_ParseTuple(args, "i", &undo))
-        return NULL;
-    refresh_semaphore_status(self);
-    if (undo)
-        self->opflag |= SEM_UNDO;
-    else
-        self->opflag &= ~SEM_UNDO;
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setval(int Value)
-*/
-
-static PyObject *
-PyShmSemaphore_setval(PyShmSemObj *self, PyObject *args)
-{
-    int value;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "i", &value))
-        return NULL;
-    refresh_semaphore_status(self);
-    arg.val = value;
-    if (semctl(self->semid, 0, SETVAL, arg) == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/* List of methods for semaphore objects */
-
-static PyMethodDef semaphore_methods[] = {
-    {"P",		(PyCFunction)PyShmSemaphore_P,			0,
-     "P() --> None | except shm.error"},
-    {"V",		(PyCFunction)PyShmSemaphore_V,			0,
-     "V() --> None | except shm.error"},
-    {"Z",		(PyCFunction)PyShmSemaphore_Z,			0,
-     "Z() --> None | except shm.error"},
-    {"setblocking",	(PyCFunction)PyShmSemaphore_setblocking,	1,
-     "setblocking(0|1) --> None"},
-    {"setgid",		(PyCFunction)PyShmSemaphore_setgid,		1,
-     "setgid(int Gid) --> None | except shm.error"},
-    {"setperm",		(PyCFunction)PyShmSemaphore_setperm,		1,
-     "setperm(int Perm) --> None | except shm.error"},
-    {"setuid",		(PyCFunction)PyShmSemaphore_setuid,		1,
-     "setuid(int Uid) --> None | except shm.error"},
-    {"setundo",		(PyCFunction)PyShmSemaphore_setundo,		1,
-     "setundo(0|1) --> None"},
-    {"setval",		(PyCFunction)PyShmSemaphore_setval,		1,
-     "setval(int Value) --> None | except shm.error"},
-    {NULL,	NULL}		/* sentinel */
-};
-
-#define OFF(x)	offsetof(PyShmSemaphoreObject, x)
-#define OFF1(x)	OFF(ds) + offsetof(struct semid_ds, x)
-#define OFF2(x)	OFF1(sem_perm) + offsetof(struct ipc_perm, x)
-
-/* List of members for semaphore objects */
-
-/* Note: member types are set in the initshm function.
-   Members which need separate processing are:
-   - val, lpid, ncnt, zcnt --> in kernel memory, not accessible from a process
-   - perm --> return permission (lower 9) bits only of ds.sem_perm.mode
-   - blocking --> in opflags
-*/
-
-static struct memberlist semaphore_memberlist[] = {
-    {"cgid",	T_INT,	OFF2(cgid),		RO},	/* 0  (gid_t)  */
-    {"cuid",	T_INT,	OFF2(cuid),		RO},	/* 1  (uid_t)  */
-    {"key",	    T_INT,	OFF2(IPC_PERM_KEY_NAME),		RO},	/* 2  (key_t)  */
-    {"semid",	T_INT,	OFF(semid),		RO},	/* 3  (int)    */
-    {"gid",	    T_INT,	OFF2(gid),		RO},	/* 4  (gid_t)  */
-    {"uid",	    T_INT,	OFF2(uid),		RO},	/* 5  (uid_t)  */
-    /* The following members are implemented without this table */
-    {"lpid",	T_INT,	0,			RO},	/* 6  (ushort) */
-    {"ncnt",	T_INT,	0,			RO},	/* 7  (ushort) */
-    {"perm",	T_INT,	0,			RO},	/* 8  (mode_t) */
-    {"val",	    T_INT,	0,			RO},	/* 9  (ushort) */
-    {"zcnt",	T_INT,	0,			RO},	/* 10 (ushort) */
-    {"blocking",T_INT,	0,			RO},	/* 11 (ushort) */
-    {NULL}			/* sentinel */
-};
-
-#undef OFF
-#undef OFF1
-#undef OFF2
-
-static void
-PyShmSemaphore_dealloc(PyShmSemObj *self)
-{
-    /* del sem_dict[key], ignore if it fails */
-    if (PyDict_DelItem(sem_dict, PyInt_FromLong(self->semid)) == -1)
-        PyErr_Clear();
-    /* v1.1 - changed the reference below from PyMem_DEL to PyObject_Del.    */
-    PyObject_Del(self);
-}
-
-static PyObject *
-PyShmSemaphore_getattr(PyShmSemObj *self, char *name)
-{
-    PyObject *res;
-
-    res = Py_FindMethod(semaphore_methods, (PyObject *)self, name);
-    if (res != NULL)
-        return res;
-    PyErr_Clear();
-    refresh_semaphore_status(self);
-    if (strcmp(name, "val") == 0)
-        return PyInt_FromLong(semctl(self->semid, 0, GETVAL, 0));
-    if (strcmp(name, "lpid") == 0)
-        return PyInt_FromLong(semctl(self->semid, 0, GETPID, 0));
-    if (strcmp(name, "ncnt") == 0)
-        return PyInt_FromLong(semctl(self->semid, 0, GETNCNT, 0));
-    if (strcmp(name, "zcnt") == 0)
-        return PyInt_FromLong(semctl(self->semid, 0, GETZCNT, 0));
-    if (strcmp(name, "perm") == 0)
-        return PyInt_FromLong(self->ds.sem_perm.mode & 0777);
-    /* v1.1 - added blocking */
-    if (strcmp(name, "blocking") == 0)
-        return PyInt_FromLong(self->opflag & IPC_NOWAIT ? 0 : 1);
-    return PyMember_Get((char *)self, semaphore_memberlist, name);
-}
-
-static PyObject *
-PyShmSemaphore_repr(PyShmSemObj *self, char *name)
-{
-    /* v1.1 - added blocking */
-    char buf[200];
-
-    refresh_semaphore_status(self);
-    sprintf(buf, "<semaphore object, id=%d, val=%d, ncnt=%d, zcnt=%d, blocking=%d>",
-            self->semid,
-            semctl(self->semid, 0, GETVAL, 0),
-            semctl(self->semid, 0, GETNCNT, 0),
-            semctl(self->semid, 0, GETZCNT, 0),
-            self->opflag & IPC_NOWAIT ? 0 : 1);
-    return PyString_FromString(buf);
-}
-
-/* Type object for semaphore objects */
-
-static PyTypeObject PyShmSemaphore_Type = {
-    PyObject_HEAD_INIT(&PyType_Type)
-    0,					/*ob_size*/
-    "semaphore",			/*tp_name*/
-    sizeof(PyShmSemObj),		/*tp_size*/
-    0,					/*tp_itemsize*/
-    /* methods */
-    (destructor)PyShmSemaphore_dealloc,	/*tp_dealloc*/
-    0,					/*tp_print*/
-    (getattrfunc)PyShmSemaphore_getattr,/*tp_getattr*/
-    0,					/*tp_setattr*/
-    0,					/*tp_compare*/
-    (reprfunc)PyShmSemaphore_repr,	/*tp_repr*/
-    0,					/*tp_as_number*/
-    0,					/*tp_as_sequence*/
-    0,					/*tp_as_mapping*/
-};
-
-/************************************************************/
-/*                      Module Interface                    */
-/************************************************************/
-
-/*
--- ftok(string Path, int ProjId) -> int
-*/
-
-/* Compute a key by using the system's ftok algorithm */
-
-static PyObject *
-PyShm_ftok(PyObject *self, PyObject *args)
-{
-    char *path;
-    char id;
-    key_t key;
-
-    if (!PyArg_ParseTuple(args, "sb", &path, &id))
-        return NULL;
-    key = ftok(path, id);
-    return PyInt_FromLong((long)key);
-}
-
-/*
--- getshmid(int Key) --> int | except KeyError
-*/
-
-/* Return a shared memory segment id from a given key */
-
-static PyObject *
-PyShm_getshmid(PyObject *self, PyObject *args)
-{
-    long key;
-    int shmid;
-
-    if (!PyArg_ParseTuple(args, "l", &key))
-        return NULL;
-    shmid = shmget((key_t)key, 0, 0);
-    if (shmid == -1) {
-        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(key));
-        return NULL;
-    }
-    return PyInt_FromLong(shmid);
-}
-
-/*
--- memory_haskey(int Key) --> int
-*/
-
-/* Check whether there is a shared memory segment with the given key */
-
-static PyObject *
-PyShm_memory_haskey(PyObject *self, PyObject *args)
-{
-    long key;
-    int shmid;
-
-    if (!PyArg_ParseTuple(args, "l", &key))
-        return NULL;
-    shmid = shmget((key_t)key, 0, 0);
-    return PyInt_FromLong((shmid == -1) ? 0 : 1);
-}
-
-/*
--- memory(int Shmid) --> object | except shm.error
-*/
-
-/* Get an existing shared memory segment and return it as a python object. */
-
-static PyObject *
-PyShm_memory(PyObject *self, PyObject *args)
-{
-    int shmid;
-    PyShmObj *o;
-    PyObject *keyo;
-
-    if (!PyArg_ParseTuple(args, "i", &shmid))
-        return NULL;
-    keyo = PyInt_FromLong(shmid);
-    /* get the object from the dictionary */
-    if (PyMapping_HasKey(shm_dict, keyo)) {
-        o = (PyShmObj *)PyDict_GetItem(shm_dict, keyo);
-        Py_INCREF(o);
-    }
-    else {
-        /* not found, create it */
-        if ((o = PyObject_NEW(PyShmObj, &PyShmMemory_Type)) == NULL)
-            return NULL;
-        o->shmid = shmid;
-        o->addr = NULL;
-        o->mode = 0;
-        /* shm_dict[shmid] = o */
-        if (PyDict_SetItem(shm_dict, keyo, (PyObject *)o) == -1) {
-            Py_DECREF(o);
-            PyErr_SetString(PyShm_Error, "can't initialize shared memory object");
-            return NULL;
-        }
-        Py_DECREF(o);	/* the owned reference in shm_dict doesn't count! */
-    }
-    /* v1.1 - plugged memory leak */
-    Py_DECREF(keyo);
-    /* set up the status data */
-    if (shmctl(o->shmid, IPC_STAT, &(o->ds)) == -1) {
-        Py_DECREF(o);
-        PyErr_SetString(PyShm_Error, "can't access shared memory segment");
-        return NULL;
-    }
-    return (PyObject *)o;
-}
-
-/*
--- create_memory(int Key, int Size [,int Perm=0666]) --> object
-*/
-
-/* Create a new shared memory segment. */
-
-static PyObject *
-PyShm_create_memory(PyObject *self, PyObject *args)
-{
-    long key;
-    int size, shmid;
-    int perm = 0666;	/* Default permission is -rw-rw-rw- */
-    PyObject *py_shmid;
-    PyObject *memory;
-
-    if (!PyArg_ParseTuple(args, "li|i", &key, &size, &perm))
-        return NULL;
-    shmid = shmget((key_t)key, size, perm | IPC_CREAT | IPC_EXCL);
-    if (shmid == -1)
-        return PyShm_Err();
-    /* v1.1 - fixed memory leak resulting from inlining Py_BuildValue */
-    py_shmid = Py_BuildValue("(i)", shmid);
-    memory = PyShm_memory(self, py_shmid);
-    Py_DECREF(py_shmid);
-
-    return memory;
-}
-
-/*
--- remove_memory(int Shmid) --> None | except shm.error
-*/
-
-/* Remove an existing shared memory segment. */
-
-static PyObject *
-PyShm_remove_memory(PyObject *self, PyObject *args)
-{
-    int shmid, res;
-
-    if (!PyArg_ParseTuple(args, "i", &shmid))
-        return NULL;
-    res = shmctl(shmid, IPC_RMID, 0);	/* remove it */
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- getsemid(int Key) --> int | except KeyError
-*/
-
-/* Return a semaphore id from a given key */
-
-static PyObject *
-PyShm_getsemid(PyObject *self, PyObject *args)
-{
-    long key;
-    int semid;
-
-    if (!PyArg_ParseTuple(args, "l", &key))
-        return NULL;
-    semid = semget((key_t)key, 0, 0);
-    if (semid == -1) {
-        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(key));
-        return NULL;
-    }
-    return PyInt_FromLong(semid);
-}
-
-/*
--- semaphore_haskey(int Key) --> int
-*/
-
-/* Check whether there is a semaphore with the given key */
-
-static PyObject *
-PyShm_semaphore_haskey(PyObject *self, PyObject *args)
-{
-    long key;
-    int semid;
-
-    if (!PyArg_ParseTuple(args, "l", &key))
-        return NULL;
-    semid = semget((key_t)key, 0, 0);
-    return PyInt_FromLong((semid == -1) ? 0 : 1);
-}
-
-/*
--- semaphore(int Semid) --> object
-*/
-
-/* Get an existing semaphore and return it as a python object. */
-
-static PyObject *
-PyShm_semaphore(PyObject *self, PyObject *args)
-{
-    int semid;
-    PyShmSemObj *o;
-    PyObject *keyo;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "i", &semid))
-        return NULL;
-    keyo = PyInt_FromLong(semid);
-    /* get the object from the dictionary */
-    if (PyMapping_HasKey(sem_dict, keyo)) {
-        o = (PyShmSemObj *)PyDict_GetItem(sem_dict, keyo);
-        Py_INCREF(o);
-    }
-    else {
-        /* not found, create it */
-        if ((o = PyObject_NEW(PyShmSemObj, &PyShmSemaphore_Type)) == NULL)
-            return NULL;
-        o->semid = semid;
-        o->opflag = 0;
-        /* sem_dict[semid] = o */
-        if (PyDict_SetItem(sem_dict, keyo, (PyObject *)o) == -1) {
-            Py_DECREF(o);
-            PyErr_SetString(PyShm_Error, "can't initialize semaphore object");
-            return NULL;
-        }
-        Py_DECREF(o);	/* the owned reference in sem_dict doesn't count! */
-    }
-    /* v1.1 - plugged memory leak */
-    Py_DECREF(keyo);
-    /* set up the status data */
-    arg.buf = &(o->ds);
-    if (semctl(o->semid, 0, IPC_STAT, arg) == -1) {
-        Py_DECREF(o);
-        PyErr_SetString(PyShm_Error, "can't access semaphore");
-        return NULL;
-    }
-    return (PyObject *)o;
-}
-
-/*
--- create_semaphore(int Key, [,int Value=1 [,int Perm=0666]]) --> object
-*/
-
-/* Create a new semaphore. */
-
-static PyObject *
-PyShm_create_semaphore(PyObject *self, PyObject *args)
-{
-    long key;
-    int semid;
-    int value = 1;
-    int perm = 0666;	/* Default permission is -rw-rw-rw- */
-    semctl_arg arg;
-    PyObject *py_shmid;
-    PyObject *semaphore;
-
-    if (!PyArg_ParseTuple(args, "l|ii", &key, &value, &perm))
-        return NULL;
-    semid = semget((key_t)key, 1, perm | IPC_CREAT | IPC_EXCL);
-    arg.val = value;
-    if (!((semid != -1) && (semctl(semid, 0, SETVAL, arg) != -1)))
-	   return PyShm_Err();
-    /* v1.1 - fixed memory leak resulting from inlining Py_BuildValue */
-    py_shmid = Py_BuildValue("(i)", semid);
-    semaphore = PyShm_semaphore(self, py_shmid);
-    Py_DECREF(py_shmid);
-
-    return semaphore;
-}
-
-/*
--- remove_semaphore(int Semid) --> None | except shm.error
-*/
-
-/* Remove an existing semaphore. */
-
-static PyObject *
-PyShm_remove_semaphore(PyObject *self, PyObject *args)
-{
-    int semid, res;
-
-    if (!PyArg_ParseTuple(args, "i", &semid))
-        return NULL;
-    res = semctl(semid, 0, IPC_RMID, 0);	/* remove it */
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/* List of functions exported by this module. */
-
-static PyMethodDef PyShm_methods[] = {
-    {"create_memory",		PyShm_create_memory,	1,
-     "create_memory(int Key, int Size [,int Perm=0666]) --> object | except shm.error"},
-    {"create_semaphore",	PyShm_create_semaphore,	1,
-     "create_semaphore(int Key [,int Value=1 [,int Perm=0666]]) --> object | except shm.error"},
-    {"ftok",			PyShm_ftok,		1,
-     "ftok(string Path, int ProjId) --> int | except shm.error"},
-    {"getsemid",		PyShm_getsemid,		1,
-     "getsemid(int Key) --> int | except KeyError"},
-    {"getshmid",		PyShm_getshmid,		1,
-     "getshmid(int Key) --> int | except KeyError"},
-    {"memory_haskey",		PyShm_memory_haskey,	1,
-     "memory_haskey(int Key) --> int"},
-    {"memory",			PyShm_memory,		1,
-     "memory(int Shmid) --> object | except shm.error"},
-    {"semaphore",		PyShm_semaphore,	1,
-     "semaphore(int Semid) --> object | except shm.error"},
-    {"semaphore_haskey",	PyShm_semaphore_haskey,	1,
-     "semaphore_haskey(int Key) --> int"},
-    {"remove_memory",		PyShm_remove_memory,	1,
-     "remove_memory(int Shmid) --> None | except shm.error"},
-    {"remove_semaphore",	PyShm_remove_semaphore,	1,
-     "remove_semaphore(int Semid) --> None | except shm.error"},
-    {NULL,			NULL}		/* Sentinel */
-};
-
-
-/* Initialize this module */
-
-/* This is for inserting constants in the module's dictionary */
-
-static void
-insint(PyObject *d, char *name, int value)
-{
-	PyObject *v = PyInt_FromLong((long) value);
-	if (!v || PyDict_SetItemString(d, name, v))
-		Py_FatalError("can't initialize shm module");
-
-	Py_DECREF(v);
-}
-
-/* This is to set up the type of shared memory/semaphore object members */
-
-static void
-set_member_type(struct memberlist *sxm_memberlist,
-                int index,                          /* index in memberlist */
-                int typesize                        /* sizeof(member_type) */
-               )
-{
-    int t;
-
-    if (typesize == sizeof(char))
-        t = T_UBYTE;
-    else if (typesize == sizeof(short))
-        t = T_USHORT;
-    else if (typesize == sizeof(int))
-        t = T_UINT;
-    else if (typesize == sizeof(long))
-        t = T_ULONG;
-    else
-        Py_FatalError("can't initialize shm module");
-    sxm_memberlist[index].type = t;
-};
-
-void
-initshm(void)
-{
-    PyObject *m, *d;
-
-    m = Py_InitModule("shm", PyShm_methods);
-    d = PyModule_GetDict(m);
-    PyShm_Error = PyString_FromString("shm.error");
-    if (PyShm_Error == NULL ||
-	PyDict_SetItemString(d, "error", PyShm_Error) != 0)
-	    Py_FatalError("can't define shm.error");
-    if (PyDict_SetItemString(d, "__doc__", PyString_FromString
-			     ("Interface to System V shared memory IPC")) != 0)
-        Py_FatalError("can't define shm.__doc__");
-    if ((shm_dict = PyDict_New()) == NULL || (sem_dict = PyDict_New()) == NULL)
-	   Py_FatalError("can't initialize shm module");
-
-    /* initialize the machine dependent types in memory_memberlist */
-    set_member_type(memory_memberlist, 0, sizeof(gid_t));	/* cgid   */
-    set_member_type(memory_memberlist, 1, sizeof(pid_t));	/* cpid   */
-    set_member_type(memory_memberlist, 2, sizeof(uid_t));	/* cuid   */
-    set_member_type(memory_memberlist, 3, sizeof(key_t));	/* key    */
-    set_member_type(memory_memberlist, 4, sizeof(pid_t));	/* lpid   */
-    set_member_type(memory_memberlist, 5, sizeof(int));		/* shmid  */
-    set_member_type(memory_memberlist, 6, sizeof(int));		/* size   */
-    set_member_type(memory_memberlist, 7, sizeof(gid_t));	/* gid    */
-    set_member_type(memory_memberlist, 8, sizeof(uid_t));	/* uid    */
-
-    /* initialize the machine dependent types in semaphore_memberlist */
-    set_member_type(semaphore_memberlist, 0, sizeof(gid_t));	/* cgid   */
-    set_member_type(semaphore_memberlist, 1, sizeof(uid_t));	/* cuid   */
-    set_member_type(semaphore_memberlist, 2, sizeof(key_t));	/* key    */
-    set_member_type(semaphore_memberlist, 3, sizeof(int));	/* semid  */
-    set_member_type(semaphore_memberlist, 4, sizeof(gid_t));	/* gid    */
-    set_member_type(semaphore_memberlist, 5, sizeof(uid_t));	/* uid    */
-
-    /* relevant constants for this module; the others are useless here */
-    insint(d, "IPC_PRIVATE", IPC_PRIVATE);
-    insint(d, "SHM_RDONLY", SHM_RDONLY);
-    insint(d, "SHM_RND", SHM_RND);
-#ifdef SHMLBA
-    insint(d, "SHMLBA", SHMLBA);
-#endif
-#ifdef SEM_A
-    insint(d, "SEM_A", SEM_A);
-#endif
-#ifdef SEM_R
-    insint(d, "SEM_R", SEM_R);
-#endif
-#ifdef SHM_R
-    insint(d, "SHM_R", SHM_R);
-#endif
-#ifdef SHM_W
-    insint(d, "SHM_W", SHM_W);
-#endif
-}

==== BEGIN SVK PATCH BLOCK ====
Version: svk 1.08 (linux)

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
/weJ8/mU
==== END SVK PATCH BLOCK ====
