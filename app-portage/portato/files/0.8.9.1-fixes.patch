==== Patch <0.8.9.1> level 1
Source: 0d5daa73-5169-4a83-8e4c-b6d9a920c5be:/trunk:651
Target: 0d5daa73-5169-4a83-8e4c-b6d9a920c5be:/0.8.9:636
Log:
Updates to version 0.8.9.1
=== i18n/de.po
==================================================================
--- i18n/de.po	(revision 636)
+++ i18n/de.po	(patch 0.8.9.1 level 1)
@@ -2,7 +2,7 @@
 msgstr ""
 "Project-Id-Version: Portato\n"
 "POT-Creation-Date: \n"
-"PO-Revision-Date: 2008-01-14 23:09+0100\n"
+"PO-Revision-Date: 2008-01-18 02:40+0100\n"
 "Last-Translator: René 'Necoro' Neumann <necoro@necoro.net>\n"
 "Language-Team: \n"
 "MIME-Version: 1.0\n"
@@ -25,7 +25,7 @@
 msgstr "Aktua_lisiere Portage-Cache"
 
 #: portato/gui/templates/portato.glade:68
-#: portato/gui/templates/portato.glade:1840
+#: portato/gui/templates/portato.glade:1962
 msgid "gtk-quit"
 msgstr ""
 
@@ -34,275 +34,268 @@
 msgstr "_Emerge"
 
 #: portato/gui/templates/portato.glade:89
-#: portato/gui/templates/portato.glade:945
-msgid "E_merge"
-msgstr "E_merge"
+#: portato/gui/templates/portato.glade:497
+msgid "_Install"
+msgstr "_Installieren"
 
-#: portato/gui/templates/portato.glade:104
-#: portato/gui/templates/portato.glade:979
-msgid "_Unmerge"
-msgstr "_Unmerge"
+#: portato/gui/templates/portato.glade:105
+#: portato/gui/templates/portato.glade:508
+msgid "_Uninstall"
+msgstr "_Deinstallieren"
 
-#: portato/gui/templates/portato.glade:118
-#: portato/gui/templates/portato.glade:998
+#: portato/gui/templates/portato.glade:121
+#: portato/gui/templates/portato.glade:951
 msgid "Update _World"
 msgstr "Update _World"
 
-#: portato/gui/templates/portato.glade:127
+#: portato/gui/templates/portato.glade:130
 msgid "Show Updatable P_ackages"
 msgstr "Zeige Pakete mit _Updates"
 
-#: portato/gui/templates/portato.glade:136
-msgid "Show Only _Installed Packages"
-msgstr "Zeige nur _installierte Pakete"
+#: portato/gui/templates/portato.glade:139
+msgid "Show _Only Installed Packages"
+msgstr "_Zeige nur installierte Pakete"
 
-#: portato/gui/templates/portato.glade:150
+#: portato/gui/templates/portato.glade:153
 msgid "_Sync"
 msgstr "_Sync"
 
-#: portato/gui/templates/portato.glade:166
+#: portato/gui/templates/portato.glade:169
 msgid "Save _Flags"
 msgstr "Speichere _Flags"
 
-#: portato/gui/templates/portato.glade:187
-#: portato/gui/templates/portato.glade:279
-#: portato/gui/templates/portato.glade:1815
+#: portato/gui/templates/portato.glade:190
+#: portato/gui/templates/portato.glade:282
+#: portato/gui/templates/portato.glade:1937
 msgid "Emerge _Paused"
 msgstr "Emerge _angehalten"
 
-#: portato/gui/templates/portato.glade:195
-#: portato/gui/templates/portato.glade:261
-#: portato/gui/templates/portato.glade:1822
+#: portato/gui/templates/portato.glade:198
+#: portato/gui/templates/portato.glade:264
+#: portato/gui/templates/portato.glade:1944
 msgid "_Kill Emerge"
 msgstr "_Kill Emerge"
 
-#: portato/gui/templates/portato.glade:218
-#: portato/gui/gtk/windows.py:1022
+#: portato/gui/templates/portato.glade:221
+#: portato/gui/gtk/windows.py:1064
 msgid "Queue"
 msgstr "Queue"
 
-#: portato/gui/templates/portato.glade:225
+#: portato/gui/templates/portato.glade:228
 msgid "Oneshot"
 msgstr "Oneshot"
 
-#: portato/gui/templates/portato.glade:237
-#: portato/gui/gtk/windows.py:1182
+#: portato/gui/templates/portato.glade:240
+#: portato/gui/gtk/windows.py:1231
 msgid "Console"
 msgstr "Konsole"
 
-#: portato/gui/templates/portato.glade:244
+#: portato/gui/templates/portato.glade:247
 msgid "_Copy"
 msgstr "_Kopieren"
 
-#: portato/gui/templates/portato.glade:290
+#: portato/gui/templates/portato.glade:293
 msgid "Plu_gins"
 msgstr "Plu_gins"
 
-#: portato/gui/templates/portato.glade:302
+#: portato/gui/templates/portato.glade:305
 msgid "_?"
 msgstr "_?"
 
-#: portato/gui/templates/portato.glade:310
+#: portato/gui/templates/portato.glade:313
 msgid "_About"
 msgstr "_Über"
 
-#: portato/gui/templates/portato.glade:328
+#: portato/gui/templates/portato.glade:331
 msgid "_Plugins"
 msgstr "_Plugins"
 
-#: portato/gui/templates/portato.glade:365
+#: portato/gui/templates/portato.glade:368
 msgid "gtk-find"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:464
-msgid "Add to Emerge Queue"
-msgstr "Füge zur Emerge Queue hinzu"
+#: portato/gui/templates/portato.glade:472
+#: portato/gui/templates/portato.glade:652
+#: portato/gui/templates/portato.glade:668
+msgid "label"
+msgstr ""
 
-#: portato/gui/templates/portato.glade:476
-msgid "Remove from Emerge Queue"
-msgstr "Entferne aus der Emerge Queue"
+#: portato/gui/templates/portato.glade:496
+msgid "Install onto system"
+msgstr "Füge zum System hinzu"
 
-#: portato/gui/templates/portato.glade:488
+#: portato/gui/templates/portato.glade:507
+msgid "Uninstall from system"
+msgstr "Lösche vom System"
+
+#: portato/gui/templates/portato.glade:518
 msgid "Revert changes"
 msgstr "Rückgängig"
 
-#: portato/gui/templates/portato.glade:510
-#: portato/gui/templates/portato.glade:633
-#: portato/gui/templates/portato.glade:648
-msgid "label"
-msgstr ""
+#: portato/gui/templates/portato.glade:519
+msgid "Re_vert"
+msgstr "Rü_ckgängig"
 
-#: portato/gui/templates/portato.glade:555
-msgid "<b>Installed, but not in portage anymore</b>"
-msgstr "<b>Installiert, aber nicht mehr im Portage-Tree vorhanden</b>"
+#: portato/gui/templates/portato.glade:565
+#: portato/gui/gtk/windows.py:755
+#: portato/gui/gtk/windows.py:758
+#: portato/gui/gtk/windows.py:825
+#: portato/gui/gtk/windows.py:829
+msgid "Testing"
+msgstr "Testing"
 
-#: portato/gui/templates/portato.glade:570
-msgid "<span foreground='red'><b>MISSING KEYWORD</b></span>"
-msgstr "<span foreground='red'><b>FEHLENDES KEYWORD</b></span>"
+#: portato/gui/templates/portato.glade:598
+#: portato/gui/gtk/windows.py:738
+#: portato/gui/gtk/windows.py:741
+#: portato/gui/gtk/windows.py:744
+#: portato/gui/gtk/windows.py:852
+#: portato/gui/gtk/windows.py:856
+#: portato/gui/gtk/windows.py:863
+#: portato/gui/gtk/windows.py:867
+msgid "Masked"
+msgstr "Masked"
 
-#: portato/gui/templates/portato.glade:602
-msgid "<b>Description:</b>"
-msgstr "<b>Beschreibung</b>"
-
 #: portato/gui/templates/portato.glade:617
-msgid "<b>Overlay:</b>"
-msgstr "<b>Overlay:</b>"
+#: portato/gui/gtk/windows.py:610
+msgid "Installed"
+msgstr "Installiert"
 
-#: portato/gui/templates/portato.glade:665
+#: portato/gui/templates/portato.glade:635
 msgid "<b>Homepage:</b>"
 msgstr "<b>Homepage:</b>"
 
-#: portato/gui/templates/portato.glade:682
-#: portato/gui/gtk/windows.py:575
-msgid "Installed"
-msgstr "Installiert"
+#: portato/gui/templates/portato.glade:683
+msgid "<b>Overlay:</b>"
+msgstr "<b>Overlay:</b>"
 
-#: portato/gui/templates/portato.glade:701
-#: portato/gui/gtk/windows.py:703
-#: portato/gui/gtk/windows.py:706
-#: portato/gui/gtk/windows.py:709
-#: portato/gui/gtk/windows.py:811
-#: portato/gui/gtk/windows.py:815
-#: portato/gui/gtk/windows.py:822
-#: portato/gui/gtk/windows.py:826
-msgid "Masked"
-msgstr "Masked"
+#: portato/gui/templates/portato.glade:699
+msgid "<b>Description:</b>"
+msgstr "<b>Beschreibung</b>"
 
-#: portato/gui/templates/portato.glade:734
-#: portato/gui/gtk/windows.py:720
-#: portato/gui/gtk/windows.py:723
-#: portato/gui/gtk/windows.py:784
-#: portato/gui/gtk/windows.py:788
-msgid "Testing"
-msgstr "Testing"
+#: portato/gui/templates/portato.glade:730
+msgid "<span foreground='red'><b>MISSING KEYWORD</b></span>"
+msgstr "<span foreground='red'><b>FEHLENDES KEYWORD</b></span>"
 
-#: portato/gui/templates/portato.glade:754
+#: portato/gui/templates/portato.glade:745
+msgid "<b>Installed, but not in portage anymore</b>"
+msgstr "<b>Installiert, aber nicht mehr im Portage-Tree vorhanden</b>"
+
+#: portato/gui/templates/portato.glade:762
 msgid "_General"
 msgstr "All_gemein"
 
-#: portato/gui/templates/portato.glade:786
+#: portato/gui/templates/portato.glade:794
 msgid "U_se List"
 msgstr "U_se-Flag-Liste"
 
-#: portato/gui/templates/portato.glade:814
+#: portato/gui/templates/portato.glade:822
 msgid "E_build"
 msgstr "E_build"
 
-#: portato/gui/templates/portato.glade:842
+#: portato/gui/templates/portato.glade:850
 msgid "C_hangelog"
 msgstr "C_hangelog"
 
-#: portato/gui/templates/portato.glade:870
-msgid "F_iles"
-msgstr "Date_ien"
+#: portato/gui/templates/portato.glade:878
+msgid "Fi_les"
+msgstr "_Dateien"
 
-#: portato/gui/templates/portato.glade:926
-msgid "Install all packages in the \"Emerge Queue\""
-msgstr "Installiere alle Pakete aus der \"Emerge Queue\""
+#: portato/gui/templates/portato.glade:916
+msgid "Execute the current selected queue"
+msgstr "Führe die aktuell gewählte Queue aus"
 
-#: portato/gui/templates/portato.glade:960
-msgid "Deinstall all packages in the \"Unmerge Queue\""
-msgstr "Deinstalliere alle Pakete aus der \"Unmerge Queue\""
+#: portato/gui/templates/portato.glade:935
+msgid "E_xecute"
+msgstr "_Ausführen"
 
-#: portato/gui/templates/portato.glade:997
+#: portato/gui/templates/portato.glade:950
 msgid "Calculate the packages which will be installed during an \"update world\""
 msgstr "Berechnet die Pakete, welche während eines \"update world\" installiert werden würden"
 
-#: portato/gui/templates/portato.glade:1010
+#: portato/gui/templates/portato.glade:963
 msgid "Remove the selected package from the queue"
 msgstr "Löscht das gewählte Paket aus der Queue"
 
-#: portato/gui/templates/portato.glade:1011
+#: portato/gui/templates/portato.glade:964
 msgid "_Remove"
 msgstr "_Löschen"
 
-#: portato/gui/templates/portato.glade:1033
+#: portato/gui/templates/portato.glade:1007
 msgid "_Queue"
 msgstr "_Queue"
 
-#: portato/gui/templates/portato.glade:1059
+#: portato/gui/templates/portato.glade:1033
 msgid "_Console"
 msgstr "_Konsole"
 
-#: portato/gui/templates/portato.glade:1094
+#: portato/gui/templates/portato.glade:1068
 msgid "L_og"
 msgstr "L_og"
 
-#: portato/gui/templates/portato.glade:1129
+#: portato/gui/templates/portato.glade:1103
 msgid "Portato - A Portage GUI"
 msgstr "Portato - A Portage GUI"
 
-#: portato/gui/templates/portato.glade:1146
+#: portato/gui/templates/portato.glade:1120
 msgid "Search Results"
 msgstr "Ergebnisse"
 
-#: portato/gui/templates/portato.glade:1186
-#: portato/gui/templates/portato.glade:1781
-#: portato/gui/templates/portato.glade:1889
+#: portato/gui/templates/portato.glade:1160
+#: portato/gui/templates/portato.glade:1903
+#: portato/gui/templates/portato.glade:2011
 msgid "gtk-cancel"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1198
+#: portato/gui/templates/portato.glade:1172
 msgid "gtk-jump-to"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1213
+#: portato/gui/templates/portato.glade:1187
 msgid "gtk-ok"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1234
+#: portato/gui/templates/portato.glade:1208
 msgid "Preferences"
 msgstr "Einstellungen"
 
-#: portato/gui/templates/portato.glade:1269
+#: portato/gui/templates/portato.glade:1243
 msgid "Debug"
 msgstr "Debug"
 
-#: portato/gui/templates/portato.glade:1282
+#: portato/gui/templates/portato.glade:1256
 msgid "Browser command: "
 msgstr "Browser-Befehl: "
 
-#: portato/gui/templates/portato.glade:1308
+#: portato/gui/templates/portato.glade:1282
+#: portato/gui/templates/portato.glade:1709
 msgid "<b>General Options</b>"
 msgstr "<b>Allgemeine Optionen</b>"
 
-#: portato/gui/templates/portato.glade:1358
+#: portato/gui/templates/portato.glade:1332
 msgid "<b>Update World Options</b>"
 msgstr "<b>Optionen für \"update world\"</b>"
 
-#: portato/gui/templates/portato.glade:1386
+#: portato/gui/templates/portato.glade:1360
 msgid "Sync command: "
 msgstr "Sync-Befehl: "
 
-#: portato/gui/templates/portato.glade:1407
+#: portato/gui/templates/portato.glade:1381
 msgid "<b>Sync Options</b>"
 msgstr "<b>Sync Optionen</b>"
 
-#: portato/gui/templates/portato.glade:1458
-msgid "File name to use, if package.use is a directory: "
-msgstr "Zu benutzender Dateiname, wenn package.use ein Verzeichnis ist:"
+#: portato/gui/templates/portato.glade:1422
+msgid "<u><i>Masking Keywords</i></u>"
+msgstr "<u><i>Masking Keywords</i></u>"
 
-#: portato/gui/templates/portato.glade:1469
-msgid "Add only exact version to package.use"
-msgstr "Füge nur die exakte Paketversion zu package.keywords hinzu"
+#: portato/gui/templates/portato.glade:1437
+msgid "<u><i>Testing Keywords</i></u>"
+msgstr "<u><i>Testing Keywords</i></u>"
 
-#: portato/gui/templates/portato.glade:1482
-msgid "Add only exact version to package.keywords"
-msgstr "Füge nur die exakte Paketversion zu package.keywords hinzu"
+#: portato/gui/templates/portato.glade:1452
+msgid "<u><i>Use-Flags</i></u>"
+msgstr "<u><i>Use-Flags</i></u>"
 
-#: portato/gui/templates/portato.glade:1496
-msgid "File name to use, if package.keywords is a directory: "
-msgstr "Zu benutzender Dateiname, wenn package.keywords ein Verzeichnis ist:"
-
-#: portato/gui/templates/portato.glade:1530
-msgid "File name to use, if package.mask/package.unmask is a directory: "
-msgstr "Zu benutzender Dateiname, wenn package.mask/package.unmask ein Verzeichnis ist:"
-
-#: portato/gui/templates/portato.glade:1541
-msgid "Add only exact version to package.mask/package.unmask"
-msgstr "Füge nur die exakte Paketversion zu package.mask/package.unmask hinzu"
-
-#: portato/gui/templates/portato.glade:1563
+#: portato/gui/templates/portato.glade:1474
 msgid ""
 "<u>You may use the following placeholders:</u>\n"
 "\n"
@@ -316,64 +309,92 @@
 "<i>$(pkg)</i>: Paketname\n"
 "<i>$(cat-1)/$(cat-2)</i>: erster/zweiter Teil der Kategorie"
 
-#: portato/gui/templates/portato.glade:1589
-msgid "<u><i>Use-Flags</i></u>"
-msgstr "<u><i>Use-Flags</i></u>"
+#: portato/gui/templates/portato.glade:1498
+msgid "Add only exact version to package.mask/package.unmask"
+msgstr "Füge nur die exakte Paketversion zu package.mask/package.unmask hinzu"
 
-#: portato/gui/templates/portato.glade:1604
-msgid "<u><i>Testing Keywords</i></u>"
-msgstr "<u><i>Testing Keywords</i></u>"
+#: portato/gui/templates/portato.glade:1512
+msgid "File name to use, if package.mask/package.unmask is a directory: "
+msgstr "Zu benutzender Dateiname, wenn package.mask/package.unmask ein Verzeichnis ist:"
 
-#: portato/gui/templates/portato.glade:1619
-msgid "<u><i>Masking Keywords</i></u>"
-msgstr "<u><i>Masking Keywords</i></u>"
+#: portato/gui/templates/portato.glade:1546
+msgid "File name to use, if package.keywords is a directory: "
+msgstr "Zu benutzender Dateiname, wenn package.keywords ein Verzeichnis ist:"
 
-#: portato/gui/templates/portato.glade:1636
+#: portato/gui/templates/portato.glade:1557
+msgid "Add only exact version to package.keywords"
+msgstr "Füge nur die exakte Paketversion zu package.keywords hinzu"
+
+#: portato/gui/templates/portato.glade:1570
+msgid "Add only exact version to package.use"
+msgstr "Füge nur die exakte Paketversion zu package.keywords hinzu"
+
+#: portato/gui/templates/portato.glade:1584
+msgid "File name to use, if package.use is a directory: "
+msgstr "Zu benutzender Dateiname, wenn package.use ein Verzeichnis ist:"
+
+#: portato/gui/templates/portato.glade:1610
 msgid "<b>Use Flag and Keyword Options</b>"
 msgstr "<b>Use-Flag- und Keyword-Optionen</b>"
 
-#: portato/gui/templates/portato.glade:1654
+#: portato/gui/templates/portato.glade:1628
 msgid "General"
 msgstr "Allgemein"
 
-#: portato/gui/templates/portato.glade:1677
+#: portato/gui/templates/portato.glade:1665
+msgid "Enable systray"
+msgstr "Aktiviere Systray"
+
+#: portato/gui/templates/portato.glade:1678
 msgid "Show emerge progress in title - similar to the console tab"
 msgstr "Zeige den Emerge Prozess im Fenstertitel (wie im Konsolen-Tab)"
 
-#: portato/gui/templates/portato.glade:1693
-msgid "Enable systray"
-msgstr "Aktiviere Systray"
-
-#: portato/gui/templates/portato.glade:1707
+#: portato/gui/templates/portato.glade:1692
 msgid "Hide on minimization (only if systray is enabled)"
 msgstr "Minimiere zu Systray"
 
-#: portato/gui/templates/portato.glade:1726
+#: portato/gui/templates/portato.glade:1743
 msgid "Console Font"
 msgstr "Schriftart in Konsole"
 
-#: portato/gui/templates/portato.glade:1736
+#: portato/gui/templates/portato.glade:1753
 msgid "Chose a console font"
 msgstr "Wähle eine Schriftart"
 
-#: portato/gui/templates/portato.glade:1763
+#: portato/gui/templates/portato.glade:1770
+msgid "<b>Console Options</b>"
+msgstr "<b>Konsolen Optionen</b>"
+
+#: portato/gui/templates/portato.glade:1810
+msgid "Package Tabs"
+msgstr "Pakettabs"
+
+#: portato/gui/templates/portato.glade:1835
+msgid "System Tabs"
+msgstr "Systemtabs"
+
+#: portato/gui/templates/portato.glade:1861
+msgid "<b>Tab Options</b>"
+msgstr "<b>Tab Optionen</b>"
+
+#: portato/gui/templates/portato.glade:1885
 msgid "Visual"
 msgstr "Oberfläche"
 
-#: portato/gui/templates/portato.glade:1790
-#: portato/gui/templates/portato.glade:1901
+#: portato/gui/templates/portato.glade:1912
+#: portato/gui/templates/portato.glade:2023
 msgid "gtk-apply"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1850
+#: portato/gui/templates/portato.glade:1972
 msgid "Plugins"
 msgstr "Plugins"
 
-#: portato/gui/templates/portato.glade:1922
+#: portato/gui/templates/portato.glade:2044
 msgid "About Portato"
 msgstr "Portato"
 
-#: portato/gui/templates/portato.glade:1931
+#: portato/gui/templates/portato.glade:2053
 msgid ""
 "This software is licensed under the terms of the GPLv2.\n"
 "Copyright (C) 2006-2007 René 'Necoro' Neumann <necoro@necoro.net>"
@@ -381,23 +402,23 @@
 "This software is licensed under the terms of the GPLv2.\n"
 "Copyright (C) 2006-2007 René 'Necoro' Neumann <necoro@necoro.net>"
 
-#: portato/gui/templates/portato.glade:1933
+#: portato/gui/templates/portato.glade:2055
 msgid "A Portage GUI"
 msgstr "A Portage GUI"
 
-#: portato/gui/templates/portato.glade:2023
+#: portato/gui/templates/portato.glade:2145
 msgid "Updateble Packages"
 msgstr "Pakete mit Updates"
 
-#: portato/gui/templates/portato.glade:2065
+#: portato/gui/templates/portato.glade:2187
 msgid "_Close"
 msgstr "_Schließen"
 
-#: portato/gui/templates/portato.glade:2077
+#: portato/gui/templates/portato.glade:2199
 msgid "Select _All"
 msgstr "_Alles auswählen"
 
-#: portato/gui/templates/portato.glade:2092
+#: portato/gui/templates/portato.glade:2214
 msgid "_Install Selected"
 msgstr "_Installiere ausgewählte"
 
@@ -481,7 +502,7 @@
 
 #: portato/gui/gtk/windows.py:61
 #: portato/gui/gtk/windows.py:149
-#: portato/gui/gtk/windows.py:574
+#: portato/gui/gtk/windows.py:609
 msgid "Enabled"
 msgstr "Aktiviert"
 
@@ -509,138 +530,151 @@
 msgid "Results"
 msgstr "Ergebnisse"
 
-#: portato/gui/gtk/windows.py:496
+#: portato/gui/gtk/windows.py:372
+msgid "Top"
+msgstr "Oben"
+
+#: portato/gui/gtk/windows.py:372
+msgid "Bottom"
+msgstr "Unten"
+
+#: portato/gui/gtk/windows.py:372
+msgid "Left"
+msgstr "Links"
+
+#: portato/gui/gtk/windows.py:372
+msgid "Right"
+msgstr "Rechts"
+
+#: portato/gui/gtk/windows.py:531
 msgid "<no description>"
 msgstr "<keine Beschreibung>"
 
-#: portato/gui/gtk/windows.py:519
+#: portato/gui/gtk/windows.py:554
 msgid "The first homepage part does not start with 'http' or 'ftp'."
 msgstr "Der erste Teil der Homepage startet nicht mit 'http' oder 'ftp'."
 
-#: portato/gui/gtk/windows.py:523
+#: portato/gui/gtk/windows.py:558
 msgid "Blank inside homepage."
 msgstr "Leerzeichen innerhalb der Homepage-URL."
 
-#: portato/gui/gtk/windows.py:552
+#: portato/gui/gtk/windows.py:587
 msgid "This is an expanded use flag and cannot be selected"
 msgstr "Dies ist ein \"Expanded Use Flag\" und kann daher nicht ausgewählt werden."
 
-#: portato/gui/gtk/windows.py:576
+#: portato/gui/gtk/windows.py:611
 msgid "Flag"
 msgstr "Flag"
 
-#: portato/gui/gtk/windows.py:577
+#: portato/gui/gtk/windows.py:612
 msgid "Description"
 msgstr "Beschreibung"
 
-#: portato/gui/gtk/windows.py:655
+#: portato/gui/gtk/windows.py:690
 #, python-format
 msgid "Package could not be found: %s"
 msgstr "Paket konnte nicht gefunden werden: %s"
 
-#: portato/gui/gtk/windows.py:712
-#: portato/gui/gtk/windows.py:813
+#: portato/gui/gtk/windows.py:747
+#: portato/gui/gtk/windows.py:854
 msgid "Masked by user"
 msgstr "Vom Benutzer maskiert"
 
-#: portato/gui/gtk/windows.py:888
+#: portato/gui/gtk/windows.py:929
 msgid "Loading Config"
 msgstr "Lade Konfiguration"
 
-#: portato/gui/gtk/windows.py:900
+#: portato/gui/gtk/windows.py:941
 msgid "Creating Database"
 msgstr "Erstelle Datenbank"
 
-#: portato/gui/gtk/windows.py:905
+#: portato/gui/gtk/windows.py:946
 msgid "Loading Plugins"
 msgstr "Lade Plugins"
 
-#: portato/gui/gtk/windows.py:918
+#: portato/gui/gtk/windows.py:959
 msgid "Building frontend"
 msgstr "Erstelle Oberfläche"
 
-#: portato/gui/gtk/windows.py:970
+#: portato/gui/gtk/windows.py:1011
 msgid "Restoring Session"
 msgstr "Lade Session"
 
-#: portato/gui/gtk/windows.py:973
+#: portato/gui/gtk/windows.py:1014
 msgid "Finishing startup"
 msgstr "Erledige letzte Handgriffe :)"
 
-#: portato/gui/gtk/windows.py:1025
+#: portato/gui/gtk/windows.py:1067
 msgid "Options"
 msgstr "Optionen"
 
-#: portato/gui/gtk/windows.py:1035
+#: portato/gui/gtk/windows.py:1077
 msgid "Categories"
 msgstr "Kategorien"
 
-#: portato/gui/gtk/windows.py:1062
+#: portato/gui/gtk/windows.py:1104
 msgid "Packages"
 msgstr "Pakete"
 
-#: portato/gui/gtk/windows.py:1184
+#: portato/gui/gtk/windows.py:1233
 #, python-format
 msgid "Console (%(title)s)"
 msgstr "Konsole (%(title)s)"
 
-#: portato/gui/gtk/windows.py:1300
+#: portato/gui/gtk/windows.py:1347
 msgid "use flags"
 msgstr "Use Flags"
 
-#: portato/gui/gtk/windows.py:1307
+#: portato/gui/gtk/windows.py:1354
 msgid "masking keywords"
 msgstr "Masking Keywords"
 
-#: portato/gui/gtk/views.py:70
-msgid "Package is not installed"
-msgstr "Paket ist nicht installiert"
-
-#: portato/gui/gtk/views.py:87
-#, python-format
-msgid "No %(old)s language file installed. Falling back to %(new)s."
-msgstr "Keine \"%(old)s\" Syntaxdatei gefunden. Benutze \"%(new)s\"-Syntax."
-
-#: portato/gui/gtk/views.py:92
-#, python-format
-msgid "No %(old)s language file installed. Disable highlighting."
-msgstr "Keine \"%(old)s\" Syntaxdatei gefunden. Deaktiviere Hervorhebung."
-
-#: portato/gui/gtk/views.py:111
-#, python-format
-msgid "Error: %s"
-msgstr "Fehler: %s"
-
 #: portato/gui/gtk/__init__.py:23
 msgid "Loading Portage"
 msgstr "Lade Portage"
 
-#: portato/gui/gtk/wrapper.py:39
+#: portato/gui/gtk/wrapper.py:40
 msgid "oneshot"
 msgstr "oneshot"
 
-#: portato/gui/gtk/wrapper.py:44
+#: portato/gui/gtk/wrapper.py:45
 #, python-format
 msgid "updating from version %s"
 msgstr "Update von Version %s"
 
-#: portato/gui/gtk/wrapper.py:46
+#: portato/gui/gtk/wrapper.py:47
 msgid "updating"
 msgstr "Update"
 
-#: portato/gui/gtk/wrapper.py:51
+#: portato/gui/gtk/wrapper.py:52
 #, python-format
 msgid "downgrading from version %s"
 msgstr "Downgrade von Version %s"
 
-#: portato/gui/gtk/wrapper.py:53
+#: portato/gui/gtk/wrapper.py:54
 msgid "downgrading"
 msgstr "Downgrade"
 
-#: portato/gui/gtk/wrapper.py:57
+#: portato/gui/gtk/wrapper.py:58
 msgid "IUSE changes:"
 msgstr "IUSE Änderungen:"
 
+#: portato/gui/gtk/wrapper.py:66
+msgid "(In Progress)"
+msgstr "(In Bearbeitung)"
+
+#: portato/gui/gtk/wrapper.py:70
+msgid "Install"
+msgstr "Installieren"
+
+#: portato/gui/gtk/wrapper.py:75
+msgid "Uninstall"
+msgstr "Deinstallieren"
+
+#: portato/gui/gtk/wrapper.py:81
+msgid "Update"
+msgstr "Update"
+
 #: portato/gui/gtk/dialogs.py:17
 msgid ""
 "There are some packages in the emerge queue and/or an emerge process is running.\n"
@@ -685,6 +719,14 @@
 msgstr "Du kannst keine Abhängigkeiten löschen ;)."
 
 #: portato/gui/gtk/dialogs.py:72
+msgid ""
+"This is the updates queue. You cannot remove single elements.\n"
+"Do you want to clear the whole queue instead?"
+msgstr ""
+"Das ist die Update-Queue. Aus dieser können keine einzelnen Pakete entfernt werden.\n"
+"Soll stattdessen die komplette Queue entfernt werden?"
+
+#: portato/gui/gtk/dialogs.py:78
 msgid "Do you really want to clear the whole queue?"
 msgstr "Wirklich die gesamte Queue löschen?"
 
@@ -727,6 +769,25 @@
 "Exception:\n"
 "%s"
 
+#: portato/gui/gtk/views.py:70
+msgid "Package is not installed"
+msgstr "Paket ist nicht installiert"
+
+#: portato/gui/gtk/views.py:87
+#, python-format
+msgid "No %(old)s language file installed. Falling back to %(new)s."
+msgstr "Keine \"%(old)s\" Syntaxdatei gefunden. Benutze \"%(new)s\"-Syntax."
+
+#: portato/gui/gtk/views.py:92
+#, python-format
+msgid "No %(old)s language file installed. Disable highlighting."
+msgstr "Keine \"%(old)s\" Syntaxdatei gefunden. Deaktiviere Hervorhebung."
+
+#: portato/gui/gtk/views.py:111
+#, python-format
+msgid "Error: %s"
+msgstr "Fehler: %s"
+
 #: portato/gui/gui_helper.py:125
 msgid "ALL"
 msgstr "ALLE"
=== i18n/messages.pot
==================================================================
--- i18n/messages.pot	(revision 636)
+++ i18n/messages.pot	(patch 0.8.9.1 level 1)
@@ -8,7 +8,7 @@
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
 "Report-Msgid-Bugs-To: \n"
-"POT-Creation-Date: 2008-01-14 23:07+0100\n"
+"POT-Creation-Date: 2008-01-18 02:35+0100\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
 "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
@@ -29,7 +29,7 @@
 msgstr ""
 
 #: portato/gui/templates/portato.glade:68
-#: portato/gui/templates/portato.glade:1840
+#: portato/gui/templates/portato.glade:1962
 msgid "gtk-quit"
 msgstr ""
 
@@ -38,267 +38,260 @@
 msgstr ""
 
 #: portato/gui/templates/portato.glade:89
-#: portato/gui/templates/portato.glade:945
-msgid "E_merge"
+#: portato/gui/templates/portato.glade:497
+msgid "_Install"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:104
-#: portato/gui/templates/portato.glade:979
-msgid "_Unmerge"
+#: portato/gui/templates/portato.glade:105
+#: portato/gui/templates/portato.glade:508
+msgid "_Uninstall"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:118
-#: portato/gui/templates/portato.glade:998
+#: portato/gui/templates/portato.glade:121
+#: portato/gui/templates/portato.glade:951
 msgid "Update _World"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:127
+#: portato/gui/templates/portato.glade:130
 msgid "Show Updatable P_ackages"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:136
-msgid "Show Only _Installed Packages"
+#: portato/gui/templates/portato.glade:139
+msgid "Show _Only Installed Packages"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:150
+#: portato/gui/templates/portato.glade:153
 msgid "_Sync"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:166
+#: portato/gui/templates/portato.glade:169
 msgid "Save _Flags"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:187
-#: portato/gui/templates/portato.glade:279
-#: portato/gui/templates/portato.glade:1815
+#: portato/gui/templates/portato.glade:190
+#: portato/gui/templates/portato.glade:282
+#: portato/gui/templates/portato.glade:1937
 msgid "Emerge _Paused"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:195
-#: portato/gui/templates/portato.glade:261
-#: portato/gui/templates/portato.glade:1822
+#: portato/gui/templates/portato.glade:198
+#: portato/gui/templates/portato.glade:264
+#: portato/gui/templates/portato.glade:1944
 msgid "_Kill Emerge"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:218 portato/gui/gtk/windows.py:1022
+#: portato/gui/templates/portato.glade:221 portato/gui/gtk/windows.py:1064
 msgid "Queue"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:225
+#: portato/gui/templates/portato.glade:228
 msgid "Oneshot"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:237 portato/gui/gtk/windows.py:1182
+#: portato/gui/templates/portato.glade:240 portato/gui/gtk/windows.py:1231
 msgid "Console"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:244
+#: portato/gui/templates/portato.glade:247
 msgid "_Copy"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:290
+#: portato/gui/templates/portato.glade:293
 msgid "Plu_gins"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:302
+#: portato/gui/templates/portato.glade:305
 msgid "_?"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:310
+#: portato/gui/templates/portato.glade:313
 msgid "_About"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:328
+#: portato/gui/templates/portato.glade:331
 msgid "_Plugins"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:365
+#: portato/gui/templates/portato.glade:368
 msgid "gtk-find"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:464
-msgid "Add to Emerge Queue"
+#: portato/gui/templates/portato.glade:472
+#: portato/gui/templates/portato.glade:652
+#: portato/gui/templates/portato.glade:668
+msgid "label"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:476
-msgid "Remove from Emerge Queue"
+#: portato/gui/templates/portato.glade:496
+msgid "Install onto system"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:488
-msgid "Revert changes"
+#: portato/gui/templates/portato.glade:507
+msgid "Uninstall from system"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:510
-#: portato/gui/templates/portato.glade:633
-#: portato/gui/templates/portato.glade:648
-msgid "label"
+#: portato/gui/templates/portato.glade:518
+msgid "Revert changes"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:555
-msgid "<b>Installed, but not in portage anymore</b>"
+#: portato/gui/templates/portato.glade:519
+msgid "Re_vert"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:570
-msgid "<span foreground='red'><b>MISSING KEYWORD</b></span>"
+#: portato/gui/templates/portato.glade:565 portato/gui/gtk/windows.py:755
+#: portato/gui/gtk/windows.py:758 portato/gui/gtk/windows.py:825
+#: portato/gui/gtk/windows.py:829
+msgid "Testing"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:602
-msgid "<b>Description:</b>"
+#: portato/gui/templates/portato.glade:598 portato/gui/gtk/windows.py:738
+#: portato/gui/gtk/windows.py:741 portato/gui/gtk/windows.py:744
+#: portato/gui/gtk/windows.py:852 portato/gui/gtk/windows.py:856
+#: portato/gui/gtk/windows.py:863 portato/gui/gtk/windows.py:867
+msgid "Masked"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:617
-msgid "<b>Overlay:</b>"
+#: portato/gui/templates/portato.glade:617 portato/gui/gtk/windows.py:610
+msgid "Installed"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:665
+#: portato/gui/templates/portato.glade:635
 msgid "<b>Homepage:</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:682 portato/gui/gtk/windows.py:575
-msgid "Installed"
+#: portato/gui/templates/portato.glade:683
+msgid "<b>Overlay:</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:701 portato/gui/gtk/windows.py:703
-#: portato/gui/gtk/windows.py:706 portato/gui/gtk/windows.py:709
-#: portato/gui/gtk/windows.py:811 portato/gui/gtk/windows.py:815
-#: portato/gui/gtk/windows.py:822 portato/gui/gtk/windows.py:826
-msgid "Masked"
+#: portato/gui/templates/portato.glade:699
+msgid "<b>Description:</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:734 portato/gui/gtk/windows.py:720
-#: portato/gui/gtk/windows.py:723 portato/gui/gtk/windows.py:784
-#: portato/gui/gtk/windows.py:788
-msgid "Testing"
+#: portato/gui/templates/portato.glade:730
+msgid "<span foreground='red'><b>MISSING KEYWORD</b></span>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:754
+#: portato/gui/templates/portato.glade:745
+msgid "<b>Installed, but not in portage anymore</b>"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:762
 msgid "_General"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:786
+#: portato/gui/templates/portato.glade:794
 msgid "U_se List"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:814
+#: portato/gui/templates/portato.glade:822
 msgid "E_build"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:842
+#: portato/gui/templates/portato.glade:850
 msgid "C_hangelog"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:870
-msgid "F_iles"
+#: portato/gui/templates/portato.glade:878
+msgid "Fi_les"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:926
-msgid "Install all packages in the \"Emerge Queue\""
+#: portato/gui/templates/portato.glade:916
+msgid "Execute the current selected queue"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:960
-msgid "Deinstall all packages in the \"Unmerge Queue\""
+#: portato/gui/templates/portato.glade:935
+msgid "E_xecute"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:997
+#: portato/gui/templates/portato.glade:950
 msgid ""
 "Calculate the packages which will be installed during an \"update world\""
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1010
+#: portato/gui/templates/portato.glade:963
 msgid "Remove the selected package from the queue"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1011
+#: portato/gui/templates/portato.glade:964
 msgid "_Remove"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1033
+#: portato/gui/templates/portato.glade:1007
 msgid "_Queue"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1059
+#: portato/gui/templates/portato.glade:1033
 msgid "_Console"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1094
+#: portato/gui/templates/portato.glade:1068
 msgid "L_og"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1129
+#: portato/gui/templates/portato.glade:1103
 msgid "Portato - A Portage GUI"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1146
+#: portato/gui/templates/portato.glade:1120
 msgid "Search Results"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1186
-#: portato/gui/templates/portato.glade:1781
-#: portato/gui/templates/portato.glade:1889
+#: portato/gui/templates/portato.glade:1160
+#: portato/gui/templates/portato.glade:1903
+#: portato/gui/templates/portato.glade:2011
 msgid "gtk-cancel"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1198
+#: portato/gui/templates/portato.glade:1172
 msgid "gtk-jump-to"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1213
+#: portato/gui/templates/portato.glade:1187
 msgid "gtk-ok"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1234
+#: portato/gui/templates/portato.glade:1208
 msgid "Preferences"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1269
+#: portato/gui/templates/portato.glade:1243
 msgid "Debug"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1282
+#: portato/gui/templates/portato.glade:1256
 msgid "Browser command: "
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1308
+#: portato/gui/templates/portato.glade:1282
+#: portato/gui/templates/portato.glade:1709
 msgid "<b>General Options</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1358
+#: portato/gui/templates/portato.glade:1332
 msgid "<b>Update World Options</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1386
+#: portato/gui/templates/portato.glade:1360
 msgid "Sync command: "
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1407
+#: portato/gui/templates/portato.glade:1381
 msgid "<b>Sync Options</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1458
-msgid "File name to use, if package.use is a directory: "
+#: portato/gui/templates/portato.glade:1422
+msgid "<u><i>Masking Keywords</i></u>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1469
-msgid "Add only exact version to package.use"
+#: portato/gui/templates/portato.glade:1437
+msgid "<u><i>Testing Keywords</i></u>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1482
-msgid "Add only exact version to package.keywords"
+#: portato/gui/templates/portato.glade:1452
+msgid "<u><i>Use-Flags</i></u>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1496
-msgid "File name to use, if package.keywords is a directory: "
-msgstr ""
-
-#: portato/gui/templates/portato.glade:1530
-msgid "File name to use, if package.mask/package.unmask is a directory: "
-msgstr ""
-
-#: portato/gui/templates/portato.glade:1541
-msgid "Add only exact version to package.mask/package.unmask"
-msgstr ""
-
-#: portato/gui/templates/portato.glade:1563
+#: portato/gui/templates/portato.glade:1474
 msgid ""
 "<u>You may use the following placeholders:</u>\n"
 "\n"
@@ -307,86 +300,114 @@
 "<i>$(cat-1)/$(cat-2)</i>: first/second part of the category"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1589
-msgid "<u><i>Use-Flags</i></u>"
+#: portato/gui/templates/portato.glade:1498
+msgid "Add only exact version to package.mask/package.unmask"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1604
-msgid "<u><i>Testing Keywords</i></u>"
+#: portato/gui/templates/portato.glade:1512
+msgid "File name to use, if package.mask/package.unmask is a directory: "
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1619
-msgid "<u><i>Masking Keywords</i></u>"
+#: portato/gui/templates/portato.glade:1546
+msgid "File name to use, if package.keywords is a directory: "
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1636
+#: portato/gui/templates/portato.glade:1557
+msgid "Add only exact version to package.keywords"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1570
+msgid "Add only exact version to package.use"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1584
+msgid "File name to use, if package.use is a directory: "
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1610
 msgid "<b>Use Flag and Keyword Options</b>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1654
+#: portato/gui/templates/portato.glade:1628
 msgid "General"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1677
-msgid "Show emerge progress in title - similar to the console tab"
+#: portato/gui/templates/portato.glade:1665
+msgid "Enable systray"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1693
-msgid "Enable systray"
+#: portato/gui/templates/portato.glade:1678
+msgid "Show emerge progress in title - similar to the console tab"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1707
+#: portato/gui/templates/portato.glade:1692
 msgid "Hide on minimization (only if systray is enabled)"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1726
+#: portato/gui/templates/portato.glade:1743
 msgid "Console Font"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1736
+#: portato/gui/templates/portato.glade:1753
 msgid "Chose a console font"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1763
+#: portato/gui/templates/portato.glade:1770
+msgid "<b>Console Options</b>"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1810
+msgid "Package Tabs"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1835
+msgid "System Tabs"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1861
+msgid "<b>Tab Options</b>"
+msgstr ""
+
+#: portato/gui/templates/portato.glade:1885
 msgid "Visual"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1790
-#: portato/gui/templates/portato.glade:1901
+#: portato/gui/templates/portato.glade:1912
+#: portato/gui/templates/portato.glade:2023
 msgid "gtk-apply"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1850
+#: portato/gui/templates/portato.glade:1972
 msgid "Plugins"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1922
+#: portato/gui/templates/portato.glade:2044
 msgid "About Portato"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1931
+#: portato/gui/templates/portato.glade:2053
 msgid ""
 "This software is licensed under the terms of the GPLv2.\n"
 "Copyright (C) 2006-2007 René 'Necoro' Neumann <necoro@necoro.net>"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:1933
+#: portato/gui/templates/portato.glade:2055
 msgid "A Portage GUI"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:2023
+#: portato/gui/templates/portato.glade:2145
 msgid "Updateble Packages"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:2065
+#: portato/gui/templates/portato.glade:2187
 msgid "_Close"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:2077
+#: portato/gui/templates/portato.glade:2199
 msgid "Select _All"
 msgstr ""
 
-#: portato/gui/templates/portato.glade:2092
+#: portato/gui/templates/portato.glade:2214
 msgid "_Install Selected"
 msgstr ""
 
@@ -471,7 +492,7 @@
 msgstr ""
 
 #: portato/gui/gtk/windows.py:61 portato/gui/gtk/windows.py:149
-#: portato/gui/gtk/windows.py:574
+#: portato/gui/gtk/windows.py:609
 msgid "Enabled"
 msgstr ""
 
@@ -499,137 +520,150 @@
 msgid "Results"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:496
+#: portato/gui/gtk/windows.py:372
+msgid "Top"
+msgstr ""
+
+#: portato/gui/gtk/windows.py:372
+msgid "Bottom"
+msgstr ""
+
+#: portato/gui/gtk/windows.py:372
+msgid "Left"
+msgstr ""
+
+#: portato/gui/gtk/windows.py:372
+msgid "Right"
+msgstr ""
+
+#: portato/gui/gtk/windows.py:531
 msgid "<no description>"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:519
+#: portato/gui/gtk/windows.py:554
 msgid "The first homepage part does not start with 'http' or 'ftp'."
 msgstr ""
 
-#: portato/gui/gtk/windows.py:523
+#: portato/gui/gtk/windows.py:558
 msgid "Blank inside homepage."
 msgstr ""
 
-#: portato/gui/gtk/windows.py:552
+#: portato/gui/gtk/windows.py:587
 msgid "This is an expanded use flag and cannot be selected"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:576
+#: portato/gui/gtk/windows.py:611
 msgid "Flag"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:577
+#: portato/gui/gtk/windows.py:612
 msgid "Description"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:655
+#: portato/gui/gtk/windows.py:690
 #, python-format
 msgid "Package could not be found: %s"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:712 portato/gui/gtk/windows.py:813
+#: portato/gui/gtk/windows.py:747 portato/gui/gtk/windows.py:854
 msgid "Masked by user"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:888
+#: portato/gui/gtk/windows.py:929
 msgid "Loading Config"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:900
+#: portato/gui/gtk/windows.py:941
 msgid "Creating Database"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:905
+#: portato/gui/gtk/windows.py:946
 msgid "Loading Plugins"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:918
+#: portato/gui/gtk/windows.py:959
 msgid "Building frontend"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:970
+#: portato/gui/gtk/windows.py:1011
 msgid "Restoring Session"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:973
+#: portato/gui/gtk/windows.py:1014
 msgid "Finishing startup"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1025
+#: portato/gui/gtk/windows.py:1067
 msgid "Options"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1035
+#: portato/gui/gtk/windows.py:1077
 msgid "Categories"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1062
+#: portato/gui/gtk/windows.py:1104
 msgid "Packages"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1184
+#: portato/gui/gtk/windows.py:1233
 #, python-format
 msgid "Console (%(title)s)"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1300
+#: portato/gui/gtk/windows.py:1347
 msgid "use flags"
 msgstr ""
 
-#: portato/gui/gtk/windows.py:1307
+#: portato/gui/gtk/windows.py:1354
 msgid "masking keywords"
 msgstr ""
 
-#: portato/gui/gtk/views.py:70
-msgid "Package is not installed"
-msgstr ""
-
-#: portato/gui/gtk/views.py:87
-#, python-format
-msgid "No %(old)s language file installed. Falling back to %(new)s."
-msgstr ""
-
-#: portato/gui/gtk/views.py:92
-#, python-format
-msgid "No %(old)s language file installed. Disable highlighting."
-msgstr ""
-
-#: portato/gui/gtk/views.py:111
-#, python-format
-msgid "Error: %s"
-msgstr ""
-
 #: portato/gui/gtk/__init__.py:23
 msgid "Loading Portage"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:39
+#: portato/gui/gtk/wrapper.py:40
 msgid "oneshot"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:44
+#: portato/gui/gtk/wrapper.py:45
 #, python-format
 msgid "updating from version %s"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:46
+#: portato/gui/gtk/wrapper.py:47
 msgid "updating"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:51
+#: portato/gui/gtk/wrapper.py:52
 #, python-format
 msgid "downgrading from version %s"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:53
+#: portato/gui/gtk/wrapper.py:54
 msgid "downgrading"
 msgstr ""
 
-#: portato/gui/gtk/wrapper.py:57
+#: portato/gui/gtk/wrapper.py:58
 msgid "IUSE changes:"
 msgstr ""
 
+#: portato/gui/gtk/wrapper.py:66
+msgid "(In Progress)"
+msgstr ""
+
+#: portato/gui/gtk/wrapper.py:70
+msgid "Install"
+msgstr ""
+
+#: portato/gui/gtk/wrapper.py:75
+msgid "Uninstall"
+msgstr ""
+
+#: portato/gui/gtk/wrapper.py:81
+msgid "Update"
+msgstr ""
+
 #: portato/gui/gtk/dialogs.py:17
 msgid ""
 "There are some packages in the emerge queue and/or an emerge process is "
@@ -671,6 +705,12 @@
 msgstr ""
 
 #: portato/gui/gtk/dialogs.py:72
+msgid ""
+"This is the updates queue. You cannot remove single elements.\n"
+"Do you want to clear the whole queue instead?"
+msgstr ""
+
+#: portato/gui/gtk/dialogs.py:78
 msgid "Do you really want to clear the whole queue?"
 msgstr ""
 
@@ -712,6 +752,25 @@
 "%s"
 msgstr ""
 
+#: portato/gui/gtk/views.py:70
+msgid "Package is not installed"
+msgstr ""
+
+#: portato/gui/gtk/views.py:87
+#, python-format
+msgid "No %(old)s language file installed. Falling back to %(new)s."
+msgstr ""
+
+#: portato/gui/gtk/views.py:92
+#, python-format
+msgid "No %(old)s language file installed. Disable highlighting."
+msgstr ""
+
+#: portato/gui/gtk/views.py:111
+#, python-format
+msgid "Error: %s"
+msgstr ""
+
 #: portato/gui/gui_helper.py:125
 msgid "ALL"
 msgstr ""
=== portato.py
==================================================================
--- portato.py	(revision 636)
+++ portato.py	(patch 0.8.9.1 level 1)
@@ -102,7 +102,7 @@
 		try:
 			import shm_wrapper as shm
 		except ImportError:
-			from portato.shm import shm_wrapper as shm
+			from portato._shm import shm_wrapper as shm
 
 		mem = shm.create_memory(1024, permissions=0600)
 		sig = shm.create_semaphore(InitialValue = 0, permissions = 0600)
=== doc/TODO
==================================================================
--- doc/TODO	(revision 636)
+++ doc/TODO	(patch 0.8.9.1 level 1)
@@ -16,6 +16,7 @@
 - save/restore queue on exit/start
 - only remove already merged packages from queue
 - make sure, a package being removed from the queue is not needed as a dependency by another package
+- binary package support
 
 - "nach hause telefonieren" :)
 
@@ -38,7 +39,9 @@
 - show dependencies
 - reload package table when emerge is finished
 - dependency tree out of the installed packages
+- better display for search results
 
+
 Qt (stopped):
 ---
 - better terminal
=== doc/Changelog
==================================================================
--- doc/Changelog	(revision 636)
+++ doc/Changelog	(patch 0.8.9.1 level 1)
@@ -7,7 +7,7 @@
 - handle new "use defaults" correctly
 - allowed the permanent change of a plugin status
 - added "ALL" category
-- new design
+- new design and handling
 
 0.8.6.2:
 - changed the pipe version and use shm instead (fixes issues with kdesu)
=== _shm/__init__.py
==================================================================
=== _shm/shm_wrapper.py
==================================================================
--- _shm/shm_wrapper.py	(revision 636)
+++ _shm/shm_wrapper.py	(patch 0.8.9.1 level 1)
@@ -0,0 +1,301 @@
+# shm_wrapper - A wrapper for the shm module which provides access
+# to System V shared memory and semaphores on *nix systems.
+#
+# Copyright (c) 2007 by Philip Semanchuk
+# Contact info at http://NikitaTheSpider.com/
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+
+# Python modules
+import random
+import sys
+
+# Third party modules
+import shm
+
+r"""shm_wrapper - A wrapper for the shm module which provides access
+to System V shared memory and semaphores on *nix systems.
+
+The module shm is a Python wrapper around system functions like shmget. This
+module in turn offers higher-level, more Pythonic access to shared memory and
+semaphores.
+
+Full documentation is online at http://NikitaTheSpider.com/python/shm/
+
+"""
+
+def create_memory(size, permissions = 0666, InitCharacter = ' '):
+    """ Creates a new shared memory segment. One can destroy it either by calling the
+    module-level method remove_memory() or by calling the .remove() method of a handle to
+    said memory.
+    """
+    memory = None
+
+    # I create the memory using a randomly-generated key. I keep trying until I find one
+    # that works or until I hit an error.
+    while not memory:
+        key = random.randint(1, sys.maxint - 1)
+        try:
+            memory = shm.create_memory(key, size, permissions)
+        except shm.error, ExtraData:
+            if shm.memory_haskey(key):
+                # Oops, bad luck, the key exists. I'll try another. I can't call
+                # memory_haskey() before calling create_memory() because that would create
+                # a race condition where I could verify a key is not used but then another
+                # process could call create_memory() with that key before I got a chance to
+                # do so.
+                pass
+            else:
+                # Uh-oh, something fundamental is wrong.
+                raise shm.error, ExtraData
+
+    # Here I implicitly discard the memory handle object returned to me by shm and instead
+    # return my own handle to the shared memory segment.
+    memory = SharedMemoryHandle(key)
+
+    memory.write(InitCharacter[0] * memory.size)
+
+    return memory
+
+
+def remove_memory(key):
+    # Destroys the shared memory segment. Raises KeyError if the key doesn't exist.
+    shm.remove_memory(shm.getshmid(key))
+
+
+class SharedMemoryHandle(object):
+    def __init__(self, key):
+        self._MemoryHandle = None
+
+        # getshmid will raise a KeyError if there's no memory segment with this key.
+        shmid = shm.getshmid(key)
+        self._MemoryHandle = shm.memory(shmid)
+
+
+    def __del__(self):
+        if self._MemoryHandle:
+            # This will raise an error if the memory has been destroyed.
+            try:
+                if self._MemoryHandle.attached:
+                    self._MemoryHandle.detach()
+            except shm.error:
+                pass
+
+
+    def remove(self):
+        if self._MemoryHandle:
+            if self._MemoryHandle.attached:
+                self._MemoryHandle.detach()
+
+            shm.remove_memory(self._MemoryHandle.shmid)
+            self._MemoryHandle = None
+
+
+    def read(self, NumberOfBytes = 0, offset = 0):
+        if not self._MemoryHandle.attached:
+            self._MemoryHandle.attach()
+
+        if not NumberOfBytes:
+            NumberOfBytes = self._MemoryHandle.size - offset
+
+        return self._MemoryHandle.read(NumberOfBytes, offset)
+
+
+    def write(self, s, offset = 0):
+        if not self._MemoryHandle.attached:
+            self._MemoryHandle.attach()
+
+        self._MemoryHandle.write(s, offset)
+
+
+    # Properties start here ================================================================
+
+    # key
+    def __get_key(self): return self._MemoryHandle.key
+    def __set_key(self, foo): raise AttributeError
+    key = property(__get_key, __set_key)
+
+    # size of segment
+    def __get_size(self): return self._MemoryHandle.size
+    def __set_size(self, foo): raise AttributeError
+    size = property(__get_size, __set_size)
+
+    # permissions
+    def __get_permissions(self): return self._MemoryHandle.perm
+    def __set_permissions(self, permissions): self._MemoryHandle.setperm(permissions)
+    permissions = property(__get_permissions, __set_permissions)
+
+    # The number of processes currently attached to this memory segment.
+    def __get_number_attached(self): return self._MemoryHandle.nattch
+    def __set_number_attached(self, foo): raise AttributeError
+    number_attached = property(__get_number_attached, __set_number_attached)
+
+    # segment's uid
+    def __get_uid(self): return self._MemoryHandle.uid
+    def __set_uid(self, uid): self._MemoryHandle.setuid(uid)
+    uid = property(__get_uid, __set_uid)
+
+    # segment's gid
+    def __get_gid(self): return self._MemoryHandle.gid
+    def __set_gid(self, gid): self._MemoryHandle.setgid(gid)
+    gid = property(__get_gid, __set_gid)
+
+    # Creator uid (read-only)
+    def __get_creator_uid(self): return self._MemoryHandle.cuid
+    def __set_creator_uid(self, foo): raise AttributeError
+    creator_uid = property(__get_creator_uid, __set_creator_uid)
+
+    # Creator gid (read-only)
+    def __get_creator_gid(self): return self._MemoryHandle.cgid
+    def __set_creator_gid(self, foo): raise AttributeError
+    creator_gid = property(__get_creator_gid, __set_creator_gid)
+
+    # Creator pid (read-only)
+    def __get_creator_pid(self): return self._MemoryHandle.cpid
+    def __set_creator_pid(self, foo): raise AttributeError
+    creator_pid = property(__get_creator_pid, __set_creator_pid)
+
+    # pid of last process to operate on this segment (read-only)
+    def __get_last_pid(self): return self._MemoryHandle.lpid
+    def __set_last_pid(self, foo): raise AttributeError
+    last_pid = property(__get_last_pid, __set_last_pid)
+
+
+
+def create_semaphore(InitialValue = 1, permissions = 0666):
+    """ Creates a new semaphore. One can destroy it either by calling the
+    module-level method remove_semaphore() or by calling the .remove() method of a
+    handle to said semaphore.
+    """
+    semaphore = None
+
+    # I create the semaphore using a randomly-generated key. I keep trying until I find one
+    # that works or until I hit an error.
+    while not semaphore:
+        key = random.randint(1, sys.maxint - 1)
+        try:
+            semaphore = shm.create_semaphore(key, InitialValue, permissions)
+        except shm.error, ExtraData:
+            if shm.semaphore_haskey(key):
+                # Oops, bad luck, the key exists. I'll try another. I can't call
+                # memory_haskey() before calling create_semaphore() because that would create
+                # a race condition where I could verify a key is not used but then another
+                # process could call create_semaphore() with that key before I got a chance to
+                # do so.
+                pass
+            else:
+                # Uh-oh, something fundamental is wrong.
+                raise ExtraData
+
+    # Here I implicitly discard the semaphore object returned to me by shm and instead
+    # return my own handle to the semaphore.
+    return SemaphoreHandle(key)
+
+
+def remove_semaphore(key):
+    # Destroys the semaphore. Raises KeyError if the key doesn't exist.
+    shm.remove_semaphore(shm.getsemid(key))
+
+
+class SemaphoreHandle(object):
+    def __init__(self, key):
+        # getsemid will raise a KeyError if appropriate.
+        self._SemaphoreHandle = shm.semaphore(shm.getsemid(key))
+
+
+    def remove(self):
+        shm.remove_semaphore(self._SemaphoreHandle.semid)
+        self._SemaphoreHandle = None
+
+
+    def P(self):
+        # P = prolaag = probeer te verlagen (try to decrease)
+        self._SemaphoreHandle.P()
+
+
+    def V(self):
+        # V = verhoog (increase)
+        self._SemaphoreHandle.V()
+
+
+    def Z(self):
+        # Z = block until Zee semaphore is Zero
+        self._SemaphoreHandle.Z()
+
+
+    # Properties start here ================================================================
+    def __get_key(self): return self._SemaphoreHandle.key
+    def __set_key(self, foo): raise AttributeError
+    key = property(__get_key, __set_key)
+
+
+    def __get_value(self): return self._SemaphoreHandle.val
+    def __set_value(self, value): self._semaphore.setval(value)
+    value = property(__get_value, __set_value)
+
+
+    def __get_WaitingForZero(self): return self._SemaphoreHandle.zcnt
+    def __set_WaitingForZero(self, foo): raise AttributeError
+    WaitingForZero = property(__get_WaitingForZero, __set_WaitingForZero)
+
+
+    def __get_WaitingForNonZero(self): return self._SemaphoreHandle.ncnt
+    def __set_WaitingForNonZero(self, foo): raise AttributeError
+    WaitingForNonZero = property(__get_WaitingForNonZero, __set_WaitingForNonZero)
+
+
+    def __get_blocking(self): return self._SemaphoreHandle.blocking
+    def __set_blocking(self, block): self._SemaphoreHandle.setblocking(block)
+    blocking = property(__get_blocking, __set_blocking)
+
+
+    def __get_undo(self): raise AttributeError
+    def __set_undo(self, undo): self._SemaphoreHandle.setundo(undo)
+    undo = property(__get_undo, __set_undo)
+
+
+    # segment's uid
+    def __get_uid(self): return self._SemaphoreHandle.uid
+    def __set_uid(self, uid): self._SemaphoreHandle.setuid(uid)
+    uid = property(__get_uid, __set_uid)
+
+
+    # segment's gid
+    def __get_gid(self): return self._SemaphoreHandle.gid
+    def __set_gid(self, gid): self._SemaphoreHandle.setgid(gid)
+    gid = property(__get_gid, __set_gid)
+
+
+    # Creator uid (read-only)
+    def __get_creator_uid(self): return self._SemaphoreHandle.cuid
+    def __set_creator_uid(self, foo): raise AttributeError
+    creator_uid = property(__get_creator_uid, __set_creator_uid)
+
+
+    # Creator gid (read-only)
+    def __get_creator_gid(self): return self._SemaphoreHandle.cgid
+    def __set_creator_gid(self, foo): raise AttributeError
+    creator_gid = property(__get_creator_gid, __set_creator_gid)
+
+
+    # Creator pid -- since semaphores have a lot of the same properties as memory
+    # objects, one would expect creator PID to be exposed here, but it isn't
+    # made available by the system (true AFAICT for BSDs, OS X and Solaris).
+
+
+    # pid of last process to operate on this segment (read-only)
+    def __get_last_pid(self): return self._SemaphoreHandle.lpid
+    def __set_last_pid(self, foo): raise AttributeError
+    last_pid = property(__get_last_pid, __set_last_pid)
=== _shm/shmmodule.c
==================================================================
--- _shm/shmmodule.c	(revision 636)
+++ _shm/shmmodule.c	(patch 0.8.9.1 level 1)
@@ -0,0 +1,1396 @@
+/****************************************************************************
+ *
+ * shmmodule.c Copyright 1997, 1998 by INRIA. All rights reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY WARRANTIES, EXPRESS OR IMPLIED,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ *
+ * IN NO EVENT SHALL THE INRIA OR THE AUTHORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES,
+ * INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
+ * LOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION, HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT,
+ * INCLUDING NEGLIGENCE OR OTHERWISE, ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ ***************************************************************************/
+
+/* Python Shared Memory module 
+   Written by Vladimir Marangozov  
+   Adopted by Philip Semanchuk 
+
+  This module provides an interface to System V shared memory IPC.
+
+  Version history:
+  - 1.0 (sometime in the 1990s) - Released by Mr. Marangozov
+  - 1.1 (Feb 2007) - Released by me, Philip Semanchuk. Fixes a few bugs (including some 
+        memory leaks) and adds the ability to read the blocking flag on semaphores.
+  - 1.1.1 (Mar 2007)- Updated setup.py to handle compile options for Linux users.
+  - 1.1.2 (Nov 2007) - Fixed a sprintf() format in repr to handle size_t.
+  - 1.1.3 (Nov 2007) - Changed #define of key to _key instead of __key for OS X Leopard.
+        Thanks to Bill Hart.
+  - 1.1.4 (Jan 2008) - Changed the reference to key in the ipc_perm structure to the 
+        explicit #define IPC_PERM_KEY_NAME. 
+
+  See http://NikitaTheSpider.com/python/shm/ for more thorough documentation, a more Pythonic 
+  wrapper, updates, contact info, setup.py, etc.
+
+
+  Module interface:
+
+  - shm.create_memory(int Key, int Size [,int Perm=0666]) --> object
+  - shm.create_semaphore(int Key [,int Value=1 [,int Perm=0666]]) --> object
+  - shm.error
+  - shm.ftok(string Path, int ProjId) --> int
+  - shm.getsemid(int Key) --> int
+  - shm.getshmid(int Key) --> int
+  - shm.memory(int Shmid) --> object
+  - shm.memory_haskey(int Key) --> int
+  - shm.remove_memory(int Shmid) --> None
+  - shm.remove_semaphore(int Semid) --> None
+  - shm.semaphore(int Semid) --> object
+  - shm.semaphore_haskey(int Key) --> int
+
+  Memory Objects:
+
+  + Members:
+
+    - m.addr	- attachment address in the process address space
+    - m.attached	- 0|1
+    - m.cgid	- gid of creator
+    - m.cpid	- pid of creator
+    - m.cuid	- uid of creator
+    - m.gid		- gid of owner
+    - m.key		- segment key or IPC_PRIVATE (=0)
+    - m.lpid	- pid of last shmop
+    - m.nattch	- current # of attached processes
+    - m.perm	- operation permission
+    - m.shmid	- shared memory segment id
+    - m.size	- segment size
+    - m.uid		- uid of owner
+
+  + Methods:
+
+    - m.attach([int Addr=0 [,int How=0]]) --> None
+    - m.detach() --> None
+    - m.read(int Nbytes [,int Offset=0]) --> string
+    - m.setgid(int Gid) --> None
+    - m.setperm(int Perm) --> None
+    - m.setuid(int Uid) --> None
+    - m.write(string Data [,int Offset=0]) --> None
+
+  Semaphore Objects:
+
+  + Members:
+
+    - s.cgid        - gid of creator
+    - s.cuid        - uid of creator
+    - s.gid         - gid of owner
+    - s.key         - semaphore key or IPC_PRIVATE (=0)
+    - s.lpid        - pid of last semop
+    - s.ncnt        - current # of processes waiting for s.val > 0
+    - s.perm        - operation permission
+    - s.semid       - semaphore id
+    - s.uid         - uid of owner
+    - s.val         - value of the semaphore counter
+    - s.zcnt        - current # of processes waiting for s.val == 0
+    - s.blocking    - whether or not the semaphore is in blocking mode
+
+  + Methods:
+
+    - s.P() --> None		- blocks if s.val == 0; decrements s.val
+    - s.V() --> None		- increments s.val
+    - s.Z() --> None		- blocks until s.val == 0
+    - s.setblocking(0|1) --> None
+    - s.setgid(int Gid) --> None
+    - s.setperm(int Perm) --> None
+    - s.setuid(int Uid) --> None
+    - s.setundo(0|1) --> None
+    - s.setval(int Value) --> None
+
+*/
+
+/* ------------------------------------------------------------------------- */
+#include "Python.h"
+#include "structmember.h"
+
+/* v1.1 - added */
+#ifdef __FreeBSD__
+#include <machine/param.h>  /* for system definition of PAGE_SIZE */
+#endif
+
+#include <sys/types.h>
+#include <sys/ipc.h>		/* for system's IPC_xxx definitions */
+#include <sys/shm.h>		/* for shmget, shmat, shmdt, shmctl */
+#include <sys/sem.h>		/* for semget, semctl, semop */
+
+/* v1.1.4 - The name of this member varies and is sniffed out by setup.py. */
+#if defined(ZERO_UNDERSCORE_KEY)
+#define IPC_PERM_KEY_NAME   key
+#elif defined(ONE_UNDERSCORE_KEY)
+#define IPC_PERM_KEY_NAME  _key
+#elif defined(TWO_UNDERSCORE_KEY)
+#define IPC_PERM_KEY_NAME __key
+#endif
+
+/*
+-- Exception type for errors detected by this module.
+*/
+
+static PyObject *PyShm_Error;
+
+/*
+-- Convenience function to raise an error according to errno.
+*/
+
+static PyObject *
+PyShm_Err(void)
+{
+    return PyErr_SetFromErrno(PyShm_Error);
+}
+
+/*
+-- The object holding a shared memory segment
+*/
+
+typedef struct {
+    PyObject_HEAD
+    int shmid;			/* shared memory id	*/
+    int mode;			/* attachment mode	*/
+    void *addr;			/* shmseg start address	*/
+    struct shmid_ds ds;		/* data structure	*/
+} PyShmMemoryObject;
+
+staticforward PyTypeObject	PyShmMemory_Type;
+
+#define PyShmObj		PyShmMemoryObject
+#define PyShmMemory_Check(op)	((op)->ob_type == &PyShmMemory_Type)
+
+/*
+-- The object holding a semaphore
+*/
+
+typedef struct {
+    PyObject_HEAD
+    int semid;			/* semaphore id		*/
+    short opflag;		/* IPC_NOWAIT, SEM_UNDO	*/
+    struct semid_ds ds;		/* data structure	*/
+} PyShmSemaphoreObject;
+
+#ifndef HAVE_UNION_SEMUN
+union semun {
+    int val;                    /* used for SETVAL only */
+    struct semid_ds *buf;       /* for IPC_STAT and IPC_SET */
+    unsigned short *array;      /* used for GETALL and SETALL */
+};
+#endif
+
+typedef union semun semctl_arg;
+
+staticforward PyTypeObject	PyShmSemaphore_Type;
+
+#define PyShmSemObj		PyShmSemaphoreObject
+#define PyShmSemaphore_Check(op) ((op)->ob_type == &PyShmSemaphore_Type)
+
+/*
+-- Internal dictionaries for Python memory and semaphore objects
+*/
+
+static PyObject *shm_dict = NULL;
+static PyObject *sem_dict = NULL;
+
+/************************************************************/
+/*                       Memory Objects                     */
+/************************************************************/
+
+/* This is to check the validity of a Python memory object
+   (and to refresh its data status structure). Notably, we
+   have to check that the real memory segment it points to
+   is still in memory and hasn't changed (test its id and
+   size). It could be that the segment has been removed and
+   created again by someone else with the same key. This is
+   fine as far as the segment (1) has the same id and size,
+   and (2) is accessible via shmctl. If you have a better
+   test, you're welcome :-) */
+
+static int
+check_memory_identity(PyShmObj *o)
+{
+    int new_shmid;
+    int old_shmid = o->shmid;
+    int old_size = o->ds.shm_segsz;
+    key_t old_key = o->ds.shm_perm.IPC_PERM_KEY_NAME;
+
+    /*
+    -- 1. Try to get the segment identified by the old key (if not IPC_PRIVATE)
+    -- 2. On failure or on mismatch of the new and the old id -> fail.
+    -- 3. Try to refresh the object's status using the new id.
+    -- 4. On failure (the segment cannot be accessed) -> fail.
+    -- 5. Finaly, compare the old size and the one we got via the new id.
+    */
+    if (old_key != IPC_PRIVATE) {
+        new_shmid = shmget(old_key, 0, 0);
+        if (new_shmid != old_shmid)
+            return 0;
+    }
+    else
+        new_shmid = old_shmid;
+    if ((shmctl(new_shmid, IPC_STAT, &(o->ds)) != -1) &&
+        (old_size == o->ds.shm_segsz) &&
+	    (old_key == o->ds.shm_perm.IPC_PERM_KEY_NAME))
+        return 1;
+    return 0;
+}
+
+/* Convenience macro for updating the shared memory data status structure */
+
+#define refresh_memory_status(o)					\
+    if (!check_memory_identity(o)) {					\
+	   PyErr_SetString(PyShm_Error, "can't access shared memory segment");		\
+	   return NULL;							\
+    }
+
+/*
+-- attach([,address=0 [,how=0]])
+*/
+
+/* Attach the shared memory segment to the process address space */
+
+static PyObject *
+PyShmMemory_attach(PyShmObj *self, PyObject *args)
+{
+    unsigned long address = 0;
+    int mode = 0;
+    void *addr, *old_addr;
+
+    if (!PyArg_ParseTuple(args, "|li", &address, &mode))
+	   return NULL;
+    refresh_memory_status(self);
+    /* return if already attached with the same mode to the same address */
+    if ((self->addr != NULL) && (self->mode == mode) &&
+        ((address == 0) || (self->addr == (void *)address))) {
+    	Py_INCREF(Py_None);
+    	return Py_None;
+    }
+    /* perform the attach */
+    addr = (void *)shmat(self->shmid, (void *)address, mode);
+    if (addr  == (void *)-1)
+	   return PyShm_Err();
+    old_addr = self->addr;
+    self->addr = addr;
+    self->mode = mode;
+    /* XXX - multiple attachments of the same shared memory segment
+             to different locations of the process address space is
+	     not supported. */
+    shmdt(old_addr);
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- detach()
+*/
+
+/* Detach the memory object from the process address space */
+
+static PyObject *
+PyShmMemory_detach(PyShmObj *self, PyObject *args)
+{
+    if (!PyArg_NoArgs(args))
+	   return NULL;
+    if (self->addr != NULL) {
+        refresh_memory_status(self);
+        if (shmdt(self->addr) != 0)
+            return PyShm_Err();
+        self->addr = NULL;		/* mark as detached */
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- read(int Nbytes [,int Offset=0]) --> string
+*/
+
+/* Return a string of n bytes peeked from the shared memory segment */
+
+static PyObject *
+PyShmMemory_read(PyShmObj *self, PyObject *args)
+{
+    unsigned long n, offset = 0;
+    char buf[128];
+    char *addr;
+
+    if (!PyArg_ParseTuple(args, "l|l", &n, &offset))
+	    return NULL;
+    refresh_memory_status(self);
+    if (self->addr == NULL) {
+        PyErr_SetString(PyShm_Error, "R/W operation on detached memory");
+        return NULL;
+    }
+    if ((unsigned long)self->ds.shm_segsz < (n + offset)) {
+        sprintf(buf, "read() argument%s exceed%s upper memory limit",
+            offset ? "s" : "", offset ? "" : "s");
+        PyErr_SetString(PyShm_Error, buf);
+        return NULL;
+    }
+    addr = (char *)((unsigned long)self->addr + offset);
+    return PyString_FromStringAndSize(addr, n);
+}
+
+/*
+-- setgid(int Gid)
+*/
+
+static PyObject *
+PyShmMemory_setgid(PyShmObj *self, PyObject *args)
+{
+    long newgid, oldgid;
+
+    if (!PyArg_ParseTuple(args, "l", &newgid))
+	    return NULL;
+    refresh_memory_status(self);
+    oldgid = (long)self->ds.shm_perm.gid;
+    self->ds.shm_perm.gid = (gid_t)newgid;
+    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
+        self->ds.shm_perm.gid = (gid_t)oldgid;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setperm(int Perm)
+*/
+
+static PyObject *
+PyShmMemory_setperm(PyShmObj *self, PyObject *args)
+{
+    long newmode, oldmode;
+
+    if (!PyArg_ParseTuple(args, "l", &newmode))
+        return NULL;
+    refresh_memory_status(self);
+    newmode &= 0777;	/* permission bits only */
+    oldmode = (mode_t)self->ds.shm_perm.mode;
+    self->ds.shm_perm.mode ^= 0777;
+    self->ds.shm_perm.mode |= (mode_t)newmode;
+    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
+        self->ds.shm_perm.mode = (mode_t)oldmode;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setuid(int Uid)
+*/
+
+static PyObject *
+PyShmMemory_setuid(PyShmObj *self, PyObject *args)
+{
+    long newuid, olduid;
+
+    if (!PyArg_ParseTuple(args, "l", &newuid))
+        return NULL;
+    refresh_memory_status(self);
+    olduid = (long)self->ds.shm_perm.uid;
+    /* v1.1 - fixed typo that set the group id rather than the user id */
+    self->ds.shm_perm.uid = (uid_t)newuid;
+    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
+        self->ds.shm_perm.uid = (uid_t)olduid;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- write(string Data [, int Offset=0])
+*/
+
+/* Write a string to the shared memory segment. */
+
+static PyObject *
+PyShmMemory_write(PyShmObj *self, PyObject *args)
+{
+    char *data;
+    unsigned long n, offset = 0;
+    char buf[128];
+    char *addr;
+
+    if (!PyArg_ParseTuple(args, "s#|l", &data, &n, &offset))
+        return NULL;
+    refresh_memory_status(self);
+    if (self->addr == NULL) {
+        PyErr_SetString(PyShm_Error, "R/W operation on detached memory");
+        return NULL;
+    }
+    if (self->mode & SHM_RDONLY) {
+        PyErr_SetString(PyShm_Error,
+                "can't write on read-only attached memory");
+        return NULL;
+    }
+    if ((unsigned long)self->ds.shm_segsz < (n + offset)) {
+        sprintf(buf, "write() argument%s exceed%s upper memory limit",
+            offset ? "s" : "", offset ? "" : "s");
+        PyErr_SetString(PyShm_Error, buf);
+        return NULL;
+    }
+    addr = (void *)((unsigned long)self->addr + offset);
+    memcpy(addr, data, n);
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/* List of methods for shared memory objects */
+
+static PyMethodDef memory_methods[] = {
+    {"attach",	(PyCFunction)PyShmMemory_attach,	1,
+     "attach([int Addr=0 [,int How=0]]) --> None | except shm.error"},
+    {"detach",	(PyCFunction)PyShmMemory_detach,	0,
+     "detach() --> None | except shm.error"},
+    {"read",	(PyCFunction)PyShmMemory_read,		1,
+     "read(int Nbytes [,int Offset=0]) --> string | except shm.error"},
+    {"setgid",	(PyCFunction)PyShmMemory_setgid,	1,
+     "setgid(int Gid) --> None | except shm.error"},
+    {"setperm",	(PyCFunction)PyShmMemory_setperm,	1,
+     "setperm(int Perm) --> None | except shm.error"},
+    {"setuid",	(PyCFunction)PyShmMemory_setuid,	1,
+     "setuid(int Uid) --> None | except shm.error"},
+    {"write",	(PyCFunction)PyShmMemory_write,		1,
+     "write(string Data [,int Offset=0]) --> None | except shm.error"},
+    {NULL,	NULL}		/* sentinel */
+};
+
+#define OFF(x)	offsetof(PyShmMemoryObject, x)
+#define OFF1(x)	OFF(ds) + offsetof(struct shmid_ds, x)
+#define OFF2(x)	OFF1(shm_perm) + offsetof(struct ipc_perm, x)
+
+/* List of members for shared memory objects */
+
+/* Note: member types are set in the initshm function.
+   Members which need separate processing are:
+   - addr --> it is not part of the shmid_ds structure
+   - attached --> function depending on addr
+   - nattch  --> system dependent declaration in shmid_ds (unknown type)
+   - perm --> return permission (lower 9) bits only of ds.shm_perm.mode
+*/
+
+static struct memberlist memory_memberlist[] = {
+    {"cgid",	T_INT,	OFF2(cgid),		RO},	/* 0  (gid_t)  */
+    {"cpid",	T_INT,	OFF1(shm_cpid),		RO},	/* 1  (pid_t)  */
+    {"cuid",	T_INT,	OFF2(cuid),		RO},	/* 2  (uid_t)  */
+    {"key", T_INT,	OFF2(IPC_PERM_KEY_NAME),		RO},	/* 3  (key_t)  */
+    {"lpid",	T_INT,	OFF1(shm_lpid),		RO},	/* 4  (pid_t)  */
+    {"shmid",	T_INT,	OFF(shmid),		RO},	/* 5  (int)    */
+    {"size",	T_INT,	OFF1(shm_segsz),	RO},	/* 6  (int)    */
+    {"gid",	T_INT,	OFF2(gid),		RO},	/* 7  (gid_t)  */
+    {"uid",	T_INT,	OFF2(uid),		RO},	/* 8  (uid_t)  */
+    /* The following members are implemented without this table */
+    {"addr",	T_INT,	0,			RO},	/* 9  (void *) */
+    {"attached",T_INT,	0,			RO},	/* 10  (int)    */
+    {"nattch",	T_INT,	0,			RO},	/* 11 sys.dep. */
+    {"perm",	T_INT,	0,			RO},	/* 12 (mode_t) */
+    {NULL}			/* sentinel */
+};
+
+#undef OFF
+#undef OFF1
+#undef OFF2
+
+static void
+PyShmMemory_dealloc(PyShmObj *self)
+{
+    /* del shm_dict[key], ignore if it fails */
+    if (PyDict_DelItem(shm_dict, PyInt_FromLong(self->shmid)) == -1)
+        PyErr_Clear();
+    /* all references in the current process to the shared
+       memory segment are lost, so if attached, detach it.
+       XXX: This is not true when Python is embedded.
+
+    if (self->addr != NULL) {
+	shmdt(self->addr);
+    }
+    */
+    /* v1.1 - changed the reference below from PyMem_DEL to PyObject_Del.    */
+    PyObject_Del(self);
+}
+
+static PyObject *
+PyShmMemory_getattr(PyShmObj *self, char *name)
+{
+    PyObject *res;
+
+    res = Py_FindMethod(memory_methods, (PyObject *)self, name);
+    if (res != NULL)
+        return res;
+    PyErr_Clear();
+    refresh_memory_status(self);
+    if (strcmp(name, "attached") == 0)
+        return PyInt_FromLong((self->addr == NULL) ? 0 : 1);
+    if (strcmp(name, "addr") == 0) {
+        if (self->addr != NULL)
+            return PyInt_FromLong((unsigned long)self->addr);
+        else {
+            Py_INCREF(Py_None);
+            return Py_None;
+        }
+    }
+    if (strcmp(name, "nattch") == 0)
+        return PyInt_FromLong(self->ds.shm_nattch);
+    if (strcmp(name, "perm") == 0)
+        return PyInt_FromLong(self->ds.shm_perm.mode & 0777);
+    return PyMember_Get((char *)self, memory_memberlist, name);
+}
+
+static PyObject *
+PyShmMemory_repr(PyShmObj *self, char *name)
+{
+    char buf[100];
+    char buf2[20];
+
+    refresh_memory_status(self);
+    if (self->addr == NULL)
+        sprintf(buf2, "None");
+    else
+        /* v 1.1 - changed format from %lx to %p. */
+        /* v 1.1.2 - changed %u to %zu. */
+        sprintf(buf2, "0x%p", self->addr);
+    sprintf(buf, "<%s shared memory object, id=%d, size=%zu, addr=%s>",
+	    (self->addr == NULL) ? "detached" : (self->mode & SHM_RDONLY) ?
+	    "attached RO" : "attached R/W",
+	    self->shmid,
+	    self->ds.shm_segsz,
+	    buf2);
+    return PyString_FromString(buf);
+}
+
+/* Type object for shared memory objects */
+
+static PyTypeObject PyShmMemory_Type = {
+    PyObject_HEAD_INIT(&PyType_Type)
+    0,					/*ob_size*/
+    "shared memory",			/*tp_name*/
+    sizeof(PyShmObj),			/*tp_size*/
+    0,					/*tp_itemsize*/
+    /* methods */
+    (destructor)PyShmMemory_dealloc,	/*tp_dealloc*/
+    0,					/*tp_print*/
+    (getattrfunc)PyShmMemory_getattr,	/*tp_getattr*/
+    0,					/*tp_setattr*/
+    0,					/*tp_compare*/
+    (reprfunc)PyShmMemory_repr,		/*tp_repr*/
+    0,					/*tp_as_number*/
+    0,					/*tp_as_sequence*/
+    0,					/*tp_as_mapping*/
+};
+
+/************************************************************/
+/*                     Semaphore Objects                    */
+/************************************************************/
+
+/* This is to check the validity of a Python semaphore object */
+
+static int
+check_semaphore_identity(PyShmSemObj *o)
+{
+    int new_semid;
+    int old_semid = o->semid;
+    unsigned short old_nsems = o->ds.sem_nsems;
+    key_t old_key = o->ds.sem_perm.IPC_PERM_KEY_NAME;
+    semctl_arg arg;
+
+    if (old_key != IPC_PRIVATE) {
+        new_semid = semget(old_key, 0, 0);
+        if (new_semid != old_semid)
+            return 0;
+    }
+    else
+        new_semid = old_semid;
+    arg.buf = &(o->ds);
+    if ((semctl(new_semid, 0, IPC_STAT, arg) != -1) &&
+        (old_nsems == o->ds.sem_nsems) &&
+        (old_key == o->ds.sem_perm.IPC_PERM_KEY_NAME))
+        return 1;
+    return 0;
+}
+
+/* Convenience macro for updating the semaphore data status structure */
+
+#define refresh_semaphore_status(o)					\
+    if (!check_semaphore_identity(o)) {					\
+        PyErr_SetString(PyShm_Error,					\
+                "can't access semaphore");			\
+	return NULL;							\
+    }
+
+/*
+-- P()
+*/
+
+static PyObject *
+PyShmSemaphore_P(PyShmSemObj *self, PyObject *args)
+{
+    struct sembuf op[1];
+    int res;
+
+    op[0].sem_num = 0;
+    op[0].sem_op = -1;
+    op[0].sem_flg = self->opflag;
+
+    if (!PyArg_NoArgs(args))
+        return NULL;
+    refresh_semaphore_status(self);
+    res = semop(self->semid, op, (size_t)1);
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- V()
+*/
+
+static PyObject *
+PyShmSemaphore_V(PyShmSemObj *self, PyObject *args)
+{
+    struct sembuf op[1];
+    int res;
+
+    op[0].sem_num = 0;
+    op[0].sem_op = 1;
+    op[0].sem_flg = self->opflag;
+
+    if (!PyArg_NoArgs(args))
+        return NULL;
+    refresh_semaphore_status(self);
+    res = semop(self->semid, op, (size_t)1);
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- Z()
+*/
+
+static PyObject *
+PyShmSemaphore_Z(PyShmSemObj *self, PyObject *args)
+{
+    struct sembuf op[1];
+    int res;
+
+    op[0].sem_num = 0;
+    op[0].sem_op = 0;
+    op[0].sem_flg = self->opflag;
+
+    if (!PyArg_NoArgs(args))
+        return NULL;
+    refresh_semaphore_status(self);
+    res = semop(self->semid, op, (size_t)1);
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setblocking(0|1)
+*/
+
+static PyObject *
+PyShmSemaphore_setblocking(PyShmSemObj *self, PyObject *args)
+{
+    int block;
+
+    if (!PyArg_ParseTuple(args, "i", &block))
+        return NULL;
+    refresh_semaphore_status(self);
+    if (block)
+        self->opflag &= ~IPC_NOWAIT;
+    else
+        self->opflag |= IPC_NOWAIT;
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setgid(int Gid)
+*/
+
+static PyObject *
+PyShmSemaphore_setgid(PyShmSemObj *self, PyObject *args)
+{
+    long newgid, oldgid;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "l", &newgid))
+        return NULL;
+    refresh_semaphore_status(self);
+    oldgid = (long)self->ds.sem_perm.gid;
+    self->ds.sem_perm.gid = (gid_t)newgid;
+    arg.buf = &(self->ds);
+    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
+        self->ds.sem_perm.gid = (gid_t)oldgid;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setperm(int Perm)
+*/
+
+static PyObject *
+PyShmSemaphore_setperm(PyShmSemObj *self, PyObject *args)
+{
+    long newmode, oldmode;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "l", &newmode))
+        return NULL;
+    refresh_semaphore_status(self);
+    newmode &= 0777;	/* permission bits only */
+    oldmode = (mode_t)self->ds.sem_perm.mode;
+    self->ds.sem_perm.mode ^= 0777;
+    self->ds.sem_perm.mode |= (mode_t)newmode;
+    arg.buf = &(self->ds);
+    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
+        self->ds.sem_perm.mode = (mode_t)oldmode;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setuid(int Uid)
+*/
+
+static PyObject *
+PyShmSemaphore_setuid(PyShmSemObj *self, PyObject *args)
+{
+    long newuid, olduid;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "l", &newuid))
+        return NULL;
+    refresh_semaphore_status(self);
+    olduid = (long)self->ds.sem_perm.uid;
+    /* v1.1 - fixed typo that set the group id rather than the user id */
+    self->ds.sem_perm.uid = (uid_t)newuid;
+    arg.buf = &(self->ds);
+    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
+        self->ds.sem_perm.uid = (uid_t)olduid;
+        return PyShm_Err();
+    }
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setundo(0|1)
+*/
+
+static PyObject *
+PyShmSemaphore_setundo(PyShmSemObj *self, PyObject *args)
+{
+    int undo;
+
+    if (!PyArg_ParseTuple(args, "i", &undo))
+        return NULL;
+    refresh_semaphore_status(self);
+    if (undo)
+        self->opflag |= SEM_UNDO;
+    else
+        self->opflag &= ~SEM_UNDO;
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- setval(int Value)
+*/
+
+static PyObject *
+PyShmSemaphore_setval(PyShmSemObj *self, PyObject *args)
+{
+    int value;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "i", &value))
+        return NULL;
+    refresh_semaphore_status(self);
+    arg.val = value;
+    if (semctl(self->semid, 0, SETVAL, arg) == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/* List of methods for semaphore objects */
+
+static PyMethodDef semaphore_methods[] = {
+    {"P",		(PyCFunction)PyShmSemaphore_P,			0,
+     "P() --> None | except shm.error"},
+    {"V",		(PyCFunction)PyShmSemaphore_V,			0,
+     "V() --> None | except shm.error"},
+    {"Z",		(PyCFunction)PyShmSemaphore_Z,			0,
+     "Z() --> None | except shm.error"},
+    {"setblocking",	(PyCFunction)PyShmSemaphore_setblocking,	1,
+     "setblocking(0|1) --> None"},
+    {"setgid",		(PyCFunction)PyShmSemaphore_setgid,		1,
+     "setgid(int Gid) --> None | except shm.error"},
+    {"setperm",		(PyCFunction)PyShmSemaphore_setperm,		1,
+     "setperm(int Perm) --> None | except shm.error"},
+    {"setuid",		(PyCFunction)PyShmSemaphore_setuid,		1,
+     "setuid(int Uid) --> None | except shm.error"},
+    {"setundo",		(PyCFunction)PyShmSemaphore_setundo,		1,
+     "setundo(0|1) --> None"},
+    {"setval",		(PyCFunction)PyShmSemaphore_setval,		1,
+     "setval(int Value) --> None | except shm.error"},
+    {NULL,	NULL}		/* sentinel */
+};
+
+#define OFF(x)	offsetof(PyShmSemaphoreObject, x)
+#define OFF1(x)	OFF(ds) + offsetof(struct semid_ds, x)
+#define OFF2(x)	OFF1(sem_perm) + offsetof(struct ipc_perm, x)
+
+/* List of members for semaphore objects */
+
+/* Note: member types are set in the initshm function.
+   Members which need separate processing are:
+   - val, lpid, ncnt, zcnt --> in kernel memory, not accessible from a process
+   - perm --> return permission (lower 9) bits only of ds.sem_perm.mode
+   - blocking --> in opflags
+*/
+
+static struct memberlist semaphore_memberlist[] = {
+    {"cgid",	T_INT,	OFF2(cgid),		RO},	/* 0  (gid_t)  */
+    {"cuid",	T_INT,	OFF2(cuid),		RO},	/* 1  (uid_t)  */
+    {"key",	    T_INT,	OFF2(IPC_PERM_KEY_NAME),		RO},	/* 2  (key_t)  */
+    {"semid",	T_INT,	OFF(semid),		RO},	/* 3  (int)    */
+    {"gid",	    T_INT,	OFF2(gid),		RO},	/* 4  (gid_t)  */
+    {"uid",	    T_INT,	OFF2(uid),		RO},	/* 5  (uid_t)  */
+    /* The following members are implemented without this table */
+    {"lpid",	T_INT,	0,			RO},	/* 6  (ushort) */
+    {"ncnt",	T_INT,	0,			RO},	/* 7  (ushort) */
+    {"perm",	T_INT,	0,			RO},	/* 8  (mode_t) */
+    {"val",	    T_INT,	0,			RO},	/* 9  (ushort) */
+    {"zcnt",	T_INT,	0,			RO},	/* 10 (ushort) */
+    {"blocking",T_INT,	0,			RO},	/* 11 (ushort) */
+    {NULL}			/* sentinel */
+};
+
+#undef OFF
+#undef OFF1
+#undef OFF2
+
+static void
+PyShmSemaphore_dealloc(PyShmSemObj *self)
+{
+    /* del sem_dict[key], ignore if it fails */
+    if (PyDict_DelItem(sem_dict, PyInt_FromLong(self->semid)) == -1)
+        PyErr_Clear();
+    /* v1.1 - changed the reference below from PyMem_DEL to PyObject_Del.    */
+    PyObject_Del(self);
+}
+
+static PyObject *
+PyShmSemaphore_getattr(PyShmSemObj *self, char *name)
+{
+    PyObject *res;
+
+    res = Py_FindMethod(semaphore_methods, (PyObject *)self, name);
+    if (res != NULL)
+        return res;
+    PyErr_Clear();
+    refresh_semaphore_status(self);
+    if (strcmp(name, "val") == 0)
+        return PyInt_FromLong(semctl(self->semid, 0, GETVAL, 0));
+    if (strcmp(name, "lpid") == 0)
+        return PyInt_FromLong(semctl(self->semid, 0, GETPID, 0));
+    if (strcmp(name, "ncnt") == 0)
+        return PyInt_FromLong(semctl(self->semid, 0, GETNCNT, 0));
+    if (strcmp(name, "zcnt") == 0)
+        return PyInt_FromLong(semctl(self->semid, 0, GETZCNT, 0));
+    if (strcmp(name, "perm") == 0)
+        return PyInt_FromLong(self->ds.sem_perm.mode & 0777);
+    /* v1.1 - added blocking */
+    if (strcmp(name, "blocking") == 0)
+        return PyInt_FromLong(self->opflag & IPC_NOWAIT ? 0 : 1);
+    return PyMember_Get((char *)self, semaphore_memberlist, name);
+}
+
+static PyObject *
+PyShmSemaphore_repr(PyShmSemObj *self, char *name)
+{
+    /* v1.1 - added blocking */
+    char buf[200];
+
+    refresh_semaphore_status(self);
+    sprintf(buf, "<semaphore object, id=%d, val=%d, ncnt=%d, zcnt=%d, blocking=%d>",
+            self->semid,
+            semctl(self->semid, 0, GETVAL, 0),
+            semctl(self->semid, 0, GETNCNT, 0),
+            semctl(self->semid, 0, GETZCNT, 0),
+            self->opflag & IPC_NOWAIT ? 0 : 1);
+    return PyString_FromString(buf);
+}
+
+/* Type object for semaphore objects */
+
+static PyTypeObject PyShmSemaphore_Type = {
+    PyObject_HEAD_INIT(&PyType_Type)
+    0,					/*ob_size*/
+    "semaphore",			/*tp_name*/
+    sizeof(PyShmSemObj),		/*tp_size*/
+    0,					/*tp_itemsize*/
+    /* methods */
+    (destructor)PyShmSemaphore_dealloc,	/*tp_dealloc*/
+    0,					/*tp_print*/
+    (getattrfunc)PyShmSemaphore_getattr,/*tp_getattr*/
+    0,					/*tp_setattr*/
+    0,					/*tp_compare*/
+    (reprfunc)PyShmSemaphore_repr,	/*tp_repr*/
+    0,					/*tp_as_number*/
+    0,					/*tp_as_sequence*/
+    0,					/*tp_as_mapping*/
+};
+
+/************************************************************/
+/*                      Module Interface                    */
+/************************************************************/
+
+/*
+-- ftok(string Path, int ProjId) -> int
+*/
+
+/* Compute a key by using the system's ftok algorithm */
+
+static PyObject *
+PyShm_ftok(PyObject *self, PyObject *args)
+{
+    char *path;
+    char id;
+    key_t key;
+
+    if (!PyArg_ParseTuple(args, "sb", &path, &id))
+        return NULL;
+    key = ftok(path, id);
+    return PyInt_FromLong((long)key);
+}
+
+/*
+-- getshmid(int Key) --> int | except KeyError
+*/
+
+/* Return a shared memory segment id from a given key */
+
+static PyObject *
+PyShm_getshmid(PyObject *self, PyObject *args)
+{
+    long key;
+    int shmid;
+
+    if (!PyArg_ParseTuple(args, "l", &key))
+        return NULL;
+    shmid = shmget((key_t)key, 0, 0);
+    if (shmid == -1) {
+        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(key));
+        return NULL;
+    }
+    return PyInt_FromLong(shmid);
+}
+
+/*
+-- memory_haskey(int Key) --> int
+*/
+
+/* Check whether there is a shared memory segment with the given key */
+
+static PyObject *
+PyShm_memory_haskey(PyObject *self, PyObject *args)
+{
+    long key;
+    int shmid;
+
+    if (!PyArg_ParseTuple(args, "l", &key))
+        return NULL;
+    shmid = shmget((key_t)key, 0, 0);
+    return PyInt_FromLong((shmid == -1) ? 0 : 1);
+}
+
+/*
+-- memory(int Shmid) --> object | except shm.error
+*/
+
+/* Get an existing shared memory segment and return it as a python object. */
+
+static PyObject *
+PyShm_memory(PyObject *self, PyObject *args)
+{
+    int shmid;
+    PyShmObj *o;
+    PyObject *keyo;
+
+    if (!PyArg_ParseTuple(args, "i", &shmid))
+        return NULL;
+    keyo = PyInt_FromLong(shmid);
+    /* get the object from the dictionary */
+    if (PyMapping_HasKey(shm_dict, keyo)) {
+        o = (PyShmObj *)PyDict_GetItem(shm_dict, keyo);
+        Py_INCREF(o);
+    }
+    else {
+        /* not found, create it */
+        if ((o = PyObject_NEW(PyShmObj, &PyShmMemory_Type)) == NULL)
+            return NULL;
+        o->shmid = shmid;
+        o->addr = NULL;
+        o->mode = 0;
+        /* shm_dict[shmid] = o */
+        if (PyDict_SetItem(shm_dict, keyo, (PyObject *)o) == -1) {
+            Py_DECREF(o);
+            PyErr_SetString(PyShm_Error, "can't initialize shared memory object");
+            return NULL;
+        }
+        Py_DECREF(o);	/* the owned reference in shm_dict doesn't count! */
+    }
+    /* v1.1 - plugged memory leak */
+    Py_DECREF(keyo);
+    /* set up the status data */
+    if (shmctl(o->shmid, IPC_STAT, &(o->ds)) == -1) {
+        Py_DECREF(o);
+        PyErr_SetString(PyShm_Error, "can't access shared memory segment");
+        return NULL;
+    }
+    return (PyObject *)o;
+}
+
+/*
+-- create_memory(int Key, int Size [,int Perm=0666]) --> object
+*/
+
+/* Create a new shared memory segment. */
+
+static PyObject *
+PyShm_create_memory(PyObject *self, PyObject *args)
+{
+    long key;
+    int size, shmid;
+    int perm = 0666;	/* Default permission is -rw-rw-rw- */
+    PyObject *py_shmid;
+    PyObject *memory;
+
+    if (!PyArg_ParseTuple(args, "li|i", &key, &size, &perm))
+        return NULL;
+    shmid = shmget((key_t)key, size, perm | IPC_CREAT | IPC_EXCL);
+    if (shmid == -1)
+        return PyShm_Err();
+    /* v1.1 - fixed memory leak resulting from inlining Py_BuildValue */
+    py_shmid = Py_BuildValue("(i)", shmid);
+    memory = PyShm_memory(self, py_shmid);
+    Py_DECREF(py_shmid);
+
+    return memory;
+}
+
+/*
+-- remove_memory(int Shmid) --> None | except shm.error
+*/
+
+/* Remove an existing shared memory segment. */
+
+static PyObject *
+PyShm_remove_memory(PyObject *self, PyObject *args)
+{
+    int shmid, res;
+
+    if (!PyArg_ParseTuple(args, "i", &shmid))
+        return NULL;
+    res = shmctl(shmid, IPC_RMID, 0);	/* remove it */
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/*
+-- getsemid(int Key) --> int | except KeyError
+*/
+
+/* Return a semaphore id from a given key */
+
+static PyObject *
+PyShm_getsemid(PyObject *self, PyObject *args)
+{
+    long key;
+    int semid;
+
+    if (!PyArg_ParseTuple(args, "l", &key))
+        return NULL;
+    semid = semget((key_t)key, 0, 0);
+    if (semid == -1) {
+        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(key));
+        return NULL;
+    }
+    return PyInt_FromLong(semid);
+}
+
+/*
+-- semaphore_haskey(int Key) --> int
+*/
+
+/* Check whether there is a semaphore with the given key */
+
+static PyObject *
+PyShm_semaphore_haskey(PyObject *self, PyObject *args)
+{
+    long key;
+    int semid;
+
+    if (!PyArg_ParseTuple(args, "l", &key))
+        return NULL;
+    semid = semget((key_t)key, 0, 0);
+    return PyInt_FromLong((semid == -1) ? 0 : 1);
+}
+
+/*
+-- semaphore(int Semid) --> object
+*/
+
+/* Get an existing semaphore and return it as a python object. */
+
+static PyObject *
+PyShm_semaphore(PyObject *self, PyObject *args)
+{
+    int semid;
+    PyShmSemObj *o;
+    PyObject *keyo;
+    semctl_arg arg;
+
+    if (!PyArg_ParseTuple(args, "i", &semid))
+        return NULL;
+    keyo = PyInt_FromLong(semid);
+    /* get the object from the dictionary */
+    if (PyMapping_HasKey(sem_dict, keyo)) {
+        o = (PyShmSemObj *)PyDict_GetItem(sem_dict, keyo);
+        Py_INCREF(o);
+    }
+    else {
+        /* not found, create it */
+        if ((o = PyObject_NEW(PyShmSemObj, &PyShmSemaphore_Type)) == NULL)
+            return NULL;
+        o->semid = semid;
+        o->opflag = 0;
+        /* sem_dict[semid] = o */
+        if (PyDict_SetItem(sem_dict, keyo, (PyObject *)o) == -1) {
+            Py_DECREF(o);
+            PyErr_SetString(PyShm_Error, "can't initialize semaphore object");
+            return NULL;
+        }
+        Py_DECREF(o);	/* the owned reference in sem_dict doesn't count! */
+    }
+    /* v1.1 - plugged memory leak */
+    Py_DECREF(keyo);
+    /* set up the status data */
+    arg.buf = &(o->ds);
+    if (semctl(o->semid, 0, IPC_STAT, arg) == -1) {
+        Py_DECREF(o);
+        PyErr_SetString(PyShm_Error, "can't access semaphore");
+        return NULL;
+    }
+    return (PyObject *)o;
+}
+
+/*
+-- create_semaphore(int Key, [,int Value=1 [,int Perm=0666]]) --> object
+*/
+
+/* Create a new semaphore. */
+
+static PyObject *
+PyShm_create_semaphore(PyObject *self, PyObject *args)
+{
+    long key;
+    int semid;
+    int value = 1;
+    int perm = 0666;	/* Default permission is -rw-rw-rw- */
+    semctl_arg arg;
+    PyObject *py_shmid;
+    PyObject *semaphore;
+
+    if (!PyArg_ParseTuple(args, "l|ii", &key, &value, &perm))
+        return NULL;
+    semid = semget((key_t)key, 1, perm | IPC_CREAT | IPC_EXCL);
+    arg.val = value;
+    if (!((semid != -1) && (semctl(semid, 0, SETVAL, arg) != -1)))
+	   return PyShm_Err();
+    /* v1.1 - fixed memory leak resulting from inlining Py_BuildValue */
+    py_shmid = Py_BuildValue("(i)", semid);
+    semaphore = PyShm_semaphore(self, py_shmid);
+    Py_DECREF(py_shmid);
+
+    return semaphore;
+}
+
+/*
+-- remove_semaphore(int Semid) --> None | except shm.error
+*/
+
+/* Remove an existing semaphore. */
+
+static PyObject *
+PyShm_remove_semaphore(PyObject *self, PyObject *args)
+{
+    int semid, res;
+
+    if (!PyArg_ParseTuple(args, "i", &semid))
+        return NULL;
+    res = semctl(semid, 0, IPC_RMID, 0);	/* remove it */
+    if (res == -1)
+        return PyShm_Err();
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+/* List of functions exported by this module. */
+
+static PyMethodDef PyShm_methods[] = {
+    {"create_memory",		PyShm_create_memory,	1,
+     "create_memory(int Key, int Size [,int Perm=0666]) --> object | except shm.error"},
+    {"create_semaphore",	PyShm_create_semaphore,	1,
+     "create_semaphore(int Key [,int Value=1 [,int Perm=0666]]) --> object | except shm.error"},
+    {"ftok",			PyShm_ftok,		1,
+     "ftok(string Path, int ProjId) --> int | except shm.error"},
+    {"getsemid",		PyShm_getsemid,		1,
+     "getsemid(int Key) --> int | except KeyError"},
+    {"getshmid",		PyShm_getshmid,		1,
+     "getshmid(int Key) --> int | except KeyError"},
+    {"memory_haskey",		PyShm_memory_haskey,	1,
+     "memory_haskey(int Key) --> int"},
+    {"memory",			PyShm_memory,		1,
+     "memory(int Shmid) --> object | except shm.error"},
+    {"semaphore",		PyShm_semaphore,	1,
+     "semaphore(int Semid) --> object | except shm.error"},
+    {"semaphore_haskey",	PyShm_semaphore_haskey,	1,
+     "semaphore_haskey(int Key) --> int"},
+    {"remove_memory",		PyShm_remove_memory,	1,
+     "remove_memory(int Shmid) --> None | except shm.error"},
+    {"remove_semaphore",	PyShm_remove_semaphore,	1,
+     "remove_semaphore(int Semid) --> None | except shm.error"},
+    {NULL,			NULL}		/* Sentinel */
+};
+
+
+/* Initialize this module */
+
+/* This is for inserting constants in the module's dictionary */
+
+static void
+insint(PyObject *d, char *name, int value)
+{
+	PyObject *v = PyInt_FromLong((long) value);
+	if (!v || PyDict_SetItemString(d, name, v))
+		Py_FatalError("can't initialize shm module");
+
+	Py_DECREF(v);
+}
+
+/* This is to set up the type of shared memory/semaphore object members */
+
+static void
+set_member_type(struct memberlist *sxm_memberlist,
+                int index,                          /* index in memberlist */
+                int typesize                        /* sizeof(member_type) */
+               )
+{
+    int t;
+
+    if (typesize == sizeof(char))
+        t = T_UBYTE;
+    else if (typesize == sizeof(short))
+        t = T_USHORT;
+    else if (typesize == sizeof(int))
+        t = T_UINT;
+    else if (typesize == sizeof(long))
+        t = T_ULONG;
+    else
+        Py_FatalError("can't initialize shm module");
+    sxm_memberlist[index].type = t;
+};
+
+void
+initshm(void)
+{
+    PyObject *m, *d;
+
+    m = Py_InitModule("shm", PyShm_methods);
+    d = PyModule_GetDict(m);
+    PyShm_Error = PyString_FromString("shm.error");
+    if (PyShm_Error == NULL ||
+	PyDict_SetItemString(d, "error", PyShm_Error) != 0)
+	    Py_FatalError("can't define shm.error");
+    if (PyDict_SetItemString(d, "__doc__", PyString_FromString
+			     ("Interface to System V shared memory IPC")) != 0)
+        Py_FatalError("can't define shm.__doc__");
+    if ((shm_dict = PyDict_New()) == NULL || (sem_dict = PyDict_New()) == NULL)
+	   Py_FatalError("can't initialize shm module");
+
+    /* initialize the machine dependent types in memory_memberlist */
+    set_member_type(memory_memberlist, 0, sizeof(gid_t));	/* cgid   */
+    set_member_type(memory_memberlist, 1, sizeof(pid_t));	/* cpid   */
+    set_member_type(memory_memberlist, 2, sizeof(uid_t));	/* cuid   */
+    set_member_type(memory_memberlist, 3, sizeof(key_t));	/* key    */
+    set_member_type(memory_memberlist, 4, sizeof(pid_t));	/* lpid   */
+    set_member_type(memory_memberlist, 5, sizeof(int));		/* shmid  */
+    set_member_type(memory_memberlist, 6, sizeof(int));		/* size   */
+    set_member_type(memory_memberlist, 7, sizeof(gid_t));	/* gid    */
+    set_member_type(memory_memberlist, 8, sizeof(uid_t));	/* uid    */
+
+    /* initialize the machine dependent types in semaphore_memberlist */
+    set_member_type(semaphore_memberlist, 0, sizeof(gid_t));	/* cgid   */
+    set_member_type(semaphore_memberlist, 1, sizeof(uid_t));	/* cuid   */
+    set_member_type(semaphore_memberlist, 2, sizeof(key_t));	/* key    */
+    set_member_type(semaphore_memberlist, 3, sizeof(int));	/* semid  */
+    set_member_type(semaphore_memberlist, 4, sizeof(gid_t));	/* gid    */
+    set_member_type(semaphore_memberlist, 5, sizeof(uid_t));	/* uid    */
+
+    /* relevant constants for this module; the others are useless here */
+    insint(d, "IPC_PRIVATE", IPC_PRIVATE);
+    insint(d, "SHM_RDONLY", SHM_RDONLY);
+    insint(d, "SHM_RND", SHM_RND);
+#ifdef SHMLBA
+    insint(d, "SHMLBA", SHMLBA);
+#endif
+#ifdef SEM_A
+    insint(d, "SEM_A", SEM_A);
+#endif
+#ifdef SEM_R
+    insint(d, "SEM_R", SEM_R);
+#endif
+#ifdef SHM_R
+    insint(d, "SHM_R", SHM_R);
+#endif
+#ifdef SHM_W
+    insint(d, "SHM_W", SHM_W);
+#endif
+}
=== setup.py
==================================================================
--- setup.py	(revision 636)
+++ setup.py	(patch 0.8.9.1 level 1)
@@ -127,14 +127,14 @@
 	uis = [x for x in os.listdir("portato/gui/templates/ui/") if x.endswith(".ui")]
 	return [os.path.join("portato/gui/templates/ui",x) for x in uis]
 
-packages = ["portato", "portato.gui", "portato.plugins", "portato.backend", "portato.backend.portage", "portato.backend.catapult", "portato.shm"]
-ext_modules = [Extension("portato.shm.shm", ["shm/shmmodule.c"], define_macros = MacrosAndDefines, extra_compile_args=["-fPIC"])]
+packages = ["portato", "portato.gui", "portato.plugins", "portato.backend", "portato.backend.portage", "portato.backend.catapult", "portato._shm"]
+ext_modules = [Extension("portato._shm.shm", ["_shm/shmmodule.c"], define_macros = MacrosAndDefines, extra_compile_args=["-fPIC"])]
 data_files = [
 		(ICON_DIR, ["icons/portato-icon.png"]), 
 		#(PLUGIN_DIR, plugin_list("shutdown", "resume_loop")), 
 		(DATA_DIR, ["plugin.xsd"])]
 cmdclass = {}
-package_dir = {"portato.shm" : "shm"}
+package_dir = {"portato._shm" : "_shm"}
 
 if "gtk" in FRONTENDS:
 	packages.append("portato.gui.gtk")
=== portato/gui/gtk/windows.py
==================================================================
--- portato/gui/gtk/windows.py	(revision 636)
+++ portato/gui/gtk/windows.py	(patch 0.8.9.1 level 1)
@@ -37,7 +37,7 @@
 from .views import LogView, HighlightView, InstalledOnlyView
 from .dialogs import (blocked_dialog, changed_flags_dialog, io_ex_dialog,
 		nothing_found_dialog, queue_not_empty_dialog, remove_deps_dialog,
-		remove_queue_dialog, unmask_dialog)
+		remove_queue_dialog, remove_updates_dialog, unmask_dialog)
 
 class AboutWindow (AbstractDialog):
 	"""A window showing the "about"-informations."""
@@ -304,23 +304,37 @@
 			"browserEdit"		: ("browserCmd", "GUI")
 			}
 
-	def __init__ (self, parent, cfg, set_console_font):
+	# the mappings for the tabpos combos
+	tabpos = {
+			1 : gtk.POS_TOP,
+			2 : gtk.POS_BOTTOM,
+			3 : gtk.POS_LEFT,
+			4 : gtk.POS_RIGHT
+			}
+
+	def __init__ (self, parent, cfg, console_fn, linkbtn_fn, tabpos_fn):
 		"""Constructor.
 
 		@param parent: parent window
 		@type parent: gtk.Window
 		@param cfg: configuration object
 		@type cfg: gui_helper.Config
-		@param set_console_font: function to call to set the console font
-		@type set_console_font: function(string)"""
+		@param console_fn: function to call to set the console font
+		@type console_fn: function(string)
+		@param linkbtn_fn: function to call to set the linkbutton behavior
+		@type linkbtn_fn: function(string)
+		@param tabpos_fn: function to call to set the tabposition of the notebooks
+		@type tabpos_fn: function(gtk.ComboBox,int)"""
 		
 		AbstractDialog.__init__(self, parent)
 
 		# our config
 		self.cfg = cfg
 
-		# the console font setter
-		self.set_console_font = set_console_font
+		# the setter functions
+		self.console_fn = console_fn
+		self.linkbtn_fn = linkbtn_fn
+		self.tabpos_fn = tabpos_fn
 		
 		# set the bg-color of the hint
 		hintEB = self.tree.get_widget("hintEB")
@@ -348,6 +362,19 @@
 		self.consoleFontBtn = self.tree.get_widget("consoleFontBtn")
 		self.consoleFontBtn.set_font_name(self.cfg.get("consolefont", section = "GTK"))
 
+		# the comboboxes
+		self.systemTabCombo = self.tree.get_widget("systemTabCombo")
+		self.pkgTabCombo = self.tree.get_widget("packageTabCombo")
+
+		for c in (self.systemTabCombo, self.pkgTabCombo):
+			m = c.get_model()
+			m.clear()
+			for i in (_("Top"), _("Bottom"), _("Left"), _("Right")):
+				m.append((i,))
+
+		self.systemTabCombo.set_active(int(self.cfg.get("systemTabPos", section = "GTK"))-1)
+		self.pkgTabCombo.set_active(int(self.cfg.get("packageTabPos", section = "GTK"))-1)
+
 		self.window.show_all()
 
 	def _save(self):
@@ -367,9 +394,17 @@
 
 		font = self.consoleFontBtn.get_font_name()
 		self.cfg.set("consolefont", font, section = "GTK")
-		self.set_console_font(font)
+		self.console_fn(font)
+
+		pkgPos = self.pkgTabCombo.get_active()+1
+		sysPos = self.systemTabCombo.get_active()+1
+
+		self.cfg.set("packageTabPos", str(pkgPos), section = "GTK")
+		self.cfg.set("systemTabPos", str(sysPos), section = "GTK")
+
+		self.tabpos_fn(map(self.tabpos.get, (pkgPos, sysPos)))
 		
-		gtk.link_button_set_uri_hook(lambda btn, x: get_listener().send_cmd([self.cfg.get("browserCmd", section = "GUI"), btn.get_uri()]))
+		self.linkbtn_fn(self.cfg.get("browserCmd", section="GUI"))
 
 	def cb_ok_clicked(self, button):
 		"""Saves, writes to config-file and closes the window."""
@@ -642,15 +677,15 @@
 		if emerge:
 			try:
 				try:
-					self.queue.append(self.actual_package().get_cpv(), unmerge = False, update = update)
+					self.queue.append(self.actual_package().get_cpv(), type = "install", update = update)
 				except PackageNotFoundException, e:
 					if unmask_dialog(e[0]) == gtk.RESPONSE_YES:
-						self.queue.append(self.actual_package().get_cpv(), unmerge = False, unmask = True, update = update)
+						self.queue.append(self.actual_package().get_cpv(), type = "install", unmask = True, update = update)
 			except BlockedException, e:
 				blocked_dialog(e[0], e[1])
 		else:
 			try:
-				self.queue.append(self.actual_package().get_cpv(), unmerge = True)
+				self.queue.append(self.actual_package().get_cpv(), type = "uninstall")
 			except PackageNotFoundException, e:
 				error(_("Package could not be found: %s"), e[0])
 				#masked_dialog(e[0])
@@ -752,9 +787,9 @@
 		self.actual_package().remove_new_use_flags()
 		self.actual_package().remove_new_masked()
 		self.actual_package().remove_new_testing()
-		self.versList.get_model().clear()
-		self.fill_vers_list()
-		self.cb_vers_list_changed()
+		self.versionCombo.get_model().clear()
+		self.fill_version_combo()
+		self.cb_version_combo_changed()
 		if self.instantChange:
 			self._update_keywords(True, update = True)
 		return True
@@ -762,13 +797,13 @@
 	def cb_package_emerge_clicked (self, button):
 		"""Callback for pressed emerge-button. Adds the package to the EmergeQueue."""
 		self._update_keywords(True)
-		self.main.notebook.set_current_page(self.main.QUEUE_PAGE)
+		self.main.sysNotebook.set_current_page(self.main.QUEUE_PAGE)
 		return True
 
 	def cb_package_unmerge_clicked (self, button):
 		"""Callback for pressed unmerge-button clicked. Adds the package to the UnmergeQueue."""
 		self._update_keywords(False)
-		self.main.notebook.set_current_page(self.main.QUEUE_PAGE)
+		self.main.sysNotebook.set_current_page(self.main.QUEUE_PAGE)
 		return True
 
 	def cb_testing_toggled (self, button):
@@ -978,8 +1013,9 @@
 		
 		splash(_("Finishing startup"))
 		
-		# notebook
-		self.notebook = self.tree.get_widget("systemNotebook")
+		# notebooks
+		self.sysNotebook = self.tree.get_widget("systemNotebook")
+		self.pkgNotebook = self.tree.get_widget("packageNotebook")
 		self.window.show_all()
 		
 		# the hidden stuff
@@ -1025,7 +1061,7 @@
 		self.queueList.set_model(store)
 		
 		cell = gtk.CellRendererText()
-		col = gtk.TreeViewColumn(_("Queue"), cell, text = 0)
+		col = gtk.TreeViewColumn(_("Queue"), cell, markup = 0)
 		self.queueList.append_column(col)
 		
 		col = gtk.TreeViewColumn(_("Options"), cell, markup = 1)
@@ -1163,6 +1199,13 @@
 		"""Is called when we want to jump to a specific package."""
 		self.show_package(cp, self.queue, version = version)
 
+	def set_uri_hook (self, browser):
+		gtk.link_button_set_uri_hook(lambda btn, x: get_listener().send_cmd([browser, btn.get_uri()]))
+
+	def set_notebook_tabpos (self, tabposlist):
+		self.pkgNotebook.set_tab_pos(tabposlist[0])
+		self.sysNotebook.set_tab_pos(tabposlist[1])
+
 	def title_update (self, title):
 		
 		def window_title_update (title):
@@ -1189,7 +1232,7 @@
 			else: 
 				title = (_("Console (%(title)s)") % {"title" : title})
 			
-			self.notebook.set_tab_label_text(self.termHB, title)
+			self.sysNotebook.set_tab_label_text(self.termHB, title)
 
 			return False
 
@@ -1297,11 +1340,9 @@
 		tooltip.set_markup(string)
 		return string != ""
 
-	def cb_emerge_clicked (self, action):
-		"""Do emerge."""
+	def cb_execute_clicked (self, action):
+		"""Execute the current queue."""
 		
-		self.notebook.set_current_page(self.CONSOLE_PAGE)
-		
 		if len(flags.newUseFlags) > 0:
 			changed_flags_dialog(_("use flags"))
 			flags.write_use_flags()
@@ -1314,20 +1355,27 @@
 			flags.write_masked()
 			flags.write_testing()
 			system.reload_settings()
+
+		model, iter = self.queueList.get_selection().get_selected()
+
+		if iter is None:
+			if model.iter_n_children(None) == 1: # only one queue there - take this as being selected
+				iter = model.get_iter_root()
+			else:
+				return False
+
+		self.sysNotebook.set_current_page(self.CONSOLE_PAGE)
 		
-		if not self.doUpdate:
-			self.queue.emerge(force=True)
+		# test which type of queue we have here
+		if self.queueTree.is_in_emerge(iter):
+			self.queue.emerge(force = True)
+		elif self.queueTree.is_in_unmerge(iter):
+			self.queue.unmerge(force = True)
 		else:
 			self.queue.update_world(force=True, newuse = self.cfg.get_boolean("newuse"), deep = self.cfg.get_boolean("deep"))
-			self.doUpdate = False
-		
-	def cb_unmerge_clicked (self, button):
-		"""Do unmerge."""
 
-		self.notebook.set_current_page(self.CONSOLE_PAGE)
-		self.queue.unmerge(force=True)
 		return True
-
+		
 	def cb_update_clicked (self, action):
 		def __update():
 			
@@ -1335,15 +1383,15 @@
 				try:
 					try:
 						for pkg, old_pkg in updating:
-							self.queue.append(pkg.get_cpv(), unmask = False)
+							self.queue.append(pkg.get_cpv(), type = "update", unmask = False)
 					except PackageNotFoundException, e:
 						if unmask_dialog(e[0]) == gtk.RESPONSE_YES:
 							for pkg, old_pkg in updating:
-								self.queue.append(pkg.get_cpv(), unmask = True)
+								self.queue.append(pkg.get_cpv(), type = "update", unmask = True)
 
 				except BlockedException, e:
 					blocked_dialog(e[0], e[1])
-					self.queue.remove_children(self.queue.emergeIt)
+					self.queue.remove_children(self.queueTree.get_update_it())
 				
 				return False
 
@@ -1353,7 +1401,6 @@
 				updating = system.update_world(newuse = self.cfg.get_boolean("newuse"), deep = self.cfg.get_boolean("deep"))
 				debug("updating list: %s --> length: %s", [(x.get_cpv(), y.get_cpv()) for x,y in updating], len(updating))
 				gobject.idle_add(cb_idle_append, updating)
-				if len(updating): self.doUpdate = True
 			finally:
 				self.window.window.set_cursor(None)
 			
@@ -1363,29 +1410,35 @@
 
 	def cb_remove_clicked (self, button):
 		"""Removes a selected item in the (un)emerge-queue if possible."""
-		selected = self.queueList.get_selection()
+		model, iter = self.queueList.get_selection().get_selected()
 
-		if selected:
-			model, iter = selected.get_selected()
+		if iter:
+			parent = model.iter_parent(iter)
 			
-			if iter == None: return False
-
-			if not model.iter_parent(iter): # top-level
+			if self.queueTree.is_in_update(iter) and parent:
+				if remove_updates_dialog() == gtk.RESPONSE_YES:
+					self.queue.remove_with_children(self.queueTree.get_update_it())
+			
+			elif not parent: # top-level
 				if model.iter_n_children(iter) > 0: # and has children which can be removed :)
 					if remove_queue_dialog() == gtk.RESPONSE_YES :
-						self.queue.remove_children(iter)
-						self.doUpdate = False
+						self.queue.remove_with_children(iter)
+				else:
+					self.queue.remove(iter)
 			
-			elif model.iter_parent(model.iter_parent(iter)): # this is in the 3rd level => dependency
+			elif model.iter_parent(parent): # this is in the 3rd level => dependency
 				remove_deps_dialog()
 			else:
 				self.queue.remove_with_children(iter)
-				self.doUpdate = False
+
+				if model.iter_n_children(parent) == 0: # no more children left - remove queue too
+					self.queue.remove(parent)
 		
-		return True
+			return True
+		return False
 
 	def cb_sync_clicked (self, action):
-		self.notebook.set_current_page(self.CONSOLE_PAGE)
+		self.sysNotebook.set_current_page(self.CONSOLE_PAGE)
 		cmd = self.cfg.get("syncCommand")
 
 		if cmd != "emerge --sync":
@@ -1424,7 +1477,7 @@
 					SearchWindow(self.window, packages, self.jump_to)
 
 	def cb_preferences_clicked (self, button):
-		PreferenceWindow(self.window, self.cfg, self.console.set_font_from_string)
+		PreferenceWindow(self.window, self.cfg, self.console.set_font_from_string, self.set_uri_hook, self.set_notebook_tabpos)
 		return True
 
 	def cb_about_clicked (self, button):
=== portato/gui/gtk/wrapper.py
==================================================================
--- portato/gui/gtk/wrapper.py	(revision 636)
+++ portato/gui/gtk/wrapper.py	(patch 0.8.9.1 level 1)
@@ -29,8 +29,9 @@
 
 		self.tree = tree
 		self.cpv_col = col
-		self.emergeIt = self.append(None, ["Emerge", ""])
-		self.unmergeIt = self.append(None, ["Unmerge", ""])
+		self.emergeIt = None
+		self.unmergeIt = None
+		self.updateIt = None
 
 	def build_append_value (self, cpv, oneshot = False, update = False, downgrade = False, version = None, useChange = []):
 		string = ""
@@ -60,17 +61,38 @@
 
 		return [cpv, string]
 
+	def set_in_progress (self, it):
+		iter = self.tree.get_iter_from_string(self.tree.get_string_from_iter(it).split(":")[0])
+		self.tree.set_value(iter, 1, "<b>%s</b>" % _("(In Progress)"))
+
 	def get_emerge_it (self):
+		if self.emergeIt is None:
+			self.emergeIt = self.append(None, ["<b>%s</b>" % _("Install"), ""])
 		return self.emergeIt
 
 	def get_unmerge_it (self):
+		if self.unmergeIt is None:
+			self.unmergeIt = self.append(None, ["<b>%s</b>" % _("Uninstall"), ""])
+
 		return self.unmergeIt
 
+	def get_update_it (self):
+		if self.updateIt is None:
+			self.updateIt = self.append(None, ["<b>%s</b>" % _("Update"), ""])
+
+		return self.updateIt
+
+	def is_in (self, it, in_it):
+		return in_it and self.tree.get_string_from_iter(it).split(":")[0] == self.tree.get_string_from_iter(in_it)
+
 	def is_in_emerge (self, it):
-		return self.tree.get_string_from_iter(it).split(":")[0] == self.tree.get_string_from_iter(self.emergeIt)
+		return self.is_in(it, self.emergeIt)
 
 	def is_in_unmerge (self, it):
-		return self.tree.get_string_from_iter(it).split(":")[0] == self.tree.get_string_from_iter(self.unmergeIt)
+		return self.is_in(it, self.unmergeIt)
+
+	def is_in_update (self, it):
+		return self.is_in(it, self.updateIt)
 	
 	def iter_has_parent (self, it):
 		return (self.tree.iter_parent(it) != None)
@@ -90,10 +112,18 @@
 	def get_value (self, it, column):
 		return self.tree.get_value(it, column)
 
+	def iter_equal (self, it, other_it):
+		return self.tree.get_string_from_iter(it) == self.tree.get_string_from_iter(other_it)
+
 	def append (self, parent = None, values = None):
 		return self.tree.append(parent, values)
 
 	def remove (self, it):
+		
+		if self.emergeIt and self.iter_equal(it, self.emergeIt) : self.emergeIt = None
+		elif self.unmergeIt and self.iter_equal(it, self.unmergeIt) : self.unmergeIt = None
+		elif self.updateIt and self.iter_equal(it, self.updateIt) : self.updateIt = None
+		
 		self.tree.remove(it)
 
 	def get_original (self):
=== portato/gui/gtk/dialogs.py
==================================================================
--- portato/gui/gtk/dialogs.py	(revision 636)
+++ portato/gui/gtk/dialogs.py	(patch 0.8.9.1 level 1)
@@ -68,6 +68,12 @@
 	infoMB.destroy()
 	return ret
 
+def remove_updates_dialog():
+	askMB = gtk.MessageDialog(None, gtk.DIALOG_MODAL, gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO, _("This is the updates queue. You cannot remove single elements.\nDo you want to clear the whole queue instead?"))
+	ret = askMB.run()
+	askMB.destroy()
+	return ret
+
 def remove_queue_dialog ():
 	askMB = gtk.MessageDialog(None, gtk.DIALOG_MODAL, gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO, _("Do you really want to clear the whole queue?"))
 	ret = askMB.run()
=== portato/gui/wrapper.py
==================================================================
--- portato/gui/wrapper.py	(revision 636)
+++ portato/gui/wrapper.py	(patch 0.8.9.1 level 1)
@@ -125,6 +125,26 @@
 		@rtype: boolean"""
 		raise NotImplementedError
 
+	def is_in_emerge (self, it):
+		"""Checks whether an iterator is part of the "Update" section.
+
+		@param it: the iterator to check
+		@type it: Iterator
+		@returns: True if the iter is part; False otherwise
+		@rtype: boolean"""
+		raise NotImplementedError
+
+	def iter_equal (self, it, other_it):
+		"""Checks whether to iterators are equal.
+
+		@param it: the one iterator to compare
+		@type it: Iterator
+		@param other_it: the other iterator to compare
+		@type other_it: Iterator
+		@returns: True if both iterators are equal; False otherwise
+		@rtype boolean"""
+		raise NotImplementedError
+
 	def get_emerge_it (self):
 		"""Returns an iterator signaling the top of the emerge section.
 
@@ -139,6 +159,20 @@
 		@rtype: Iterator"""
 		raise NotImplementedError
 
+	def get_update_it (self):
+		"""Returns an iterator signaling the top of the update section.
+
+		@returns: unmerge-iterator
+		@rtype: Iterator"""
+		raise NotImplementedError
+
+	def set_in_progress (self, it):
+		"""Marks the queue where the given iterator belongs as being in progress.
+
+		@param it: one iterator of the queue to mark to
+		@type it: Iterator"""
+		raise NotImplementedError
+
 	def build_append_value (self, cpv, oneshot = False, update = False, downgrade = False, version = None, useChange = []):
 		"""Builds the list, which is going to be passed to append. 
 
=== portato/gui/gui_helper.py
==================================================================
--- portato/gui/gui_helper.py	(revision 636)
+++ portato/gui/gui_helper.py	(patch 0.8.9.1 level 1)
@@ -264,13 +264,6 @@
 		self.db = db
 		self.title_update = title_update
 
-		# our iterators pointing at the toplevels; they are set to None if we do not have a tree
-		if self.tree: 
-			self.emergeIt = self.tree.get_emerge_it()
-			self.unmergeIt = self.tree.get_unmerge_it()
-		else:
-			self.emergeIt = self.unmergeIt = None
-
 	def _get_pkg_from_cpv (self, cpv, unmask = False):
 		"""Gets a L{backend.Package}-object from a cpv.
 
@@ -390,14 +383,14 @@
 				self.remove_with_children(subIt)
 				raise
 		
-	def append (self, cpv, unmerge = False, update = False, forceUpdate = False, unmask = False, oneshot = False):
+	def append (self, cpv, type = "install", update = False, forceUpdate = False, unmask = False, oneshot = False):
 		"""Appends a cpv either to the merge queue or to the unmerge-queue.
 		Also updates the tree-view.
 		
 		@param cpv: Package to add
 		@type cpv: string (cat/pkg-ver)
-		@param unmerge: Set to True if you want to unmerge this package - else False.
-		@type unmerge: boolean		
+		@param type: The type of this append process. Possible values are "install", "uninstall", "update".
+		@type unmerge: string		
 		@param update: Set to True if a package is going to be updated (e.g. if the use-flags changed).
 		@type update: boolean
 		@param forceUpdate: Set to True if the update should be forced.
@@ -409,7 +402,7 @@
 		
 		@raises portato.backend.PackageNotFoundException: if trying to add a package which does not exist"""
 		
-		if not unmerge: # emerge
+		if type in ("install", "update"): # emerge
 			# insert dependencies
 			pkg = self._get_pkg_from_cpv(cpv, unmask)
 			deps = pkg.get_dep_packages()
@@ -429,14 +422,17 @@
 					
 					self.update_tree(parentIt, cpv, unmask, oneshot = oneshot)
 			else: # not update
-				self._queue_append(cpv, oneshot)
-				if self.emergeIt: 
-					self.update_tree(self.emergeIt, cpv, unmask, oneshot = oneshot)
+				if type == "install":
+					self._queue_append(cpv, oneshot)
+					if self.tree:
+						self.update_tree(self.tree.get_emerge_it(), cpv, unmask, oneshot = oneshot)
+				elif type == "update" and self.tree:
+					self.update_tree(self.tree.get_update_it(), cpv, unmask, oneshot = oneshot)
 			
 		else: # unmerge
 			self.unmergequeue.append(cpv)
-			if self.unmergeIt: # update tree
-				self.tree.append(self.unmergeIt, self.tree.build_append_value(cpv))
+			if self.tree: # update tree
+				self.tree.append(self.tree.get_unmerge_it(), self.tree.build_append_value(cpv))
 
 	def _queue_append (self, cpv, oneshot = False):
 		"""Convenience function appending a cpv either to self.mergequeue or to self.oneshotmerge.
@@ -453,8 +449,11 @@
 			if cpv not in self.oneshotmerge:
 				self.oneshotmerge.append(cpv)
 
-	def doEmerge (self, *args, **kwargs):
-		self.threadQueue.put(self.__emerge, *args, **kwargs)
+	def doEmerge (self, options, packages, it, *args, **kwargs):
+		if self.tree and it:
+			self.tree.set_in_progress(it[0])
+
+		self.threadQueue.put(self.__emerge, options, packages, it, *args, **kwargs)
 	
 	def __emerge (self, options, packages, it, command = None):
 		"""Calls emerge and updates the terminal.
@@ -530,14 +529,21 @@
 			its = []
 			for k in queue:
 				list += ["="+k]
-				its.append(self.iters[k])
+				if self.tree: its.append(self.iters[k])
 
 			return list, its
 
+		if self.tree:
+			ownit = [self.tree.get_emerge_it()]
+		else:
+			ownit = []
+
 		# oneshot-queue
 		if self.oneshotmerge:
 			# prepare package-list for oneshot
 			list, its = prepare(self.oneshotmerge)
+			if not self.mergequeue :# the other one does not exist - remove completely
+				its = ownit
 			
 			s = system.get_oneshot_option()
 			if not force: s += system.get_pretend_option()
@@ -549,6 +555,8 @@
 		if self.mergequeue:
 			# prepare package-list
 			list, its = prepare(self.mergequeue)
+			if not self.oneshotmerge: # the other one does not exist - remove completely
+				its = ownit
 
 			s = []
 			if not force: s = system.get_pretend_option()
@@ -573,8 +581,13 @@
 		if not force: s += system.get_pretend_option()
 		if options is not None: s += options
 		
-		self.doEmerge(s,list, [self.unmergeIt], caller = self.unmerge)
+		if self.tree:
+			it = [self.tree.get_unmerge_it()]
+		else:
+			it = []
 
+		self.doEmerge(s,list, it, caller = self.unmerge)
+
 	def update_world(self, force = False, newuse = False, deep = False, options = None):
 		"""Does an update world. newuse and deep are the arguments handed to emerge.
 
@@ -594,8 +607,13 @@
 		if not force: opts += system.get_pretend_option()
 		if options is not None: opts += options
 
-		self.doEmerge(opts, ["world"], [self.emergeIt], caller = self.update_world)
+		if self.tree:
+			it = [self.tree.get_update_it()]
+		else:
+			it = []
 
+		self.doEmerge(opts, ["world"], it, caller = self.update_world)
+
 	def sync (self, command = None):
 		"""Calls "emerge --sync".
 		
@@ -677,7 +695,7 @@
 		@param removeNewFlags: True if new flags should be removed; False otherwise. Default: True.
 		@type removeNewFlags: boolean"""
 		
-		if self.tree.iter_has_parent(it): # NEVER remove our top stuff
+		if self.tree.iter_has_parent(it):
 			cpv = self.tree.get_value(it, self.tree.get_cpv_column())
 			if self.tree.is_in_emerge(it): # Emerge
 				del self.iters[cpv]
@@ -698,10 +716,10 @@
 					flags.remove_new_masked(cpv)
 					flags.remove_new_testing(cpv)
 			
-			else: # in Unmerge
+			elif self.tree.is_in_unmerge(it): # in Unmerge
 				self.unmergequeue.remove(cpv)
 			
-			self.tree.remove(it)
+		self.tree.remove(it)
 
 	def is_empty (self):
 		"""Checks whether the current queue is empty and not working. Therefore it looks, whether the queues are empty,
=== portato/gui/templates/portato.glade
==================================================================
--- portato/gui/templates/portato.glade	(revision 636)
+++ portato/gui/templates/portato.glade	(patch 0.8.9.1 level 1)
@@ -86,9 +86,10 @@
                     <child>
                       <widget class="GtkImageMenuItem" id="emergeItem">
                         <property name="visible">True</property>
-                        <property name="label" translatable="yes">E_merge</property>
+                        <property name="label" translatable="yes">_Install</property>
                         <property name="use_underline">True</property>
-                        <signal name="activate" handler="cb_emerge_clicked"/>
+                        <signal name="activate" handler="cb_package_emerge_clicked"/>
+                        <accelerator key="plus" modifiers="GDK_CONTROL_MASK" signal="activate"/>
                         <child internal-child="image">
                           <widget class="GtkImage" id="menu-item-image9">
                             <property name="visible">True</property>
@@ -101,8 +102,10 @@
                     <child>
                       <widget class="GtkImageMenuItem" id="unmergeItem">
                         <property name="visible">True</property>
-                        <property name="label" translatable="yes">_Unmerge</property>
+                        <property name="label" translatable="yes">_Uninstall</property>
                         <property name="use_underline">True</property>
+                        <signal name="activate" handler="cb_package_unmerge_clicked"/>
+                        <accelerator key="minus" modifiers="GDK_CONTROL_MASK" signal="activate"/>
                         <child internal-child="image">
                           <widget class="GtkImage" id="menu-item-image10">
                             <property name="visible">True</property>
@@ -133,7 +136,7 @@
                       <widget class="GtkCheckMenuItem" id="showInstalledItem">
                         <property name="visible">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="label" translatable="yes">Show Only _Installed Packages</property>
+                        <property name="label" translatable="yes">Show _Only Installed Packages</property>
                         <property name="use_underline">True</property>
                         <signal name="toggled" handler="cb_show_installed_toggled"/>
                         <accelerator key="i" modifiers="GDK_CONTROL_MASK" signal="activate"/>
@@ -452,82 +455,88 @@
                     <property name="visible">True</property>
                     <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
                     <child>
-                      <widget class="GtkToolbar" id="packageTB">
+                      <widget class="GtkHBox" id="hbox5">
                         <property name="visible">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="icon_size">GTK_ICON_SIZE_BUTTON</property>
-                        <property name="icon_size_set">True</property>
+                        <property name="spacing">5</property>
                         <child>
-                          <widget class="GtkToolButton" id="pkgEmergeBtn">
+                          <widget class="GtkHBox" id="packageHB">
                             <property name="visible">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">Add to Emerge Queue</property>
-                            <property name="stock_id">gtk-add</property>
-                            <signal name="clicked" handler="cb_package_emerge_clicked"/>
+                            <property name="spacing">4</property>
+                            <property name="homogeneous">True</property>
+                            <child>
+                              <widget class="GtkLabel" id="nameLabel">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="label" translatable="yes">label</property>
+                              </widget>
+                            </child>
+                            <child>
+                              <widget class="GtkComboBox" id="versionCombo">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                              </widget>
+                              <packing>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
                           </widget>
-                          <packing>
-                            <property name="expand">False</property>
-                          </packing>
                         </child>
                         <child>
-                          <widget class="GtkToolButton" id="pkgUnmergeBtn">
+                          <widget class="GtkToolbar" id="packageTB">
                             <property name="visible">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">Remove from Emerge Queue</property>
-                            <property name="stock_id">gtk-remove</property>
-                            <signal name="clicked" handler="cb_package_unmerge_clicked"/>
+                            <property name="icon_size">GTK_ICON_SIZE_BUTTON</property>
+                            <property name="icon_size_set">True</property>
+                            <child>
+                              <widget class="GtkToolButton" id="pkgEmergeBtn">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="tooltip" translatable="yes">Install onto system</property>
+                                <property name="label" translatable="yes">_Install</property>
+                                <property name="use_underline">True</property>
+                                <property name="stock_id">gtk-add</property>
+                                <signal name="clicked" handler="cb_package_emerge_clicked"/>
+                              </widget>
+                            </child>
+                            <child>
+                              <widget class="GtkToolButton" id="pkgUnmergeBtn">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="tooltip" translatable="yes">Uninstall from system</property>
+                                <property name="label" translatable="yes">_Uninstall</property>
+                                <property name="use_underline">True</property>
+                                <property name="stock_id">gtk-remove</property>
+                                <signal name="clicked" handler="cb_package_unmerge_clicked"/>
+                              </widget>
+                            </child>
+                            <child>
+                              <widget class="GtkToolButton" id="pkgRevertBtn">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="tooltip" translatable="yes">Revert changes</property>
+                                <property name="label" translatable="yes">Re_vert</property>
+                                <property name="use_underline">True</property>
+                                <property name="stock_id">gtk-undo</property>
+                                <signal name="clicked" handler="cb_package_revert_clicked"/>
+                              </widget>
+                            </child>
                           </widget>
                           <packing>
-                            <property name="expand">False</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <widget class="GtkToolButton" id="pkgRevertBtn">
-                            <property name="visible">True</property>
-                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">Revert changes</property>
-                            <property name="stock_id">gtk-undo</property>
-                            <signal name="clicked" handler="cb_package_revert_clicked"/>
-                          </widget>
-                          <packing>
-                            <property name="expand">False</property>
-                          </packing>
-                        </child>
-                      </widget>
-                      <packing>
-                        <property name="expand">False</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <widget class="GtkHBox" id="packageHB">
-                        <property name="visible">True</property>
-                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="homogeneous">True</property>
-                        <child>
-                          <widget class="GtkLabel" id="nameLabel">
-                            <property name="visible">True</property>
-                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">label</property>
-                          </widget>
-                        </child>
-                        <child>
-                          <widget class="GtkComboBox" id="versionCombo">
-                            <property name="visible">True</property>
-                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                          </widget>
-                          <packing>
                             <property name="position">1</property>
                           </packing>
                         </child>
                       </widget>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="position">1</property>
+                        <property name="padding">5</property>
                       </packing>
                     </child>
                     <child>
                       <widget class="GtkNotebook" id="packageNotebook">
                         <property name="visible">True</property>
+                        <property name="tab_pos">GTK_POS_BOTTOM</property>
                         <child>
                           <widget class="GtkEventBox" id="generalEB">
                             <property name="visible">True</property>
@@ -866,7 +875,7 @@
                           <widget class="GtkLabel" id="label2">
                             <property name="visible">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="label" translatable="yes">F_iles</property>
+                            <property name="label" translatable="yes">Fi_les</property>
                             <property name="use_underline">True</property>
                           </widget>
                           <packing>
@@ -877,7 +886,7 @@
                         </child>
                       </widget>
                       <packing>
-                        <property name="position">2</property>
+                        <property name="position">1</property>
                       </packing>
                     </child>
                   </widget>
@@ -891,40 +900,22 @@
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
                     <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                    <property name="tab_pos">GTK_POS_BOTTOM</property>
                     <child>
                       <widget class="GtkVBox" id="queueVB">
                         <property name="visible">True</property>
                         <child>
-                          <widget class="GtkScrolledWindow" id="queueScroll">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-                            <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-                            <child>
-                              <widget class="GtkTreeView" id="queueList">
-                                <property name="visible">True</property>
-                                <property name="has_tooltip">True</property>
-                                <property name="headers_visible">False</property>
-                                <property name="enable_search">False</property>
-                                <signal name="button_press_event" handler="cb_right_click"/>
-                                <signal name="query_tooltip" handler="cb_queue_tooltip_queried"/>
-                                <signal name="row_activated" handler="cb_row_activated"/>
-                              </widget>
-                            </child>
-                          </widget>
-                        </child>
-                        <child>
                           <widget class="GtkHButtonBox" id="queueBB">
                             <property name="visible">True</property>
                             <property name="border_width">5</property>
                             <property name="homogeneous">True</property>
                             <property name="layout_style">GTK_BUTTONBOX_SPREAD</property>
                             <child>
-                              <widget class="GtkButton" id="emergeBtn">
+                              <widget class="GtkButton" id="executeBtn">
                                 <property name="visible">True</property>
-                                <property name="tooltip" translatable="yes">Install all packages in the "Emerge Queue"</property>
+                                <property name="tooltip" translatable="yes">Execute the current selected queue</property>
                                 <property name="response_id">0</property>
-                                <signal name="clicked" handler="cb_emerge_clicked"/>
+                                <signal name="clicked" handler="cb_execute_clicked"/>
                                 <child>
                                   <widget class="GtkHBox" id="hbox7">
                                     <property name="visible">True</property>
@@ -933,7 +924,7 @@
                                       <widget class="GtkImage" id="image6">
                                         <property name="visible">True</property>
                                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                                        <property name="stock">gtk-add</property>
+                                        <property name="stock">gtk-execute</property>
                                       </widget>
                                     </child>
                                     <child>
@@ -941,7 +932,7 @@
                                         <property name="visible">True</property>
                                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
                                         <property name="xalign">0</property>
-                                        <property name="label" translatable="yes">E_merge</property>
+                                        <property name="label" translatable="yes">E_xecute</property>
                                         <property name="use_underline">True</property>
                                         <property name="single_line_mode">True</property>
                                       </widget>
@@ -954,43 +945,6 @@
                               </widget>
                             </child>
                             <child>
-                              <widget class="GtkButton" id="unmergeBtn">
-                                <property name="visible">True</property>
-                                <property name="tooltip" translatable="yes">Deinstall all packages in the "Unmerge Queue"</property>
-                                <property name="response_id">0</property>
-                                <signal name="clicked" handler="cb_unmerge_clicked"/>
-                                <child>
-                                  <widget class="GtkHBox" id="hbox8">
-                                    <property name="visible">True</property>
-                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                                    <child>
-                                      <widget class="GtkImage" id="image7">
-                                        <property name="visible">True</property>
-                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                                        <property name="stock">gtk-remove</property>
-                                      </widget>
-                                    </child>
-                                    <child>
-                                      <widget class="GtkLabel" id="label13">
-                                        <property name="visible">True</property>
-                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                                        <property name="xalign">0</property>
-                                        <property name="label" translatable="yes">_Unmerge</property>
-                                        <property name="use_underline">True</property>
-                                        <property name="single_line_mode">True</property>
-                                      </widget>
-                                      <packing>
-                                        <property name="position">1</property>
-                                      </packing>
-                                    </child>
-                                  </widget>
-                                </child>
-                              </widget>
-                              <packing>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                            <child>
                               <widget class="GtkButton" id="updateBtn">
                                 <property name="visible">True</property>
                                 <property name="tooltip" translatable="yes">Calculate the packages which will be installed during an "update world"</property>
@@ -1000,7 +954,7 @@
                                 <signal name="clicked" handler="cb_update_clicked"/>
                               </widget>
                               <packing>
-                                <property name="position">2</property>
+                                <property name="position">1</property>
                               </packing>
                             </child>
                             <child>
@@ -1013,13 +967,34 @@
                                 <signal name="clicked" handler="cb_remove_clicked"/>
                               </widget>
                               <packing>
-                                <property name="position">3</property>
+                                <property name="position">2</property>
                               </packing>
                             </child>
                           </widget>
                           <packing>
                             <property name="expand">False</property>
                             <property name="fill">False</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <widget class="GtkScrolledWindow" id="queueScroll">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                            <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                            <child>
+                              <widget class="GtkTreeView" id="queueList">
+                                <property name="visible">True</property>
+                                <property name="has_tooltip">True</property>
+                                <property name="headers_visible">False</property>
+                                <property name="enable_search">False</property>
+                                <signal name="button_press_event" handler="cb_right_click"/>
+                                <signal name="query_tooltip" handler="cb_queue_tooltip_queried"/>
+                                <signal name="row_activated" handler="cb_row_activated"/>
+                              </widget>
+                            </child>
+                          </widget>
+                          <packing>
                             <property name="position">1</property>
                           </packing>
                         </child>
@@ -1669,83 +1644,231 @@
                     <property name="visible">True</property>
                     <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
                     <child>
-                      <widget class="GtkCheckButton" id="titleUpdateCheck">
+                      <widget class="GtkFrame" id="visualGeneralFrame">
                         <property name="visible">True</property>
-                        <property name="can_focus">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="label" translatable="yes">Show emerge progress in title - similar to the console tab</property>
-                        <property name="response_id">0</property>
-                        <property name="draw_indicator">True</property>
+                        <property name="label_xalign">0</property>
+                        <child>
+                          <widget class="GtkAlignment" id="alignment8">
+                            <property name="visible">True</property>
+                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                            <property name="left_padding">12</property>
+                            <child>
+                              <widget class="GtkVBox" id="vbox6">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <child>
+                                  <widget class="GtkCheckButton" id="systrayCheck">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="label" translatable="yes">Enable systray</property>
+                                    <property name="response_id">0</property>
+                                    <property name="draw_indicator">True</property>
+                                  </widget>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <widget class="GtkCheckButton" id="titleUpdateCheck">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="label" translatable="yes">Show emerge progress in title - similar to the console tab</property>
+                                    <property name="response_id">0</property>
+                                    <property name="draw_indicator">True</property>
+                                  </widget>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <widget class="GtkCheckButton" id="minimizeCheck">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="label" translatable="yes">Hide on minimization (only if systray is enabled)</property>
+                                    <property name="response_id">0</property>
+                                    <property name="draw_indicator">True</property>
+                                  </widget>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="position">2</property>
+                                  </packing>
+                                </child>
+                              </widget>
+                            </child>
+                          </widget>
+                        </child>
+                        <child>
+                          <widget class="GtkLabel" id="label3">
+                            <property name="visible">True</property>
+                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                            <property name="label" translatable="yes">&lt;b&gt;General Options&lt;/b&gt;</property>
+                            <property name="use_markup">True</property>
+                          </widget>
+                          <packing>
+                            <property name="type">label_item</property>
+                          </packing>
+                        </child>
                       </widget>
                       <packing>
                         <property name="expand">False</property>
                       </packing>
                     </child>
                     <child>
-                      <placeholder/>
-                    </child>
-                    <child>
-                      <widget class="GtkCheckButton" id="systrayCheck">
+                      <widget class="GtkFrame" id="consoleFrame">
                         <property name="visible">True</property>
-                        <property name="can_focus">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="label" translatable="yes">Enable systray</property>
-                        <property name="response_id">0</property>
-                        <property name="draw_indicator">True</property>
+                        <property name="label_xalign">0</property>
+                        <child>
+                          <widget class="GtkAlignment" id="alignment9">
+                            <property name="visible">True</property>
+                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                            <property name="bottom_padding">5</property>
+                            <property name="left_padding">12</property>
+                            <property name="right_padding">5</property>
+                            <child>
+                              <widget class="GtkHBox" id="hbox1">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="spacing">5</property>
+                                <child>
+                                  <widget class="GtkLabel" id="label11">
+                                    <property name="visible">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="xalign">0</property>
+                                    <property name="label" translatable="yes">Console Font</property>
+                                  </widget>
+                                </child>
+                                <child>
+                                  <widget class="GtkFontButton" id="consoleFontBtn">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="receives_default">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="response_id">0</property>
+                                    <property name="title" translatable="yes">Chose a console font</property>
+                                    <property name="use_font">True</property>
+                                    <property name="use_size">True</property>
+                                    <property name="show_style">False</property>
+                                  </widget>
+                                  <packing>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </widget>
+                            </child>
+                          </widget>
+                        </child>
+                        <child>
+                          <widget class="GtkLabel" id="label8">
+                            <property name="visible">True</property>
+                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                            <property name="label" translatable="yes">&lt;b&gt;Console Options&lt;/b&gt;</property>
+                            <property name="use_markup">True</property>
+                          </widget>
+                          <packing>
+                            <property name="type">label_item</property>
+                          </packing>
+                        </child>
                       </widget>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="position">2</property>
+                        <property name="position">1</property>
                       </packing>
                     </child>
                     <child>
-                      <widget class="GtkCheckButton" id="minimizeCheck">
+                      <widget class="GtkFrame" id="tabFrame">
                         <property name="visible">True</property>
-                        <property name="can_focus">True</property>
                         <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="label" translatable="yes">Hide on minimization (only if systray is enabled)</property>
-                        <property name="response_id">0</property>
-                        <property name="draw_indicator">True</property>
-                      </widget>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="position">3</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <widget class="GtkHBox" id="hbox1">
-                        <property name="visible">True</property>
-                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                        <property name="spacing">5</property>
+                        <property name="label_xalign">0</property>
                         <child>
-                          <widget class="GtkLabel" id="label11">
+                          <widget class="GtkAlignment" id="alignment10">
                             <property name="visible">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="xalign">0</property>
-                            <property name="label" translatable="yes">Console Font</property>
+                            <property name="bottom_padding">5</property>
+                            <property name="left_padding">12</property>
+                            <property name="right_padding">5</property>
+                            <child>
+                              <widget class="GtkVBox" id="vbox7">
+                                <property name="visible">True</property>
+                                <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                <property name="spacing">5</property>
+                                <child>
+                                  <widget class="GtkHBox" id="hbox2">
+                                    <property name="visible">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="homogeneous">True</property>
+                                    <child>
+                                      <widget class="GtkLabel" id="label15">
+                                        <property name="visible">True</property>
+                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                        <property name="xalign">0</property>
+                                        <property name="label" translatable="yes">Package Tabs</property>
+                                      </widget>
+                                    </child>
+                                    <child>
+                                      <widget class="GtkComboBox" id="packageTabCombo">
+                                        <property name="visible">True</property>
+                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                        <property name="items" translatable="yes"></property>
+                                      </widget>
+                                      <packing>
+                                        <property name="position">1</property>
+                                      </packing>
+                                    </child>
+                                  </widget>
+                                </child>
+                                <child>
+                                  <widget class="GtkHBox" id="hbox4">
+                                    <property name="visible">True</property>
+                                    <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                    <property name="homogeneous">True</property>
+                                    <child>
+                                      <widget class="GtkLabel" id="label21">
+                                        <property name="visible">True</property>
+                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                        <property name="xalign">0</property>
+                                        <property name="label" translatable="yes">System Tabs</property>
+                                      </widget>
+                                    </child>
+                                    <child>
+                                      <widget class="GtkComboBox" id="combobox3">
+                                        <property name="visible">True</property>
+                                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                                        <property name="items" translatable="yes"></property>
+                                      </widget>
+                                      <packing>
+                                        <property name="position">1</property>
+                                      </packing>
+                                    </child>
+                                  </widget>
+                                  <packing>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </widget>
+                            </child>
                           </widget>
                         </child>
                         <child>
-                          <widget class="GtkFontButton" id="consoleFontBtn">
+                          <widget class="GtkLabel" id="label9">
                             <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">True</property>
                             <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="response_id">0</property>
-                            <property name="title" translatable="yes">Chose a console font</property>
-                            <property name="use_font">True</property>
-                            <property name="use_size">True</property>
-                            <property name="show_style">False</property>
+                            <property name="label" translatable="yes">&lt;b&gt;Tab Options&lt;/b&gt;</property>
+                            <property name="use_markup">True</property>
                           </widget>
                           <packing>
-                            <property name="position">1</property>
+                            <property name="type">label_item</property>
                           </packing>
                         </child>
                       </widget>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="padding">5</property>
-                        <property name="position">4</property>
+                        <property name="position">2</property>
                       </packing>
                     </child>
                   </widget>
=== portato/plistener.py
==================================================================
--- portato/plistener.py	(revision 636)
+++ portato/plistener.py	(patch 0.8.9.1 level 1)
@@ -93,7 +93,7 @@
 			try:
 				import shm_wrapper as shm
 			except ImportError:
-				from portato.shm import shm_wrapper as shm
+				from portato._shm import shm_wrapper as shm
 
 			self._mem = shm.SharedMemoryHandle(mem)
 			self._sig = shm.SemaphoreHandle(sig)
=== etc/portato.cfg
==================================================================
--- etc/portato.cfg	(revision 636)
+++ etc/portato.cfg	(patch 0.8.9.1 level 1)
@@ -73,4 +73,13 @@
 ; sets the font of the console - string values
 consolefont = Monospace 11
 
+; sets the position of the tabs of the two notebooks
+; allowed positions:
+;						- 1 : top
+;						- 2 : bottom
+;						- 3 : left
+;						- 4 : right
+packagetabpos = 2
+systemtabpos = 2
+
 # vim:ts=4:sw=4:ft=cfg
=== shm/__init__.py
==================================================================
=== shm/shm_wrapper.py
==================================================================
--- shm/shm_wrapper.py	(revision 636)
+++ shm/shm_wrapper.py	(patch 0.8.9.1 level 1)
@@ -1,301 +0,0 @@
-# shm_wrapper - A wrapper for the shm module which provides access
-# to System V shared memory and semaphores on *nix systems.
-#
-# Copyright (c) 2007 by Philip Semanchuk
-# Contact info at http://NikitaTheSpider.com/
-#
-# This program is free software; you can redistribute it and/or
-# modify it under the terms of the GNU General Public License
-# as published by the Free Software Foundation; either version 2
-# of the License, or (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-
-# Python modules
-import random
-import sys
-
-# Third party modules
-import shm
-
-r"""shm_wrapper - A wrapper for the shm module which provides access
-to System V shared memory and semaphores on *nix systems.
-
-The module shm is a Python wrapper around system functions like shmget. This
-module in turn offers higher-level, more Pythonic access to shared memory and
-semaphores.
-
-Full documentation is online at http://NikitaTheSpider.com/python/shm/
-
-"""
-
-def create_memory(size, permissions = 0666, InitCharacter = ' '):
-    """ Creates a new shared memory segment. One can destroy it either by calling the
-    module-level method remove_memory() or by calling the .remove() method of a handle to
-    said memory.
-    """
-    memory = None
-
-    # I create the memory using a randomly-generated key. I keep trying until I find one
-    # that works or until I hit an error.
-    while not memory:
-        key = random.randint(1, sys.maxint - 1)
-        try:
-            memory = shm.create_memory(key, size, permissions)
-        except shm.error, ExtraData:
-            if shm.memory_haskey(key):
-                # Oops, bad luck, the key exists. I'll try another. I can't call
-                # memory_haskey() before calling create_memory() because that would create
-                # a race condition where I could verify a key is not used but then another
-                # process could call create_memory() with that key before I got a chance to
-                # do so.
-                pass
-            else:
-                # Uh-oh, something fundamental is wrong.
-                raise shm.error, ExtraData
-
-    # Here I implicitly discard the memory handle object returned to me by shm and instead
-    # return my own handle to the shared memory segment.
-    memory = SharedMemoryHandle(key)
-
-    memory.write(InitCharacter[0] * memory.size)
-
-    return memory
-
-
-def remove_memory(key):
-    # Destroys the shared memory segment. Raises KeyError if the key doesn't exist.
-    shm.remove_memory(shm.getshmid(key))
-
-
-class SharedMemoryHandle(object):
-    def __init__(self, key):
-        self._MemoryHandle = None
-
-        # getshmid will raise a KeyError if there's no memory segment with this key.
-        shmid = shm.getshmid(key)
-        self._MemoryHandle = shm.memory(shmid)
-
-
-    def __del__(self):
-        if self._MemoryHandle:
-            # This will raise an error if the memory has been destroyed.
-            try:
-                if self._MemoryHandle.attached:
-                    self._MemoryHandle.detach()
-            except shm.error:
-                pass
-
-
-    def remove(self):
-        if self._MemoryHandle:
-            if self._MemoryHandle.attached:
-                self._MemoryHandle.detach()
-
-            shm.remove_memory(self._MemoryHandle.shmid)
-            self._MemoryHandle = None
-
-
-    def read(self, NumberOfBytes = 0, offset = 0):
-        if not self._MemoryHandle.attached:
-            self._MemoryHandle.attach()
-
-        if not NumberOfBytes:
-            NumberOfBytes = self._MemoryHandle.size - offset
-
-        return self._MemoryHandle.read(NumberOfBytes, offset)
-
-
-    def write(self, s, offset = 0):
-        if not self._MemoryHandle.attached:
-            self._MemoryHandle.attach()
-
-        self._MemoryHandle.write(s, offset)
-
-
-    # Properties start here ================================================================
-
-    # key
-    def __get_key(self): return self._MemoryHandle.key
-    def __set_key(self, foo): raise AttributeError
-    key = property(__get_key, __set_key)
-
-    # size of segment
-    def __get_size(self): return self._MemoryHandle.size
-    def __set_size(self, foo): raise AttributeError
-    size = property(__get_size, __set_size)
-
-    # permissions
-    def __get_permissions(self): return self._MemoryHandle.perm
-    def __set_permissions(self, permissions): self._MemoryHandle.setperm(permissions)
-    permissions = property(__get_permissions, __set_permissions)
-
-    # The number of processes currently attached to this memory segment.
-    def __get_number_attached(self): return self._MemoryHandle.nattch
-    def __set_number_attached(self, foo): raise AttributeError
-    number_attached = property(__get_number_attached, __set_number_attached)
-
-    # segment's uid
-    def __get_uid(self): return self._MemoryHandle.uid
-    def __set_uid(self, uid): self._MemoryHandle.setuid(uid)
-    uid = property(__get_uid, __set_uid)
-
-    # segment's gid
-    def __get_gid(self): return self._MemoryHandle.gid
-    def __set_gid(self, gid): self._MemoryHandle.setgid(gid)
-    gid = property(__get_gid, __set_gid)
-
-    # Creator uid (read-only)
-    def __get_creator_uid(self): return self._MemoryHandle.cuid
-    def __set_creator_uid(self, foo): raise AttributeError
-    creator_uid = property(__get_creator_uid, __set_creator_uid)
-
-    # Creator gid (read-only)
-    def __get_creator_gid(self): return self._MemoryHandle.cgid
-    def __set_creator_gid(self, foo): raise AttributeError
-    creator_gid = property(__get_creator_gid, __set_creator_gid)
-
-    # Creator pid (read-only)
-    def __get_creator_pid(self): return self._MemoryHandle.cpid
-    def __set_creator_pid(self, foo): raise AttributeError
-    creator_pid = property(__get_creator_pid, __set_creator_pid)
-
-    # pid of last process to operate on this segment (read-only)
-    def __get_last_pid(self): return self._MemoryHandle.lpid
-    def __set_last_pid(self, foo): raise AttributeError
-    last_pid = property(__get_last_pid, __set_last_pid)
-
-
-
-def create_semaphore(InitialValue = 1, permissions = 0666):
-    """ Creates a new semaphore. One can destroy it either by calling the
-    module-level method remove_semaphore() or by calling the .remove() method of a
-    handle to said semaphore.
-    """
-    semaphore = None
-
-    # I create the semaphore using a randomly-generated key. I keep trying until I find one
-    # that works or until I hit an error.
-    while not semaphore:
-        key = random.randint(1, sys.maxint - 1)
-        try:
-            semaphore = shm.create_semaphore(key, InitialValue, permissions)
-        except shm.error, ExtraData:
-            if shm.semaphore_haskey(key):
-                # Oops, bad luck, the key exists. I'll try another. I can't call
-                # memory_haskey() before calling create_semaphore() because that would create
-                # a race condition where I could verify a key is not used but then another
-                # process could call create_semaphore() with that key before I got a chance to
-                # do so.
-                pass
-            else:
-                # Uh-oh, something fundamental is wrong.
-                raise ExtraData
-
-    # Here I implicitly discard the semaphore object returned to me by shm and instead
-    # return my own handle to the semaphore.
-    return SemaphoreHandle(key)
-
-
-def remove_semaphore(key):
-    # Destroys the semaphore. Raises KeyError if the key doesn't exist.
-    shm.remove_semaphore(shm.getsemid(key))
-
-
-class SemaphoreHandle(object):
-    def __init__(self, key):
-        # getsemid will raise a KeyError if appropriate.
-        self._SemaphoreHandle = shm.semaphore(shm.getsemid(key))
-
-
-    def remove(self):
-        shm.remove_semaphore(self._SemaphoreHandle.semid)
-        self._SemaphoreHandle = None
-
-
-    def P(self):
-        # P = prolaag = probeer te verlagen (try to decrease)
-        self._SemaphoreHandle.P()
-
-
-    def V(self):
-        # V = verhoog (increase)
-        self._SemaphoreHandle.V()
-
-
-    def Z(self):
-        # Z = block until Zee semaphore is Zero
-        self._SemaphoreHandle.Z()
-
-
-    # Properties start here ================================================================
-    def __get_key(self): return self._SemaphoreHandle.key
-    def __set_key(self, foo): raise AttributeError
-    key = property(__get_key, __set_key)
-
-
-    def __get_value(self): return self._SemaphoreHandle.val
-    def __set_value(self, value): self._semaphore.setval(value)
-    value = property(__get_value, __set_value)
-
-
-    def __get_WaitingForZero(self): return self._SemaphoreHandle.zcnt
-    def __set_WaitingForZero(self, foo): raise AttributeError
-    WaitingForZero = property(__get_WaitingForZero, __set_WaitingForZero)
-
-
-    def __get_WaitingForNonZero(self): return self._SemaphoreHandle.ncnt
-    def __set_WaitingForNonZero(self, foo): raise AttributeError
-    WaitingForNonZero = property(__get_WaitingForNonZero, __set_WaitingForNonZero)
-
-
-    def __get_blocking(self): return self._SemaphoreHandle.blocking
-    def __set_blocking(self, block): self._SemaphoreHandle.setblocking(block)
-    blocking = property(__get_blocking, __set_blocking)
-
-
-    def __get_undo(self): raise AttributeError
-    def __set_undo(self, undo): self._SemaphoreHandle.setundo(undo)
-    undo = property(__get_undo, __set_undo)
-
-
-    # segment's uid
-    def __get_uid(self): return self._SemaphoreHandle.uid
-    def __set_uid(self, uid): self._SemaphoreHandle.setuid(uid)
-    uid = property(__get_uid, __set_uid)
-
-
-    # segment's gid
-    def __get_gid(self): return self._SemaphoreHandle.gid
-    def __set_gid(self, gid): self._SemaphoreHandle.setgid(gid)
-    gid = property(__get_gid, __set_gid)
-
-
-    # Creator uid (read-only)
-    def __get_creator_uid(self): return self._SemaphoreHandle.cuid
-    def __set_creator_uid(self, foo): raise AttributeError
-    creator_uid = property(__get_creator_uid, __set_creator_uid)
-
-
-    # Creator gid (read-only)
-    def __get_creator_gid(self): return self._SemaphoreHandle.cgid
-    def __set_creator_gid(self, foo): raise AttributeError
-    creator_gid = property(__get_creator_gid, __set_creator_gid)
-
-
-    # Creator pid -- since semaphores have a lot of the same properties as memory
-    # objects, one would expect creator PID to be exposed here, but it isn't
-    # made available by the system (true AFAICT for BSDs, OS X and Solaris).
-
-
-    # pid of last process to operate on this segment (read-only)
-    def __get_last_pid(self): return self._SemaphoreHandle.lpid
-    def __set_last_pid(self, foo): raise AttributeError
-    last_pid = property(__get_last_pid, __set_last_pid)
=== shm/shmmodule.c
==================================================================
--- shm/shmmodule.c	(revision 636)
+++ shm/shmmodule.c	(patch 0.8.9.1 level 1)
@@ -1,1396 +0,0 @@
-/****************************************************************************
- *
- * shmmodule.c Copyright 1997, 1998 by INRIA. All rights reserved.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY WARRANTIES, EXPRESS OR IMPLIED,
- * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
- * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- *
- * IN NO EVENT SHALL THE INRIA OR THE AUTHORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES,
- * INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
- * LOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION, HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT,
- * INCLUDING NEGLIGENCE OR OTHERWISE, ARISING IN ANY WAY OUT OF THE USE OF
- * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- ***************************************************************************/
-
-/* Python Shared Memory module 
-   Written by Vladimir Marangozov  
-   Adopted by Philip Semanchuk 
-
-  This module provides an interface to System V shared memory IPC.
-
-  Version history:
-  - 1.0 (sometime in the 1990s) - Released by Mr. Marangozov
-  - 1.1 (Feb 2007) - Released by me, Philip Semanchuk. Fixes a few bugs (including some 
-        memory leaks) and adds the ability to read the blocking flag on semaphores.
-  - 1.1.1 (Mar 2007)- Updated setup.py to handle compile options for Linux users.
-  - 1.1.2 (Nov 2007) - Fixed a sprintf() format in repr to handle size_t.
-  - 1.1.3 (Nov 2007) - Changed #define of key to _key instead of __key for OS X Leopard.
-        Thanks to Bill Hart.
-  - 1.1.4 (Jan 2008) - Changed the reference to key in the ipc_perm structure to the 
-        explicit #define IPC_PERM_KEY_NAME. 
-
-  See http://NikitaTheSpider.com/python/shm/ for more thorough documentation, a more Pythonic 
-  wrapper, updates, contact info, setup.py, etc.
-
-
-  Module interface:
-
-  - shm.create_memory(int Key, int Size [,int Perm=0666]) --> object
-  - shm.create_semaphore(int Key [,int Value=1 [,int Perm=0666]]) --> object
-  - shm.error
-  - shm.ftok(string Path, int ProjId) --> int
-  - shm.getsemid(int Key) --> int
-  - shm.getshmid(int Key) --> int
-  - shm.memory(int Shmid) --> object
-  - shm.memory_haskey(int Key) --> int
-  - shm.remove_memory(int Shmid) --> None
-  - shm.remove_semaphore(int Semid) --> None
-  - shm.semaphore(int Semid) --> object
-  - shm.semaphore_haskey(int Key) --> int
-
-  Memory Objects:
-
-  + Members:
-
-    - m.addr	- attachment address in the process address space
-    - m.attached	- 0|1
-    - m.cgid	- gid of creator
-    - m.cpid	- pid of creator
-    - m.cuid	- uid of creator
-    - m.gid		- gid of owner
-    - m.key		- segment key or IPC_PRIVATE (=0)
-    - m.lpid	- pid of last shmop
-    - m.nattch	- current # of attached processes
-    - m.perm	- operation permission
-    - m.shmid	- shared memory segment id
-    - m.size	- segment size
-    - m.uid		- uid of owner
-
-  + Methods:
-
-    - m.attach([int Addr=0 [,int How=0]]) --> None
-    - m.detach() --> None
-    - m.read(int Nbytes [,int Offset=0]) --> string
-    - m.setgid(int Gid) --> None
-    - m.setperm(int Perm) --> None
-    - m.setuid(int Uid) --> None
-    - m.write(string Data [,int Offset=0]) --> None
-
-  Semaphore Objects:
-
-  + Members:
-
-    - s.cgid        - gid of creator
-    - s.cuid        - uid of creator
-    - s.gid         - gid of owner
-    - s.key         - semaphore key or IPC_PRIVATE (=0)
-    - s.lpid        - pid of last semop
-    - s.ncnt        - current # of processes waiting for s.val > 0
-    - s.perm        - operation permission
-    - s.semid       - semaphore id
-    - s.uid         - uid of owner
-    - s.val         - value of the semaphore counter
-    - s.zcnt        - current # of processes waiting for s.val == 0
-    - s.blocking    - whether or not the semaphore is in blocking mode
-
-  + Methods:
-
-    - s.P() --> None		- blocks if s.val == 0; decrements s.val
-    - s.V() --> None		- increments s.val
-    - s.Z() --> None		- blocks until s.val == 0
-    - s.setblocking(0|1) --> None
-    - s.setgid(int Gid) --> None
-    - s.setperm(int Perm) --> None
-    - s.setuid(int Uid) --> None
-    - s.setundo(0|1) --> None
-    - s.setval(int Value) --> None
-
-*/
-
-/* ------------------------------------------------------------------------- */
-#include "Python.h"
-#include "structmember.h"
-
-/* v1.1 - added */
-#ifdef __FreeBSD__
-#include <machine/param.h>  /* for system definition of PAGE_SIZE */
-#endif
-
-#include <sys/types.h>
-#include <sys/ipc.h>		/* for system's IPC_xxx definitions */
-#include <sys/shm.h>		/* for shmget, shmat, shmdt, shmctl */
-#include <sys/sem.h>		/* for semget, semctl, semop */
-
-/* v1.1.4 - The name of this member varies and is sniffed out by setup.py. */
-#if defined(ZERO_UNDERSCORE_KEY)
-#define IPC_PERM_KEY_NAME   key
-#elif defined(ONE_UNDERSCORE_KEY)
-#define IPC_PERM_KEY_NAME  _key
-#elif defined(TWO_UNDERSCORE_KEY)
-#define IPC_PERM_KEY_NAME __key
-#endif
-
-/*
--- Exception type for errors detected by this module.
-*/
-
-static PyObject *PyShm_Error;
-
-/*
--- Convenience function to raise an error according to errno.
-*/
-
-static PyObject *
-PyShm_Err(void)
-{
-    return PyErr_SetFromErrno(PyShm_Error);
-}
-
-/*
--- The object holding a shared memory segment
-*/
-
-typedef struct {
-    PyObject_HEAD
-    int shmid;			/* shared memory id	*/
-    int mode;			/* attachment mode	*/
-    void *addr;			/* shmseg start address	*/
-    struct shmid_ds ds;		/* data structure	*/
-} PyShmMemoryObject;
-
-staticforward PyTypeObject	PyShmMemory_Type;
-
-#define PyShmObj		PyShmMemoryObject
-#define PyShmMemory_Check(op)	((op)->ob_type == &PyShmMemory_Type)
-
-/*
--- The object holding a semaphore
-*/
-
-typedef struct {
-    PyObject_HEAD
-    int semid;			/* semaphore id		*/
-    short opflag;		/* IPC_NOWAIT, SEM_UNDO	*/
-    struct semid_ds ds;		/* data structure	*/
-} PyShmSemaphoreObject;
-
-#ifndef HAVE_UNION_SEMUN
-union semun {
-    int val;                    /* used for SETVAL only */
-    struct semid_ds *buf;       /* for IPC_STAT and IPC_SET */
-    unsigned short *array;      /* used for GETALL and SETALL */
-};
-#endif
-
-typedef union semun semctl_arg;
-
-staticforward PyTypeObject	PyShmSemaphore_Type;
-
-#define PyShmSemObj		PyShmSemaphoreObject
-#define PyShmSemaphore_Check(op) ((op)->ob_type == &PyShmSemaphore_Type)
-
-/*
--- Internal dictionaries for Python memory and semaphore objects
-*/
-
-static PyObject *shm_dict = NULL;
-static PyObject *sem_dict = NULL;
-
-/************************************************************/
-/*                       Memory Objects                     */
-/************************************************************/
-
-/* This is to check the validity of a Python memory object
-   (and to refresh its data status structure). Notably, we
-   have to check that the real memory segment it points to
-   is still in memory and hasn't changed (test its id and
-   size). It could be that the segment has been removed and
-   created again by someone else with the same key. This is
-   fine as far as the segment (1) has the same id and size,
-   and (2) is accessible via shmctl. If you have a better
-   test, you're welcome :-) */
-
-static int
-check_memory_identity(PyShmObj *o)
-{
-    int new_shmid;
-    int old_shmid = o->shmid;
-    int old_size = o->ds.shm_segsz;
-    key_t old_key = o->ds.shm_perm.IPC_PERM_KEY_NAME;
-
-    /*
-    -- 1. Try to get the segment identified by the old key (if not IPC_PRIVATE)
-    -- 2. On failure or on mismatch of the new and the old id -> fail.
-    -- 3. Try to refresh the object's status using the new id.
-    -- 4. On failure (the segment cannot be accessed) -> fail.
-    -- 5. Finaly, compare the old size and the one we got via the new id.
-    */
-    if (old_key != IPC_PRIVATE) {
-        new_shmid = shmget(old_key, 0, 0);
-        if (new_shmid != old_shmid)
-            return 0;
-    }
-    else
-        new_shmid = old_shmid;
-    if ((shmctl(new_shmid, IPC_STAT, &(o->ds)) != -1) &&
-        (old_size == o->ds.shm_segsz) &&
-	    (old_key == o->ds.shm_perm.IPC_PERM_KEY_NAME))
-        return 1;
-    return 0;
-}
-
-/* Convenience macro for updating the shared memory data status structure */
-
-#define refresh_memory_status(o)					\
-    if (!check_memory_identity(o)) {					\
-	   PyErr_SetString(PyShm_Error, "can't access shared memory segment");		\
-	   return NULL;							\
-    }
-
-/*
--- attach([,address=0 [,how=0]])
-*/
-
-/* Attach the shared memory segment to the process address space */
-
-static PyObject *
-PyShmMemory_attach(PyShmObj *self, PyObject *args)
-{
-    unsigned long address = 0;
-    int mode = 0;
-    void *addr, *old_addr;
-
-    if (!PyArg_ParseTuple(args, "|li", &address, &mode))
-	   return NULL;
-    refresh_memory_status(self);
-    /* return if already attached with the same mode to the same address */
-    if ((self->addr != NULL) && (self->mode == mode) &&
-        ((address == 0) || (self->addr == (void *)address))) {
-    	Py_INCREF(Py_None);
-    	return Py_None;
-    }
-    /* perform the attach */
-    addr = (void *)shmat(self->shmid, (void *)address, mode);
-    if (addr  == (void *)-1)
-	   return PyShm_Err();
-    old_addr = self->addr;
-    self->addr = addr;
-    self->mode = mode;
-    /* XXX - multiple attachments of the same shared memory segment
-             to different locations of the process address space is
-	     not supported. */
-    shmdt(old_addr);
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- detach()
-*/
-
-/* Detach the memory object from the process address space */
-
-static PyObject *
-PyShmMemory_detach(PyShmObj *self, PyObject *args)
-{
-    if (!PyArg_NoArgs(args))
-	   return NULL;
-    if (self->addr != NULL) {
-        refresh_memory_status(self);
-        if (shmdt(self->addr) != 0)
-            return PyShm_Err();
-        self->addr = NULL;		/* mark as detached */
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- read(int Nbytes [,int Offset=0]) --> string
-*/
-
-/* Return a string of n bytes peeked from the shared memory segment */
-
-static PyObject *
-PyShmMemory_read(PyShmObj *self, PyObject *args)
-{
-    unsigned long n, offset = 0;
-    char buf[128];
-    char *addr;
-
-    if (!PyArg_ParseTuple(args, "l|l", &n, &offset))
-	    return NULL;
-    refresh_memory_status(self);
-    if (self->addr == NULL) {
-        PyErr_SetString(PyShm_Error, "R/W operation on detached memory");
-        return NULL;
-    }
-    if ((unsigned long)self->ds.shm_segsz < (n + offset)) {
-        sprintf(buf, "read() argument%s exceed%s upper memory limit",
-            offset ? "s" : "", offset ? "" : "s");
-        PyErr_SetString(PyShm_Error, buf);
-        return NULL;
-    }
-    addr = (char *)((unsigned long)self->addr + offset);
-    return PyString_FromStringAndSize(addr, n);
-}
-
-/*
--- setgid(int Gid)
-*/
-
-static PyObject *
-PyShmMemory_setgid(PyShmObj *self, PyObject *args)
-{
-    long newgid, oldgid;
-
-    if (!PyArg_ParseTuple(args, "l", &newgid))
-	    return NULL;
-    refresh_memory_status(self);
-    oldgid = (long)self->ds.shm_perm.gid;
-    self->ds.shm_perm.gid = (gid_t)newgid;
-    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
-        self->ds.shm_perm.gid = (gid_t)oldgid;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setperm(int Perm)
-*/
-
-static PyObject *
-PyShmMemory_setperm(PyShmObj *self, PyObject *args)
-{
-    long newmode, oldmode;
-
-    if (!PyArg_ParseTuple(args, "l", &newmode))
-        return NULL;
-    refresh_memory_status(self);
-    newmode &= 0777;	/* permission bits only */
-    oldmode = (mode_t)self->ds.shm_perm.mode;
-    self->ds.shm_perm.mode ^= 0777;
-    self->ds.shm_perm.mode |= (mode_t)newmode;
-    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
-        self->ds.shm_perm.mode = (mode_t)oldmode;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setuid(int Uid)
-*/
-
-static PyObject *
-PyShmMemory_setuid(PyShmObj *self, PyObject *args)
-{
-    long newuid, olduid;
-
-    if (!PyArg_ParseTuple(args, "l", &newuid))
-        return NULL;
-    refresh_memory_status(self);
-    olduid = (long)self->ds.shm_perm.uid;
-    /* v1.1 - fixed typo that set the group id rather than the user id */
-    self->ds.shm_perm.uid = (uid_t)newuid;
-    if (shmctl(self->shmid, IPC_SET, &(self->ds)) == -1) {
-        self->ds.shm_perm.uid = (uid_t)olduid;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- write(string Data [, int Offset=0])
-*/
-
-/* Write a string to the shared memory segment. */
-
-static PyObject *
-PyShmMemory_write(PyShmObj *self, PyObject *args)
-{
-    char *data;
-    unsigned long n, offset = 0;
-    char buf[128];
-    char *addr;
-
-    if (!PyArg_ParseTuple(args, "s#|l", &data, &n, &offset))
-        return NULL;
-    refresh_memory_status(self);
-    if (self->addr == NULL) {
-        PyErr_SetString(PyShm_Error, "R/W operation on detached memory");
-        return NULL;
-    }
-    if (self->mode & SHM_RDONLY) {
-        PyErr_SetString(PyShm_Error,
-                "can't write on read-only attached memory");
-        return NULL;
-    }
-    if ((unsigned long)self->ds.shm_segsz < (n + offset)) {
-        sprintf(buf, "write() argument%s exceed%s upper memory limit",
-            offset ? "s" : "", offset ? "" : "s");
-        PyErr_SetString(PyShm_Error, buf);
-        return NULL;
-    }
-    addr = (void *)((unsigned long)self->addr + offset);
-    memcpy(addr, data, n);
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/* List of methods for shared memory objects */
-
-static PyMethodDef memory_methods[] = {
-    {"attach",	(PyCFunction)PyShmMemory_attach,	1,
-     "attach([int Addr=0 [,int How=0]]) --> None | except shm.error"},
-    {"detach",	(PyCFunction)PyShmMemory_detach,	0,
-     "detach() --> None | except shm.error"},
-    {"read",	(PyCFunction)PyShmMemory_read,		1,
-     "read(int Nbytes [,int Offset=0]) --> string | except shm.error"},
-    {"setgid",	(PyCFunction)PyShmMemory_setgid,	1,
-     "setgid(int Gid) --> None | except shm.error"},
-    {"setperm",	(PyCFunction)PyShmMemory_setperm,	1,
-     "setperm(int Perm) --> None | except shm.error"},
-    {"setuid",	(PyCFunction)PyShmMemory_setuid,	1,
-     "setuid(int Uid) --> None | except shm.error"},
-    {"write",	(PyCFunction)PyShmMemory_write,		1,
-     "write(string Data [,int Offset=0]) --> None | except shm.error"},
-    {NULL,	NULL}		/* sentinel */
-};
-
-#define OFF(x)	offsetof(PyShmMemoryObject, x)
-#define OFF1(x)	OFF(ds) + offsetof(struct shmid_ds, x)
-#define OFF2(x)	OFF1(shm_perm) + offsetof(struct ipc_perm, x)
-
-/* List of members for shared memory objects */
-
-/* Note: member types are set in the initshm function.
-   Members which need separate processing are:
-   - addr --> it is not part of the shmid_ds structure
-   - attached --> function depending on addr
-   - nattch  --> system dependent declaration in shmid_ds (unknown type)
-   - perm --> return permission (lower 9) bits only of ds.shm_perm.mode
-*/
-
-static struct memberlist memory_memberlist[] = {
-    {"cgid",	T_INT,	OFF2(cgid),		RO},	/* 0  (gid_t)  */
-    {"cpid",	T_INT,	OFF1(shm_cpid),		RO},	/* 1  (pid_t)  */
-    {"cuid",	T_INT,	OFF2(cuid),		RO},	/* 2  (uid_t)  */
-    {"key", T_INT,	OFF2(IPC_PERM_KEY_NAME),		RO},	/* 3  (key_t)  */
-    {"lpid",	T_INT,	OFF1(shm_lpid),		RO},	/* 4  (pid_t)  */
-    {"shmid",	T_INT,	OFF(shmid),		RO},	/* 5  (int)    */
-    {"size",	T_INT,	OFF1(shm_segsz),	RO},	/* 6  (int)    */
-    {"gid",	T_INT,	OFF2(gid),		RO},	/* 7  (gid_t)  */
-    {"uid",	T_INT,	OFF2(uid),		RO},	/* 8  (uid_t)  */
-    /* The following members are implemented without this table */
-    {"addr",	T_INT,	0,			RO},	/* 9  (void *) */
-    {"attached",T_INT,	0,			RO},	/* 10  (int)    */
-    {"nattch",	T_INT,	0,			RO},	/* 11 sys.dep. */
-    {"perm",	T_INT,	0,			RO},	/* 12 (mode_t) */
-    {NULL}			/* sentinel */
-};
-
-#undef OFF
-#undef OFF1
-#undef OFF2
-
-static void
-PyShmMemory_dealloc(PyShmObj *self)
-{
-    /* del shm_dict[key], ignore if it fails */
-    if (PyDict_DelItem(shm_dict, PyInt_FromLong(self->shmid)) == -1)
-        PyErr_Clear();
-    /* all references in the current process to the shared
-       memory segment are lost, so if attached, detach it.
-       XXX: This is not true when Python is embedded.
-
-    if (self->addr != NULL) {
-	shmdt(self->addr);
-    }
-    */
-    /* v1.1 - changed the reference below from PyMem_DEL to PyObject_Del.    */
-    PyObject_Del(self);
-}
-
-static PyObject *
-PyShmMemory_getattr(PyShmObj *self, char *name)
-{
-    PyObject *res;
-
-    res = Py_FindMethod(memory_methods, (PyObject *)self, name);
-    if (res != NULL)
-        return res;
-    PyErr_Clear();
-    refresh_memory_status(self);
-    if (strcmp(name, "attached") == 0)
-        return PyInt_FromLong((self->addr == NULL) ? 0 : 1);
-    if (strcmp(name, "addr") == 0) {
-        if (self->addr != NULL)
-            return PyInt_FromLong((unsigned long)self->addr);
-        else {
-            Py_INCREF(Py_None);
-            return Py_None;
-        }
-    }
-    if (strcmp(name, "nattch") == 0)
-        return PyInt_FromLong(self->ds.shm_nattch);
-    if (strcmp(name, "perm") == 0)
-        return PyInt_FromLong(self->ds.shm_perm.mode & 0777);
-    return PyMember_Get((char *)self, memory_memberlist, name);
-}
-
-static PyObject *
-PyShmMemory_repr(PyShmObj *self, char *name)
-{
-    char buf[100];
-    char buf2[20];
-
-    refresh_memory_status(self);
-    if (self->addr == NULL)
-        sprintf(buf2, "None");
-    else
-        /* v 1.1 - changed format from %lx to %p. */
-        /* v 1.1.2 - changed %u to %zu. */
-        sprintf(buf2, "0x%p", self->addr);
-    sprintf(buf, "<%s shared memory object, id=%d, size=%zu, addr=%s>",
-	    (self->addr == NULL) ? "detached" : (self->mode & SHM_RDONLY) ?
-	    "attached RO" : "attached R/W",
-	    self->shmid,
-	    self->ds.shm_segsz,
-	    buf2);
-    return PyString_FromString(buf);
-}
-
-/* Type object for shared memory objects */
-
-static PyTypeObject PyShmMemory_Type = {
-    PyObject_HEAD_INIT(&PyType_Type)
-    0,					/*ob_size*/
-    "shared memory",			/*tp_name*/
-    sizeof(PyShmObj),			/*tp_size*/
-    0,					/*tp_itemsize*/
-    /* methods */
-    (destructor)PyShmMemory_dealloc,	/*tp_dealloc*/
-    0,					/*tp_print*/
-    (getattrfunc)PyShmMemory_getattr,	/*tp_getattr*/
-    0,					/*tp_setattr*/
-    0,					/*tp_compare*/
-    (reprfunc)PyShmMemory_repr,		/*tp_repr*/
-    0,					/*tp_as_number*/
-    0,					/*tp_as_sequence*/
-    0,					/*tp_as_mapping*/
-};
-
-/************************************************************/
-/*                     Semaphore Objects                    */
-/************************************************************/
-
-/* This is to check the validity of a Python semaphore object */
-
-static int
-check_semaphore_identity(PyShmSemObj *o)
-{
-    int new_semid;
-    int old_semid = o->semid;
-    unsigned short old_nsems = o->ds.sem_nsems;
-    key_t old_key = o->ds.sem_perm.IPC_PERM_KEY_NAME;
-    semctl_arg arg;
-
-    if (old_key != IPC_PRIVATE) {
-        new_semid = semget(old_key, 0, 0);
-        if (new_semid != old_semid)
-            return 0;
-    }
-    else
-        new_semid = old_semid;
-    arg.buf = &(o->ds);
-    if ((semctl(new_semid, 0, IPC_STAT, arg) != -1) &&
-        (old_nsems == o->ds.sem_nsems) &&
-        (old_key == o->ds.sem_perm.IPC_PERM_KEY_NAME))
-        return 1;
-    return 0;
-}
-
-/* Convenience macro for updating the semaphore data status structure */
-
-#define refresh_semaphore_status(o)					\
-    if (!check_semaphore_identity(o)) {					\
-        PyErr_SetString(PyShm_Error,					\
-                "can't access semaphore");			\
-	return NULL;							\
-    }
-
-/*
--- P()
-*/
-
-static PyObject *
-PyShmSemaphore_P(PyShmSemObj *self, PyObject *args)
-{
-    struct sembuf op[1];
-    int res;
-
-    op[0].sem_num = 0;
-    op[0].sem_op = -1;
-    op[0].sem_flg = self->opflag;
-
-    if (!PyArg_NoArgs(args))
-        return NULL;
-    refresh_semaphore_status(self);
-    res = semop(self->semid, op, (size_t)1);
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- V()
-*/
-
-static PyObject *
-PyShmSemaphore_V(PyShmSemObj *self, PyObject *args)
-{
-    struct sembuf op[1];
-    int res;
-
-    op[0].sem_num = 0;
-    op[0].sem_op = 1;
-    op[0].sem_flg = self->opflag;
-
-    if (!PyArg_NoArgs(args))
-        return NULL;
-    refresh_semaphore_status(self);
-    res = semop(self->semid, op, (size_t)1);
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- Z()
-*/
-
-static PyObject *
-PyShmSemaphore_Z(PyShmSemObj *self, PyObject *args)
-{
-    struct sembuf op[1];
-    int res;
-
-    op[0].sem_num = 0;
-    op[0].sem_op = 0;
-    op[0].sem_flg = self->opflag;
-
-    if (!PyArg_NoArgs(args))
-        return NULL;
-    refresh_semaphore_status(self);
-    res = semop(self->semid, op, (size_t)1);
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setblocking(0|1)
-*/
-
-static PyObject *
-PyShmSemaphore_setblocking(PyShmSemObj *self, PyObject *args)
-{
-    int block;
-
-    if (!PyArg_ParseTuple(args, "i", &block))
-        return NULL;
-    refresh_semaphore_status(self);
-    if (block)
-        self->opflag &= ~IPC_NOWAIT;
-    else
-        self->opflag |= IPC_NOWAIT;
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setgid(int Gid)
-*/
-
-static PyObject *
-PyShmSemaphore_setgid(PyShmSemObj *self, PyObject *args)
-{
-    long newgid, oldgid;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "l", &newgid))
-        return NULL;
-    refresh_semaphore_status(self);
-    oldgid = (long)self->ds.sem_perm.gid;
-    self->ds.sem_perm.gid = (gid_t)newgid;
-    arg.buf = &(self->ds);
-    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
-        self->ds.sem_perm.gid = (gid_t)oldgid;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setperm(int Perm)
-*/
-
-static PyObject *
-PyShmSemaphore_setperm(PyShmSemObj *self, PyObject *args)
-{
-    long newmode, oldmode;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "l", &newmode))
-        return NULL;
-    refresh_semaphore_status(self);
-    newmode &= 0777;	/* permission bits only */
-    oldmode = (mode_t)self->ds.sem_perm.mode;
-    self->ds.sem_perm.mode ^= 0777;
-    self->ds.sem_perm.mode |= (mode_t)newmode;
-    arg.buf = &(self->ds);
-    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
-        self->ds.sem_perm.mode = (mode_t)oldmode;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setuid(int Uid)
-*/
-
-static PyObject *
-PyShmSemaphore_setuid(PyShmSemObj *self, PyObject *args)
-{
-    long newuid, olduid;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "l", &newuid))
-        return NULL;
-    refresh_semaphore_status(self);
-    olduid = (long)self->ds.sem_perm.uid;
-    /* v1.1 - fixed typo that set the group id rather than the user id */
-    self->ds.sem_perm.uid = (uid_t)newuid;
-    arg.buf = &(self->ds);
-    if (semctl(self->semid, 0, IPC_SET, arg) == -1) {
-        self->ds.sem_perm.uid = (uid_t)olduid;
-        return PyShm_Err();
-    }
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setundo(0|1)
-*/
-
-static PyObject *
-PyShmSemaphore_setundo(PyShmSemObj *self, PyObject *args)
-{
-    int undo;
-
-    if (!PyArg_ParseTuple(args, "i", &undo))
-        return NULL;
-    refresh_semaphore_status(self);
-    if (undo)
-        self->opflag |= SEM_UNDO;
-    else
-        self->opflag &= ~SEM_UNDO;
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- setval(int Value)
-*/
-
-static PyObject *
-PyShmSemaphore_setval(PyShmSemObj *self, PyObject *args)
-{
-    int value;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "i", &value))
-        return NULL;
-    refresh_semaphore_status(self);
-    arg.val = value;
-    if (semctl(self->semid, 0, SETVAL, arg) == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/* List of methods for semaphore objects */
-
-static PyMethodDef semaphore_methods[] = {
-    {"P",		(PyCFunction)PyShmSemaphore_P,			0,
-     "P() --> None | except shm.error"},
-    {"V",		(PyCFunction)PyShmSemaphore_V,			0,
-     "V() --> None | except shm.error"},
-    {"Z",		(PyCFunction)PyShmSemaphore_Z,			0,
-     "Z() --> None | except shm.error"},
-    {"setblocking",	(PyCFunction)PyShmSemaphore_setblocking,	1,
-     "setblocking(0|1) --> None"},
-    {"setgid",		(PyCFunction)PyShmSemaphore_setgid,		1,
-     "setgid(int Gid) --> None | except shm.error"},
-    {"setperm",		(PyCFunction)PyShmSemaphore_setperm,		1,
-     "setperm(int Perm) --> None | except shm.error"},
-    {"setuid",		(PyCFunction)PyShmSemaphore_setuid,		1,
-     "setuid(int Uid) --> None | except shm.error"},
-    {"setundo",		(PyCFunction)PyShmSemaphore_setundo,		1,
-     "setundo(0|1) --> None"},
-    {"setval",		(PyCFunction)PyShmSemaphore_setval,		1,
-     "setval(int Value) --> None | except shm.error"},
-    {NULL,	NULL}		/* sentinel */
-};
-
-#define OFF(x)	offsetof(PyShmSemaphoreObject, x)
-#define OFF1(x)	OFF(ds) + offsetof(struct semid_ds, x)
-#define OFF2(x)	OFF1(sem_perm) + offsetof(struct ipc_perm, x)
-
-/* List of members for semaphore objects */
-
-/* Note: member types are set in the initshm function.
-   Members which need separate processing are:
-   - val, lpid, ncnt, zcnt --> in kernel memory, not accessible from a process
-   - perm --> return permission (lower 9) bits only of ds.sem_perm.mode
-   - blocking --> in opflags
-*/
-
-static struct memberlist semaphore_memberlist[] = {
-    {"cgid",	T_INT,	OFF2(cgid),		RO},	/* 0  (gid_t)  */
-    {"cuid",	T_INT,	OFF2(cuid),		RO},	/* 1  (uid_t)  */
-    {"key",	    T_INT,	OFF2(IPC_PERM_KEY_NAME),		RO},	/* 2  (key_t)  */
-    {"semid",	T_INT,	OFF(semid),		RO},	/* 3  (int)    */
-    {"gid",	    T_INT,	OFF2(gid),		RO},	/* 4  (gid_t)  */
-    {"uid",	    T_INT,	OFF2(uid),		RO},	/* 5  (uid_t)  */
-    /* The following members are implemented without this table */
-    {"lpid",	T_INT,	0,			RO},	/* 6  (ushort) */
-    {"ncnt",	T_INT,	0,			RO},	/* 7  (ushort) */
-    {"perm",	T_INT,	0,			RO},	/* 8  (mode_t) */
-    {"val",	    T_INT,	0,			RO},	/* 9  (ushort) */
-    {"zcnt",	T_INT,	0,			RO},	/* 10 (ushort) */
-    {"blocking",T_INT,	0,			RO},	/* 11 (ushort) */
-    {NULL}			/* sentinel */
-};
-
-#undef OFF
-#undef OFF1
-#undef OFF2
-
-static void
-PyShmSemaphore_dealloc(PyShmSemObj *self)
-{
-    /* del sem_dict[key], ignore if it fails */
-    if (PyDict_DelItem(sem_dict, PyInt_FromLong(self->semid)) == -1)
-        PyErr_Clear();
-    /* v1.1 - changed the reference below from PyMem_DEL to PyObject_Del.    */
-    PyObject_Del(self);
-}
-
-static PyObject *
-PyShmSemaphore_getattr(PyShmSemObj *self, char *name)
-{
-    PyObject *res;
-
-    res = Py_FindMethod(semaphore_methods, (PyObject *)self, name);
-    if (res != NULL)
-        return res;
-    PyErr_Clear();
-    refresh_semaphore_status(self);
-    if (strcmp(name, "val") == 0)
-        return PyInt_FromLong(semctl(self->semid, 0, GETVAL, 0));
-    if (strcmp(name, "lpid") == 0)
-        return PyInt_FromLong(semctl(self->semid, 0, GETPID, 0));
-    if (strcmp(name, "ncnt") == 0)
-        return PyInt_FromLong(semctl(self->semid, 0, GETNCNT, 0));
-    if (strcmp(name, "zcnt") == 0)
-        return PyInt_FromLong(semctl(self->semid, 0, GETZCNT, 0));
-    if (strcmp(name, "perm") == 0)
-        return PyInt_FromLong(self->ds.sem_perm.mode & 0777);
-    /* v1.1 - added blocking */
-    if (strcmp(name, "blocking") == 0)
-        return PyInt_FromLong(self->opflag & IPC_NOWAIT ? 0 : 1);
-    return PyMember_Get((char *)self, semaphore_memberlist, name);
-}
-
-static PyObject *
-PyShmSemaphore_repr(PyShmSemObj *self, char *name)
-{
-    /* v1.1 - added blocking */
-    char buf[200];
-
-    refresh_semaphore_status(self);
-    sprintf(buf, "<semaphore object, id=%d, val=%d, ncnt=%d, zcnt=%d, blocking=%d>",
-            self->semid,
-            semctl(self->semid, 0, GETVAL, 0),
-            semctl(self->semid, 0, GETNCNT, 0),
-            semctl(self->semid, 0, GETZCNT, 0),
-            self->opflag & IPC_NOWAIT ? 0 : 1);
-    return PyString_FromString(buf);
-}
-
-/* Type object for semaphore objects */
-
-static PyTypeObject PyShmSemaphore_Type = {
-    PyObject_HEAD_INIT(&PyType_Type)
-    0,					/*ob_size*/
-    "semaphore",			/*tp_name*/
-    sizeof(PyShmSemObj),		/*tp_size*/
-    0,					/*tp_itemsize*/
-    /* methods */
-    (destructor)PyShmSemaphore_dealloc,	/*tp_dealloc*/
-    0,					/*tp_print*/
-    (getattrfunc)PyShmSemaphore_getattr,/*tp_getattr*/
-    0,					/*tp_setattr*/
-    0,					/*tp_compare*/
-    (reprfunc)PyShmSemaphore_repr,	/*tp_repr*/
-    0,					/*tp_as_number*/
-    0,					/*tp_as_sequence*/
-    0,					/*tp_as_mapping*/
-};
-
-/************************************************************/
-/*                      Module Interface                    */
-/************************************************************/
-
-/*
--- ftok(string Path, int ProjId) -> int
-*/
-
-/* Compute a key by using the system's ftok algorithm */
-
-static PyObject *
-PyShm_ftok(PyObject *self, PyObject *args)
-{
-    char *path;
-    char id;
-    key_t key;
-
-    if (!PyArg_ParseTuple(args, "sb", &path, &id))
-        return NULL;
-    key = ftok(path, id);
-    return PyInt_FromLong((long)key);
-}
-
-/*
--- getshmid(int Key) --> int | except KeyError
-*/
-
-/* Return a shared memory segment id from a given key */
-
-static PyObject *
-PyShm_getshmid(PyObject *self, PyObject *args)
-{
-    long key;
-    int shmid;
-
-    if (!PyArg_ParseTuple(args, "l", &key))
-        return NULL;
-    shmid = shmget((key_t)key, 0, 0);
-    if (shmid == -1) {
-        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(key));
-        return NULL;
-    }
-    return PyInt_FromLong(shmid);
-}
-
-/*
--- memory_haskey(int Key) --> int
-*/
-
-/* Check whether there is a shared memory segment with the given key */
-
-static PyObject *
-PyShm_memory_haskey(PyObject *self, PyObject *args)
-{
-    long key;
-    int shmid;
-
-    if (!PyArg_ParseTuple(args, "l", &key))
-        return NULL;
-    shmid = shmget((key_t)key, 0, 0);
-    return PyInt_FromLong((shmid == -1) ? 0 : 1);
-}
-
-/*
--- memory(int Shmid) --> object | except shm.error
-*/
-
-/* Get an existing shared memory segment and return it as a python object. */
-
-static PyObject *
-PyShm_memory(PyObject *self, PyObject *args)
-{
-    int shmid;
-    PyShmObj *o;
-    PyObject *keyo;
-
-    if (!PyArg_ParseTuple(args, "i", &shmid))
-        return NULL;
-    keyo = PyInt_FromLong(shmid);
-    /* get the object from the dictionary */
-    if (PyMapping_HasKey(shm_dict, keyo)) {
-        o = (PyShmObj *)PyDict_GetItem(shm_dict, keyo);
-        Py_INCREF(o);
-    }
-    else {
-        /* not found, create it */
-        if ((o = PyObject_NEW(PyShmObj, &PyShmMemory_Type)) == NULL)
-            return NULL;
-        o->shmid = shmid;
-        o->addr = NULL;
-        o->mode = 0;
-        /* shm_dict[shmid] = o */
-        if (PyDict_SetItem(shm_dict, keyo, (PyObject *)o) == -1) {
-            Py_DECREF(o);
-            PyErr_SetString(PyShm_Error, "can't initialize shared memory object");
-            return NULL;
-        }
-        Py_DECREF(o);	/* the owned reference in shm_dict doesn't count! */
-    }
-    /* v1.1 - plugged memory leak */
-    Py_DECREF(keyo);
-    /* set up the status data */
-    if (shmctl(o->shmid, IPC_STAT, &(o->ds)) == -1) {
-        Py_DECREF(o);
-        PyErr_SetString(PyShm_Error, "can't access shared memory segment");
-        return NULL;
-    }
-    return (PyObject *)o;
-}
-
-/*
--- create_memory(int Key, int Size [,int Perm=0666]) --> object
-*/
-
-/* Create a new shared memory segment. */
-
-static PyObject *
-PyShm_create_memory(PyObject *self, PyObject *args)
-{
-    long key;
-    int size, shmid;
-    int perm = 0666;	/* Default permission is -rw-rw-rw- */
-    PyObject *py_shmid;
-    PyObject *memory;
-
-    if (!PyArg_ParseTuple(args, "li|i", &key, &size, &perm))
-        return NULL;
-    shmid = shmget((key_t)key, size, perm | IPC_CREAT | IPC_EXCL);
-    if (shmid == -1)
-        return PyShm_Err();
-    /* v1.1 - fixed memory leak resulting from inlining Py_BuildValue */
-    py_shmid = Py_BuildValue("(i)", shmid);
-    memory = PyShm_memory(self, py_shmid);
-    Py_DECREF(py_shmid);
-
-    return memory;
-}
-
-/*
--- remove_memory(int Shmid) --> None | except shm.error
-*/
-
-/* Remove an existing shared memory segment. */
-
-static PyObject *
-PyShm_remove_memory(PyObject *self, PyObject *args)
-{
-    int shmid, res;
-
-    if (!PyArg_ParseTuple(args, "i", &shmid))
-        return NULL;
-    res = shmctl(shmid, IPC_RMID, 0);	/* remove it */
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/*
--- getsemid(int Key) --> int | except KeyError
-*/
-
-/* Return a semaphore id from a given key */
-
-static PyObject *
-PyShm_getsemid(PyObject *self, PyObject *args)
-{
-    long key;
-    int semid;
-
-    if (!PyArg_ParseTuple(args, "l", &key))
-        return NULL;
-    semid = semget((key_t)key, 0, 0);
-    if (semid == -1) {
-        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(key));
-        return NULL;
-    }
-    return PyInt_FromLong(semid);
-}
-
-/*
--- semaphore_haskey(int Key) --> int
-*/
-
-/* Check whether there is a semaphore with the given key */
-
-static PyObject *
-PyShm_semaphore_haskey(PyObject *self, PyObject *args)
-{
-    long key;
-    int semid;
-
-    if (!PyArg_ParseTuple(args, "l", &key))
-        return NULL;
-    semid = semget((key_t)key, 0, 0);
-    return PyInt_FromLong((semid == -1) ? 0 : 1);
-}
-
-/*
--- semaphore(int Semid) --> object
-*/
-
-/* Get an existing semaphore and return it as a python object. */
-
-static PyObject *
-PyShm_semaphore(PyObject *self, PyObject *args)
-{
-    int semid;
-    PyShmSemObj *o;
-    PyObject *keyo;
-    semctl_arg arg;
-
-    if (!PyArg_ParseTuple(args, "i", &semid))
-        return NULL;
-    keyo = PyInt_FromLong(semid);
-    /* get the object from the dictionary */
-    if (PyMapping_HasKey(sem_dict, keyo)) {
-        o = (PyShmSemObj *)PyDict_GetItem(sem_dict, keyo);
-        Py_INCREF(o);
-    }
-    else {
-        /* not found, create it */
-        if ((o = PyObject_NEW(PyShmSemObj, &PyShmSemaphore_Type)) == NULL)
-            return NULL;
-        o->semid = semid;
-        o->opflag = 0;
-        /* sem_dict[semid] = o */
-        if (PyDict_SetItem(sem_dict, keyo, (PyObject *)o) == -1) {
-            Py_DECREF(o);
-            PyErr_SetString(PyShm_Error, "can't initialize semaphore object");
-            return NULL;
-        }
-        Py_DECREF(o);	/* the owned reference in sem_dict doesn't count! */
-    }
-    /* v1.1 - plugged memory leak */
-    Py_DECREF(keyo);
-    /* set up the status data */
-    arg.buf = &(o->ds);
-    if (semctl(o->semid, 0, IPC_STAT, arg) == -1) {
-        Py_DECREF(o);
-        PyErr_SetString(PyShm_Error, "can't access semaphore");
-        return NULL;
-    }
-    return (PyObject *)o;
-}
-
-/*
--- create_semaphore(int Key, [,int Value=1 [,int Perm=0666]]) --> object
-*/
-
-/* Create a new semaphore. */
-
-static PyObject *
-PyShm_create_semaphore(PyObject *self, PyObject *args)
-{
-    long key;
-    int semid;
-    int value = 1;
-    int perm = 0666;	/* Default permission is -rw-rw-rw- */
-    semctl_arg arg;
-    PyObject *py_shmid;
-    PyObject *semaphore;
-
-    if (!PyArg_ParseTuple(args, "l|ii", &key, &value, &perm))
-        return NULL;
-    semid = semget((key_t)key, 1, perm | IPC_CREAT | IPC_EXCL);
-    arg.val = value;
-    if (!((semid != -1) && (semctl(semid, 0, SETVAL, arg) != -1)))
-	   return PyShm_Err();
-    /* v1.1 - fixed memory leak resulting from inlining Py_BuildValue */
-    py_shmid = Py_BuildValue("(i)", semid);
-    semaphore = PyShm_semaphore(self, py_shmid);
-    Py_DECREF(py_shmid);
-
-    return semaphore;
-}
-
-/*
--- remove_semaphore(int Semid) --> None | except shm.error
-*/
-
-/* Remove an existing semaphore. */
-
-static PyObject *
-PyShm_remove_semaphore(PyObject *self, PyObject *args)
-{
-    int semid, res;
-
-    if (!PyArg_ParseTuple(args, "i", &semid))
-        return NULL;
-    res = semctl(semid, 0, IPC_RMID, 0);	/* remove it */
-    if (res == -1)
-        return PyShm_Err();
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-
-/* List of functions exported by this module. */
-
-static PyMethodDef PyShm_methods[] = {
-    {"create_memory",		PyShm_create_memory,	1,
-     "create_memory(int Key, int Size [,int Perm=0666]) --> object | except shm.error"},
-    {"create_semaphore",	PyShm_create_semaphore,	1,
-     "create_semaphore(int Key [,int Value=1 [,int Perm=0666]]) --> object | except shm.error"},
-    {"ftok",			PyShm_ftok,		1,
-     "ftok(string Path, int ProjId) --> int | except shm.error"},
-    {"getsemid",		PyShm_getsemid,		1,
-     "getsemid(int Key) --> int | except KeyError"},
-    {"getshmid",		PyShm_getshmid,		1,
-     "getshmid(int Key) --> int | except KeyError"},
-    {"memory_haskey",		PyShm_memory_haskey,	1,
-     "memory_haskey(int Key) --> int"},
-    {"memory",			PyShm_memory,		1,
-     "memory(int Shmid) --> object | except shm.error"},
-    {"semaphore",		PyShm_semaphore,	1,
-     "semaphore(int Semid) --> object | except shm.error"},
-    {"semaphore_haskey",	PyShm_semaphore_haskey,	1,
-     "semaphore_haskey(int Key) --> int"},
-    {"remove_memory",		PyShm_remove_memory,	1,
-     "remove_memory(int Shmid) --> None | except shm.error"},
-    {"remove_semaphore",	PyShm_remove_semaphore,	1,
-     "remove_semaphore(int Semid) --> None | except shm.error"},
-    {NULL,			NULL}		/* Sentinel */
-};
-
-
-/* Initialize this module */
-
-/* This is for inserting constants in the module's dictionary */
-
-static void
-insint(PyObject *d, char *name, int value)
-{
-	PyObject *v = PyInt_FromLong((long) value);
-	if (!v || PyDict_SetItemString(d, name, v))
-		Py_FatalError("can't initialize shm module");
-
-	Py_DECREF(v);
-}
-
-/* This is to set up the type of shared memory/semaphore object members */
-
-static void
-set_member_type(struct memberlist *sxm_memberlist,
-                int index,                          /* index in memberlist */
-                int typesize                        /* sizeof(member_type) */
-               )
-{
-    int t;
-
-    if (typesize == sizeof(char))
-        t = T_UBYTE;
-    else if (typesize == sizeof(short))
-        t = T_USHORT;
-    else if (typesize == sizeof(int))
-        t = T_UINT;
-    else if (typesize == sizeof(long))
-        t = T_ULONG;
-    else
-        Py_FatalError("can't initialize shm module");
-    sxm_memberlist[index].type = t;
-};
-
-void
-initshm(void)
-{
-    PyObject *m, *d;
-
-    m = Py_InitModule("shm", PyShm_methods);
-    d = PyModule_GetDict(m);
-    PyShm_Error = PyString_FromString("shm.error");
-    if (PyShm_Error == NULL ||
-	PyDict_SetItemString(d, "error", PyShm_Error) != 0)
-	    Py_FatalError("can't define shm.error");
-    if (PyDict_SetItemString(d, "__doc__", PyString_FromString
-			     ("Interface to System V shared memory IPC")) != 0)
-        Py_FatalError("can't define shm.__doc__");
-    if ((shm_dict = PyDict_New()) == NULL || (sem_dict = PyDict_New()) == NULL)
-	   Py_FatalError("can't initialize shm module");
-
-    /* initialize the machine dependent types in memory_memberlist */
-    set_member_type(memory_memberlist, 0, sizeof(gid_t));	/* cgid   */
-    set_member_type(memory_memberlist, 1, sizeof(pid_t));	/* cpid   */
-    set_member_type(memory_memberlist, 2, sizeof(uid_t));	/* cuid   */
-    set_member_type(memory_memberlist, 3, sizeof(key_t));	/* key    */
-    set_member_type(memory_memberlist, 4, sizeof(pid_t));	/* lpid   */
-    set_member_type(memory_memberlist, 5, sizeof(int));		/* shmid  */
-    set_member_type(memory_memberlist, 6, sizeof(int));		/* size   */
-    set_member_type(memory_memberlist, 7, sizeof(gid_t));	/* gid    */
-    set_member_type(memory_memberlist, 8, sizeof(uid_t));	/* uid    */
-
-    /* initialize the machine dependent types in semaphore_memberlist */
-    set_member_type(semaphore_memberlist, 0, sizeof(gid_t));	/* cgid   */
-    set_member_type(semaphore_memberlist, 1, sizeof(uid_t));	/* cuid   */
-    set_member_type(semaphore_memberlist, 2, sizeof(key_t));	/* key    */
-    set_member_type(semaphore_memberlist, 3, sizeof(int));	/* semid  */
-    set_member_type(semaphore_memberlist, 4, sizeof(gid_t));	/* gid    */
-    set_member_type(semaphore_memberlist, 5, sizeof(uid_t));	/* uid    */
-
-    /* relevant constants for this module; the others are useless here */
-    insint(d, "IPC_PRIVATE", IPC_PRIVATE);
-    insint(d, "SHM_RDONLY", SHM_RDONLY);
-    insint(d, "SHM_RND", SHM_RND);
-#ifdef SHMLBA
-    insint(d, "SHMLBA", SHMLBA);
-#endif
-#ifdef SEM_A
-    insint(d, "SEM_A", SEM_A);
-#endif
-#ifdef SEM_R
-    insint(d, "SEM_R", SEM_R);
-#endif
-#ifdef SHM_R
-    insint(d, "SHM_R", SHM_R);
-#endif
-#ifdef SHM_W
-    insint(d, "SHM_W", SHM_W);
-#endif
-}

==== BEGIN SVK PATCH BLOCK ====
Version: svk 1.08 (linux)

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
EKepNCOqV5hEtxCQ/f8AlgX9+w==
==== END SVK PATCH BLOCK ====
